// Code modified by spidl-tag. DO NOT EDIT.
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: price_sync_price_calculation.proto

/*
Package price_sync_price_calculation is a generated protocol buffer package.

It is generated from these files:

	price_sync_price_calculation.proto

It has these top-level messages:

	Constant
	CalcGlobalDiscountInfoByItemIdsRequest
	GlobalDiscountQueryId
	CalcGlobalDiscountInfoByItemIdsResponse
	GlobalDiscountInfo
	ItemModelId
	CalcLocalSipOverseaDiscountPriceRequest
	CalcLocalSipOverseaDiscountPriceResponse
	LocalSIPAffiPriceResult
	GetCbSipAHiddenFeeConfigRequest
	GetCbSipAHiddenFeeConfigResponse
	AHiddenFeeRuleInfo
	AHiddenFeeRuleRow
	GetCbSipRateConfigRequest
	GetCbSipRateConfigResponse
	GetCbSipShopLevelConfigRequest
	GetCbSipShopLevelConfigResponse
	CbSipAffiShopInfo
	GetCbSipRegionLevelConfigRequest
	GetCbSipRegionLevelConfigResponse
	CbSipRegionLevelExchangeRateConfig
	ExchangeRateData
	CbSipRegionLevelCountryMarginConfig
	CountryMarginData
	GetLocalSipPriceFactorRequest
	RegionPair
	GetLocalSipPriceFactorResponse
	LocalSipPriceFactorInfo
	LocalSipPriceFactorBasicInfo
	LocalSipPriceFactorShippingFeeInfo
	LocalSipPriceFactorHiddenFeeInfo
	LocalShippingFeeRule
	GetCbscPriceFactorRequest
	GetCbscPriceFactorResponse
	CbscPriceFactor
	CbscShopLevelFeeRate
	CbscFeeRateLimit
	CbscProfitRateLimit
	CbscServiceFeeRateLimit
	CbscExchangeRate
	SetCbscPriceFactorRequest
	SetCbscPriceFactorResponse
	ShopCbscPriceFactorSetting
	ConvertCurrencyRequest
	ConvertCurrencyResponse
	CalculateAPriceByPItemForLocalSIPRequest
	LocalSipAPriceQueryId
	CalculateAPriceByPItemForLocalSIPResponse
	ShopItemCustomizedOPL
	LocalSipAPriceInfo
	LocalSipPriceFactorSnap
	CalculateSipItemPriceForCbSipRequest
	SipItemPriceForCbSipQueryId
	CalculateSipItemPriceForCbSipResponse
	CbSipItemPriceInfo
	CalculateAPriceByPItemForCBSIPRequest
	AItemCBSIPQueryId
	CalculateAPriceByPItemForCBSIPResponse
	CustomizedOPL
	AItemPriceResultInfo
	CbSipPriceFactorSnap
	CalculatePriceForCbscRequest
	MtskuMpskuPriceQueryId
	CalculatePriceForCbscResponse
	MtskuMpskuPriceQueryInfo
	UpdateProfitRateLimitRequest
	UpdateProfitRateLimitResponse
	GetProfitRateLimitListRequest
	GetProfitRateLimitListResponse
	ProfitRateLimit
	GetAShopMarginRequest
	GetAShopMarginResponse
	ShopMargin
	GetAShopPriceRatioRequest
	GetAShopPriceRatioResponse
	ShopPriceRatio
	GetAItemMarginRequest
	ShopIDToItemIDs
	GetAItemMarginResponse
	ItemMargin
	GetAItemRealWeightRequest
	GetAItemRealWeightResponse
	SetAShopMarginRequest
	SetAShopMarginResponse
	ShopPriceRatioSetting
	SetAShopPriceRatioBatchResponse
	SetAItemMarginRequest
	SetAItemMarginResponse
	SetAItemRealWeightRequest
	SetAItemRealWeightResponse
	GetPShopOpsPriceRatioSettingBatchRequest
	PShopOpsPriceRatioSetting
	GetPShopOpsPriceRatioSettingBatchResponse
	SetPriceRatioRequest
	SetPriceRatioResponse
	GetCBSIPAShopSellerDiscountPromotionRequest
	GetCBSIPAShopSellerDiscountPromotionResponse
	CreateCBSIPAShopSellerDiscountPromotionRequest
	CreateCBSIPAShopSellerDiscountPromotionResponse
*/
package price_sync_price_calculation

import (
	fmt "fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	encoding_binary "encoding/binary"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// range: 415900000 - 416000000
type Constant_ErrorCode int32

const (
	// server related error
	Constant_ERROR_INTERNAL  Constant_ErrorCode = 415900000
	Constant_ERROR_MARSHAL   Constant_ErrorCode = 415900001
	Constant_ERROR_DATABASE  Constant_ErrorCode = 415900002
	Constant_ERROR_CACHE     Constant_ErrorCode = 415900003
	Constant_ERROR_HTTP_API  Constant_ErrorCode = 415900004
	Constant_ERROR_NOT_FOUND Constant_ErrorCode = 415900005
	Constant_ERROR_EXTERNAL  Constant_ErrorCode = 415900006
	// business related error
	Constant_ERROR_PARAMS                      Constant_ErrorCode = 415900100
	Constant_ERROR_GET_MERCHANT_REGION         Constant_ErrorCode = 415900101
	Constant_ERROR_GET_MERCHANT_CONFIG_SETTING Constant_ErrorCode = 415900102
	Constant_ERROR_GET_MERCHANT_EXCHANGE_RATE  Constant_ErrorCode = 415900103
	Constant_ERROR_GET_SHOP_COMMISSION_RATE    Constant_ErrorCode = 415900104
	Constant_ERROR_GET_ITEM_INFO               Constant_ErrorCode = 415900105
	Constant_ERROR_GET_ENABLED_CHANNELS        Constant_ErrorCode = 415900106
	Constant_ERROR_EMPTY_ENABLED_CHANNELS      Constant_ErrorCode = 415900107
	Constant_ERROR_CALCULATE_HIDDEN_FEE        Constant_ErrorCode = 415900108
	Constant_ERROR_GLOBAL_DISCOUNT_UNEXPECTED  Constant_ErrorCode = 415900109
	Constant_ERROR_INVALID_USER_STATUS         Constant_ErrorCode = 415900110
)

var Constant_ErrorCode_name = map[int32]string{
	415900000: "ERROR_INTERNAL",
	415900001: "ERROR_MARSHAL",
	415900002: "ERROR_DATABASE",
	415900003: "ERROR_CACHE",
	415900004: "ERROR_HTTP_API",
	415900005: "ERROR_NOT_FOUND",
	415900006: "ERROR_EXTERNAL",
	415900100: "ERROR_PARAMS",
	415900101: "ERROR_GET_MERCHANT_REGION",
	415900102: "ERROR_GET_MERCHANT_CONFIG_SETTING",
	415900103: "ERROR_GET_MERCHANT_EXCHANGE_RATE",
	415900104: "ERROR_GET_SHOP_COMMISSION_RATE",
	415900105: "ERROR_GET_ITEM_INFO",
	415900106: "ERROR_GET_ENABLED_CHANNELS",
	415900107: "ERROR_EMPTY_ENABLED_CHANNELS",
	415900108: "ERROR_CALCULATE_HIDDEN_FEE",
	415900109: "ERROR_GLOBAL_DISCOUNT_UNEXPECTED",
	415900110: "ERROR_INVALID_USER_STATUS",
}
var Constant_ErrorCode_value = map[string]int32{
	"ERROR_INTERNAL":                    415900000,
	"ERROR_MARSHAL":                     415900001,
	"ERROR_DATABASE":                    415900002,
	"ERROR_CACHE":                       415900003,
	"ERROR_HTTP_API":                    415900004,
	"ERROR_NOT_FOUND":                   415900005,
	"ERROR_EXTERNAL":                    415900006,
	"ERROR_PARAMS":                      415900100,
	"ERROR_GET_MERCHANT_REGION":         415900101,
	"ERROR_GET_MERCHANT_CONFIG_SETTING": 415900102,
	"ERROR_GET_MERCHANT_EXCHANGE_RATE":  415900103,
	"ERROR_GET_SHOP_COMMISSION_RATE":    415900104,
	"ERROR_GET_ITEM_INFO":               415900105,
	"ERROR_GET_ENABLED_CHANNELS":        415900106,
	"ERROR_EMPTY_ENABLED_CHANNELS":      415900107,
	"ERROR_CALCULATE_HIDDEN_FEE":        415900108,
	"ERROR_GLOBAL_DISCOUNT_UNEXPECTED":  415900109,
	"ERROR_INVALID_USER_STATUS":         415900110,
}

func (x Constant_ErrorCode) Enum() *Constant_ErrorCode {
	p := new(Constant_ErrorCode)
	*p = x
	return p
}
func (x Constant_ErrorCode) String() string {
	return proto.EnumName(Constant_ErrorCode_name, int32(x))
}
func (x *Constant_ErrorCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Constant_ErrorCode_value, data, "Constant_ErrorCode")
	if err != nil {
		return err
	}
	*x = Constant_ErrorCode(value)
	return nil
}
func (Constant_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{0, 0}
}

type Constant_GlobalDiscountInputType int32

const (
	Constant_DISCOUNT_RATE Constant_GlobalDiscountInputType = 0
	Constant_MPSKU_PRICE   Constant_GlobalDiscountInputType = 1
)

var Constant_GlobalDiscountInputType_name = map[int32]string{
	0: "DISCOUNT_RATE",
	1: "MPSKU_PRICE",
}
var Constant_GlobalDiscountInputType_value = map[string]int32{
	"DISCOUNT_RATE": 0,
	"MPSKU_PRICE":   1,
}

func (x Constant_GlobalDiscountInputType) Enum() *Constant_GlobalDiscountInputType {
	p := new(Constant_GlobalDiscountInputType)
	*p = x
	return p
}
func (x Constant_GlobalDiscountInputType) String() string {
	return proto.EnumName(Constant_GlobalDiscountInputType_name, int32(x))
}
func (x *Constant_GlobalDiscountInputType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Constant_GlobalDiscountInputType_value, data, "Constant_GlobalDiscountInputType")
	if err != nil {
		return err
	}
	*x = Constant_GlobalDiscountInputType(value)
	return nil
}
func (Constant_GlobalDiscountInputType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{0, 1}
}

type Constant_CalcErr int32

const (
	Constant_DISCOUNT_PRICE_HIT_LIMIT        Constant_CalcErr = 1
	Constant_DISCOUNT_PRICE_FACTOR_NOT_FOUND Constant_CalcErr = 2
)

var Constant_CalcErr_name = map[int32]string{
	1: "DISCOUNT_PRICE_HIT_LIMIT",
	2: "DISCOUNT_PRICE_FACTOR_NOT_FOUND",
}
var Constant_CalcErr_value = map[string]int32{
	"DISCOUNT_PRICE_HIT_LIMIT":        1,
	"DISCOUNT_PRICE_FACTOR_NOT_FOUND": 2,
}

func (x Constant_CalcErr) Enum() *Constant_CalcErr {
	p := new(Constant_CalcErr)
	*p = x
	return p
}
func (x Constant_CalcErr) String() string {
	return proto.EnumName(Constant_CalcErr_name, int32(x))
}
func (x *Constant_CalcErr) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Constant_CalcErr_value, data, "Constant_CalcErr")
	if err != nil {
		return err
	}
	*x = Constant_CalcErr(value)
	return nil
}
func (Constant_CalcErr) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{0, 2}
}

type Constant_LocalSipInfoType int32

const (
	Constant_BASIC_INFO   Constant_LocalSipInfoType = 0
	Constant_HIDDEN_FEE   Constant_LocalSipInfoType = 1
	Constant_SHIPPING_FEE Constant_LocalSipInfoType = 2
)

var Constant_LocalSipInfoType_name = map[int32]string{
	0: "BASIC_INFO",
	1: "HIDDEN_FEE",
	2: "SHIPPING_FEE",
}
var Constant_LocalSipInfoType_value = map[string]int32{
	"BASIC_INFO":   0,
	"HIDDEN_FEE":   1,
	"SHIPPING_FEE": 2,
}

func (x Constant_LocalSipInfoType) Enum() *Constant_LocalSipInfoType {
	p := new(Constant_LocalSipInfoType)
	*p = x
	return p
}
func (x Constant_LocalSipInfoType) String() string {
	return proto.EnumName(Constant_LocalSipInfoType_name, int32(x))
}
func (x *Constant_LocalSipInfoType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Constant_LocalSipInfoType_value, data, "Constant_LocalSipInfoType")
	if err != nil {
		return err
	}
	*x = Constant_LocalSipInfoType(value)
	return nil
}
func (Constant_LocalSipInfoType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{0, 3}
}

type Constant_CbSipRegionLevelInfoType int32

const (
	Constant_EXCHANGE_RATE  Constant_CbSipRegionLevelInfoType = 0
	Constant_COUNTRY_MARGIN Constant_CbSipRegionLevelInfoType = 1
)

var Constant_CbSipRegionLevelInfoType_name = map[int32]string{
	0: "EXCHANGE_RATE",
	1: "COUNTRY_MARGIN",
}
var Constant_CbSipRegionLevelInfoType_value = map[string]int32{
	"EXCHANGE_RATE":  0,
	"COUNTRY_MARGIN": 1,
}

func (x Constant_CbSipRegionLevelInfoType) Enum() *Constant_CbSipRegionLevelInfoType {
	p := new(Constant_CbSipRegionLevelInfoType)
	*p = x
	return p
}
func (x Constant_CbSipRegionLevelInfoType) String() string {
	return proto.EnumName(Constant_CbSipRegionLevelInfoType_name, int32(x))
}
func (x *Constant_CbSipRegionLevelInfoType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Constant_CbSipRegionLevelInfoType_value, data, "Constant_CbSipRegionLevelInfoType")
	if err != nil {
		return err
	}
	*x = Constant_CbSipRegionLevelInfoType(value)
	return nil
}
func (Constant_CbSipRegionLevelInfoType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{0, 4}
}

type Constant_CbSipRateInfoType int32

const (
	Constant_DEFAULT_SIP_RATE Constant_CbSipRateInfoType = 0
	Constant_LIMIT_LIST       Constant_CbSipRateInfoType = 1
)

var Constant_CbSipRateInfoType_name = map[int32]string{
	0: "DEFAULT_SIP_RATE",
	1: "LIMIT_LIST",
}
var Constant_CbSipRateInfoType_value = map[string]int32{
	"DEFAULT_SIP_RATE": 0,
	"LIMIT_LIST":       1,
}

func (x Constant_CbSipRateInfoType) Enum() *Constant_CbSipRateInfoType {
	p := new(Constant_CbSipRateInfoType)
	*p = x
	return p
}
func (x Constant_CbSipRateInfoType) String() string {
	return proto.EnumName(Constant_CbSipRateInfoType_name, int32(x))
}
func (x *Constant_CbSipRateInfoType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Constant_CbSipRateInfoType_value, data, "Constant_CbSipRateInfoType")
	if err != nil {
		return err
	}
	*x = Constant_CbSipRateInfoType(value)
	return nil
}
func (Constant_CbSipRateInfoType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{0, 5}
}

type Constant_CbSipAHiddenFeeInfoType int32

const (
	Constant_RULES_HPFN_CONFIG_LIST_WITH_PAGINATION Constant_CbSipAHiddenFeeInfoType = 0
	Constant_RULES_HPFN_CONFIG_LIST_ALL             Constant_CbSipAHiddenFeeInfoType = 1
	Constant_RULE_HPFN_CONFIG_DETAIL                Constant_CbSipAHiddenFeeInfoType = 2
	Constant_RULE_HPFN_REGION_SETTING               Constant_CbSipAHiddenFeeInfoType = 3
)

var Constant_CbSipAHiddenFeeInfoType_name = map[int32]string{
	0: "RULES_HPFN_CONFIG_LIST_WITH_PAGINATION",
	1: "RULES_HPFN_CONFIG_LIST_ALL",
	2: "RULE_HPFN_CONFIG_DETAIL",
	3: "RULE_HPFN_REGION_SETTING",
}
var Constant_CbSipAHiddenFeeInfoType_value = map[string]int32{
	"RULES_HPFN_CONFIG_LIST_WITH_PAGINATION": 0,
	"RULES_HPFN_CONFIG_LIST_ALL":             1,
	"RULE_HPFN_CONFIG_DETAIL":                2,
	"RULE_HPFN_REGION_SETTING":               3,
}

func (x Constant_CbSipAHiddenFeeInfoType) Enum() *Constant_CbSipAHiddenFeeInfoType {
	p := new(Constant_CbSipAHiddenFeeInfoType)
	*p = x
	return p
}
func (x Constant_CbSipAHiddenFeeInfoType) String() string {
	return proto.EnumName(Constant_CbSipAHiddenFeeInfoType_name, int32(x))
}
func (x *Constant_CbSipAHiddenFeeInfoType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Constant_CbSipAHiddenFeeInfoType_value, data, "Constant_CbSipAHiddenFeeInfoType")
	if err != nil {
		return err
	}
	*x = Constant_CbSipAHiddenFeeInfoType(value)
	return nil
}
func (Constant_CbSipAHiddenFeeInfoType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{0, 6}
}

type Constant_ExchangeRateSource int32

const (
	Constant_SELLER_PLATFORM          Constant_ExchangeRateSource = 0
	Constant_CB_SIP_EXCHANGE_RATE     Constant_ExchangeRateSource = 1
	Constant_ORDER_MART_EXCHANGE_RATE Constant_ExchangeRateSource = 2
)

var Constant_ExchangeRateSource_name = map[int32]string{
	0: "SELLER_PLATFORM",
	1: "CB_SIP_EXCHANGE_RATE",
	2: "ORDER_MART_EXCHANGE_RATE",
}
var Constant_ExchangeRateSource_value = map[string]int32{
	"SELLER_PLATFORM":          0,
	"CB_SIP_EXCHANGE_RATE":     1,
	"ORDER_MART_EXCHANGE_RATE": 2,
}

func (x Constant_ExchangeRateSource) Enum() *Constant_ExchangeRateSource {
	p := new(Constant_ExchangeRateSource)
	*p = x
	return p
}
func (x Constant_ExchangeRateSource) String() string {
	return proto.EnumName(Constant_ExchangeRateSource_name, int32(x))
}
func (x *Constant_ExchangeRateSource) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Constant_ExchangeRateSource_value, data, "Constant_ExchangeRateSource")
	if err != nil {
		return err
	}
	*x = Constant_ExchangeRateSource(value)
	return nil
}
func (Constant_ExchangeRateSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{0, 7}
}

type Constant_PriceSyncToggle int32

const (
	Constant_PRICE_SYNC_TOGGLE_READ_FROM_SLS Constant_PriceSyncToggle = 1
	Constant_PRICE_SYNC_TOGGLE_READ_FROM_DB  Constant_PriceSyncToggle = 2
)

var Constant_PriceSyncToggle_name = map[int32]string{
	1: "PRICE_SYNC_TOGGLE_READ_FROM_SLS",
	2: "PRICE_SYNC_TOGGLE_READ_FROM_DB",
}
var Constant_PriceSyncToggle_value = map[string]int32{
	"PRICE_SYNC_TOGGLE_READ_FROM_SLS": 1,
	"PRICE_SYNC_TOGGLE_READ_FROM_DB":  2,
}

func (x Constant_PriceSyncToggle) Enum() *Constant_PriceSyncToggle {
	p := new(Constant_PriceSyncToggle)
	*p = x
	return p
}
func (x Constant_PriceSyncToggle) String() string {
	return proto.EnumName(Constant_PriceSyncToggle_name, int32(x))
}
func (x *Constant_PriceSyncToggle) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Constant_PriceSyncToggle_value, data, "Constant_PriceSyncToggle")
	if err != nil {
		return err
	}
	*x = Constant_PriceSyncToggle(value)
	return nil
}
func (Constant_PriceSyncToggle) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{0, 8}
}

type Constant_FeeRateStatus int32

const (
	Constant_FEE_RATE_NOT_SET Constant_FeeRateStatus = 0
	Constant_FEE_RATE_SET     Constant_FeeRateStatus = 1
)

var Constant_FeeRateStatus_name = map[int32]string{
	0: "FEE_RATE_NOT_SET",
	1: "FEE_RATE_SET",
}
var Constant_FeeRateStatus_value = map[string]int32{
	"FEE_RATE_NOT_SET": 0,
	"FEE_RATE_SET":     1,
}

func (x Constant_FeeRateStatus) Enum() *Constant_FeeRateStatus {
	p := new(Constant_FeeRateStatus)
	*p = x
	return p
}
func (x Constant_FeeRateStatus) String() string {
	return proto.EnumName(Constant_FeeRateStatus_name, int32(x))
}
func (x *Constant_FeeRateStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Constant_FeeRateStatus_value, data, "Constant_FeeRateStatus")
	if err != nil {
		return err
	}
	*x = Constant_FeeRateStatus(value)
	return nil
}
func (Constant_FeeRateStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{0, 9}
}

type Constant_HiddenPriceError int32

const (
	Constant_CALCULATE_HIDDEN_FEE_ERROR                      Constant_HiddenPriceError = 2250
	Constant_CALCULATE_HIDDEN_FEE_NO_AVAILABLE_CHANNEL_ERROR Constant_HiddenPriceError = 2251
)

var Constant_HiddenPriceError_name = map[int32]string{
	2250: "CALCULATE_HIDDEN_FEE_ERROR",
	2251: "CALCULATE_HIDDEN_FEE_NO_AVAILABLE_CHANNEL_ERROR",
}
var Constant_HiddenPriceError_value = map[string]int32{
	"CALCULATE_HIDDEN_FEE_ERROR":                      2250,
	"CALCULATE_HIDDEN_FEE_NO_AVAILABLE_CHANNEL_ERROR": 2251,
}

func (x Constant_HiddenPriceError) Enum() *Constant_HiddenPriceError {
	p := new(Constant_HiddenPriceError)
	*p = x
	return p
}
func (x Constant_HiddenPriceError) String() string {
	return proto.EnumName(Constant_HiddenPriceError_name, int32(x))
}
func (x *Constant_HiddenPriceError) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Constant_HiddenPriceError_value, data, "Constant_HiddenPriceError")
	if err != nil {
		return err
	}
	*x = Constant_HiddenPriceError(value)
	return nil
}
func (Constant_HiddenPriceError) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{0, 10}
}

type Constant_CbscPriceFactorInfoType int32

const (
	Constant_CBSC_SHOP_LEVEL_FEE_RATE Constant_CbscPriceFactorInfoType = 0
	Constant_CBSC_FEE_RATE_LIMIT      Constant_CbscPriceFactorInfoType = 1
	Constant_CBSC_EXCHANGE_RATE       Constant_CbscPriceFactorInfoType = 2
)

var Constant_CbscPriceFactorInfoType_name = map[int32]string{
	0: "CBSC_SHOP_LEVEL_FEE_RATE",
	1: "CBSC_FEE_RATE_LIMIT",
	2: "CBSC_EXCHANGE_RATE",
}
var Constant_CbscPriceFactorInfoType_value = map[string]int32{
	"CBSC_SHOP_LEVEL_FEE_RATE": 0,
	"CBSC_FEE_RATE_LIMIT":      1,
	"CBSC_EXCHANGE_RATE":       2,
}

func (x Constant_CbscPriceFactorInfoType) Enum() *Constant_CbscPriceFactorInfoType {
	p := new(Constant_CbscPriceFactorInfoType)
	*p = x
	return p
}
func (x Constant_CbscPriceFactorInfoType) String() string {
	return proto.EnumName(Constant_CbscPriceFactorInfoType_name, int32(x))
}
func (x *Constant_CbscPriceFactorInfoType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Constant_CbscPriceFactorInfoType_value, data, "Constant_CbscPriceFactorInfoType")
	if err != nil {
		return err
	}
	*x = Constant_CbscPriceFactorInfoType(value)
	return nil
}
func (Constant_CbscPriceFactorInfoType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{0, 11}
}

type Constant struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Constant) Reset()         { *m = Constant{} }
func (m *Constant) String() string { return proto.CompactTextString(m) }
func (*Constant) ProtoMessage()    {}
func (*Constant) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{0}
}

// price.sync_price.calculation.calc_global_discount_info_by_item_ids
type CalcGlobalDiscountInfoByItemIdsRequest struct {
	Queries          []*GlobalDiscountQueryId `protobuf:"bytes,1,rep,name=queries" json:"queries"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *CalcGlobalDiscountInfoByItemIdsRequest) Reset() {
	*m = CalcGlobalDiscountInfoByItemIdsRequest{}
}
func (m *CalcGlobalDiscountInfoByItemIdsRequest) String() string { return proto.CompactTextString(m) }
func (*CalcGlobalDiscountInfoByItemIdsRequest) ProtoMessage()    {}
func (*CalcGlobalDiscountInfoByItemIdsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{1}
}

func (m *CalcGlobalDiscountInfoByItemIdsRequest) GetQueries() []*GlobalDiscountQueryId {
	if m != nil {
		return m.Queries
	}
	return nil
}

type GlobalDiscountQueryId struct {
	MerchantId              *uint64 `protobuf:"varint,1,opt,name=merchant_id,json=merchantId" json:"merchant_id"`
	MpskuShopId             *uint64 `protobuf:"varint,2,opt,name=mpsku_shop_id,json=mpskuShopId" json:"mpsku_shop_id"`
	MpskuItemId             *uint64 `protobuf:"varint,3,opt,name=mpsku_item_id,json=mpskuItemId" json:"mpsku_item_id"`
	MpskuModelId            *uint64 `protobuf:"varint,4,opt,name=mpsku_model_id,json=mpskuModelId" json:"mpsku_model_id"`
	MpskuRegion             *string `protobuf:"bytes,5,opt,name=mpsku_region,json=mpskuRegion" json:"mpsku_region"`
	MtskuOriginalPrice      *int64  `protobuf:"varint,6,opt,name=mtsku_original_price,json=mtskuOriginalPrice" json:"mtsku_original_price"`
	GlobalDiscountInputType *uint32 `protobuf:"varint,7,opt,name=global_discount_input_type,json=globalDiscountInputType" json:"global_discount_input_type"`
	GlobalDiscountQueryData *int64  `protobuf:"varint,8,opt,name=global_discount_query_data,json=globalDiscountQueryData" json:"global_discount_query_data"`
	XXX_unrecognized        []byte  `json:"-"`
}

func (m *GlobalDiscountQueryId) Reset()         { *m = GlobalDiscountQueryId{} }
func (m *GlobalDiscountQueryId) String() string { return proto.CompactTextString(m) }
func (*GlobalDiscountQueryId) ProtoMessage()    {}
func (*GlobalDiscountQueryId) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{2}
}

func (m *GlobalDiscountQueryId) GetMerchantId() uint64 {
	if m != nil && m.MerchantId != nil {
		return *m.MerchantId
	}
	return 0
}

func (m *GlobalDiscountQueryId) GetMpskuShopId() uint64 {
	if m != nil && m.MpskuShopId != nil {
		return *m.MpskuShopId
	}
	return 0
}

func (m *GlobalDiscountQueryId) GetMpskuItemId() uint64 {
	if m != nil && m.MpskuItemId != nil {
		return *m.MpskuItemId
	}
	return 0
}

func (m *GlobalDiscountQueryId) GetMpskuModelId() uint64 {
	if m != nil && m.MpskuModelId != nil {
		return *m.MpskuModelId
	}
	return 0
}

func (m *GlobalDiscountQueryId) GetMpskuRegion() string {
	if m != nil && m.MpskuRegion != nil {
		return *m.MpskuRegion
	}
	return ""
}

func (m *GlobalDiscountQueryId) GetMtskuOriginalPrice() int64 {
	if m != nil && m.MtskuOriginalPrice != nil {
		return *m.MtskuOriginalPrice
	}
	return 0
}

func (m *GlobalDiscountQueryId) GetGlobalDiscountInputType() uint32 {
	if m != nil && m.GlobalDiscountInputType != nil {
		return *m.GlobalDiscountInputType
	}
	return 0
}

func (m *GlobalDiscountQueryId) GetGlobalDiscountQueryData() int64 {
	if m != nil && m.GlobalDiscountQueryData != nil {
		return *m.GlobalDiscountQueryData
	}
	return 0
}

type CalcGlobalDiscountInfoByItemIdsResponse struct {
	DebugMsg               *string               `protobuf:"bytes,1,opt,name=debug_msg,json=debugMsg" json:"debug_msg"`
	GlobalDiscountInfoList []*GlobalDiscountInfo `protobuf:"bytes,2,rep,name=global_discount_info_list,json=globalDiscountInfoList" json:"global_discount_info_list"`
	XXX_unrecognized       []byte                `json:"-"`
}

func (m *CalcGlobalDiscountInfoByItemIdsResponse) Reset() {
	*m = CalcGlobalDiscountInfoByItemIdsResponse{}
}
func (m *CalcGlobalDiscountInfoByItemIdsResponse) String() string { return proto.CompactTextString(m) }
func (*CalcGlobalDiscountInfoByItemIdsResponse) ProtoMessage()    {}
func (*CalcGlobalDiscountInfoByItemIdsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{3}
}

func (m *CalcGlobalDiscountInfoByItemIdsResponse) GetDebugMsg() string {
	if m != nil && m.DebugMsg != nil {
		return *m.DebugMsg
	}
	return ""
}

func (m *CalcGlobalDiscountInfoByItemIdsResponse) GetGlobalDiscountInfoList() []*GlobalDiscountInfo {
	if m != nil {
		return m.GlobalDiscountInfoList
	}
	return nil
}

type GlobalDiscountInfo struct {
	ErrCode                   *uint32 `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code"`
	ErrMsg                    *string `protobuf:"bytes,2,opt,name=err_msg,json=errMsg" json:"err_msg"`
	MerchantId                *uint64 `protobuf:"varint,3,opt,name=merchant_id,json=merchantId" json:"merchant_id"`
	MpskuShopId               *uint64 `protobuf:"varint,4,opt,name=mpsku_shop_id,json=mpskuShopId" json:"mpsku_shop_id"`
	MpskuItemId               *uint64 `protobuf:"varint,5,opt,name=mpsku_item_id,json=mpskuItemId" json:"mpsku_item_id"`
	MpskuModelId              *uint64 `protobuf:"varint,6,opt,name=mpsku_model_id,json=mpskuModelId" json:"mpsku_model_id"`
	MpskuRegion               *string `protobuf:"bytes,7,opt,name=mpsku_region,json=mpskuRegion" json:"mpsku_region"`
	MtskuOriginalPrice        *int64  `protobuf:"varint,8,opt,name=mtsku_original_price,json=mtskuOriginalPrice" json:"mtsku_original_price"`
	GlobalDiscountInputType   *uint32 `protobuf:"varint,9,opt,name=global_discount_input_type,json=globalDiscountInputType" json:"global_discount_input_type"`
	GlobalDiscountQueryData   *int64  `protobuf:"varint,10,opt,name=global_discount_query_data,json=globalDiscountQueryData" json:"global_discount_query_data"`
	GlobalDiscountQueryResult *int64  `protobuf:"varint,11,opt,name=global_discount_query_result,json=globalDiscountQueryResult" json:"global_discount_query_result"`
	XXX_unrecognized          []byte  `json:"-"`
}

func (m *GlobalDiscountInfo) Reset()         { *m = GlobalDiscountInfo{} }
func (m *GlobalDiscountInfo) String() string { return proto.CompactTextString(m) }
func (*GlobalDiscountInfo) ProtoMessage()    {}
func (*GlobalDiscountInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{4}
}

func (m *GlobalDiscountInfo) GetErrCode() uint32 {
	if m != nil && m.ErrCode != nil {
		return *m.ErrCode
	}
	return 0
}

func (m *GlobalDiscountInfo) GetErrMsg() string {
	if m != nil && m.ErrMsg != nil {
		return *m.ErrMsg
	}
	return ""
}

func (m *GlobalDiscountInfo) GetMerchantId() uint64 {
	if m != nil && m.MerchantId != nil {
		return *m.MerchantId
	}
	return 0
}

func (m *GlobalDiscountInfo) GetMpskuShopId() uint64 {
	if m != nil && m.MpskuShopId != nil {
		return *m.MpskuShopId
	}
	return 0
}

func (m *GlobalDiscountInfo) GetMpskuItemId() uint64 {
	if m != nil && m.MpskuItemId != nil {
		return *m.MpskuItemId
	}
	return 0
}

func (m *GlobalDiscountInfo) GetMpskuModelId() uint64 {
	if m != nil && m.MpskuModelId != nil {
		return *m.MpskuModelId
	}
	return 0
}

func (m *GlobalDiscountInfo) GetMpskuRegion() string {
	if m != nil && m.MpskuRegion != nil {
		return *m.MpskuRegion
	}
	return ""
}

func (m *GlobalDiscountInfo) GetMtskuOriginalPrice() int64 {
	if m != nil && m.MtskuOriginalPrice != nil {
		return *m.MtskuOriginalPrice
	}
	return 0
}

func (m *GlobalDiscountInfo) GetGlobalDiscountInputType() uint32 {
	if m != nil && m.GlobalDiscountInputType != nil {
		return *m.GlobalDiscountInputType
	}
	return 0
}

func (m *GlobalDiscountInfo) GetGlobalDiscountQueryData() int64 {
	if m != nil && m.GlobalDiscountQueryData != nil {
		return *m.GlobalDiscountQueryData
	}
	return 0
}

func (m *GlobalDiscountInfo) GetGlobalDiscountQueryResult() int64 {
	if m != nil && m.GlobalDiscountQueryResult != nil {
		return *m.GlobalDiscountQueryResult
	}
	return 0
}

type ItemModelId struct {
	ItemId           *uint64 `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id"`
	ModelId          *uint64 `protobuf:"varint,2,opt,name=model_id,json=modelId" json:"model_id"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ItemModelId) Reset()         { *m = ItemModelId{} }
func (m *ItemModelId) String() string { return proto.CompactTextString(m) }
func (*ItemModelId) ProtoMessage()    {}
func (*ItemModelId) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{5}
}

func (m *ItemModelId) GetItemId() uint64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *ItemModelId) GetModelId() uint64 {
	if m != nil && m.ModelId != nil {
		return *m.ModelId
	}
	return 0
}

type CalcLocalSipOverseaDiscountPriceRequest struct {
	AffiItemModelIds []*ItemModelId `protobuf:"bytes,1,rep,name=affi_item_model_ids,json=affiItemModelIds" json:"affi_item_model_ids"`
	AffiShopId       *int64         `protobuf:"varint,2,opt,name=affi_shop_id,json=affiShopId" json:"affi_shop_id"`
	AffiRegion       *string        `protobuf:"bytes,3,opt,name=affi_region,json=affiRegion" json:"affi_region"`
	// 100,000 -> 100% , discount_rate must be no larger than 100,000. if larger than 100,000 then return error_param
	DiscountRate     *int64 `protobuf:"varint,4,opt,name=discount_rate,json=discountRate" json:"discount_rate"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CalcLocalSipOverseaDiscountPriceRequest) Reset() {
	*m = CalcLocalSipOverseaDiscountPriceRequest{}
}
func (m *CalcLocalSipOverseaDiscountPriceRequest) String() string { return proto.CompactTextString(m) }
func (*CalcLocalSipOverseaDiscountPriceRequest) ProtoMessage()    {}
func (*CalcLocalSipOverseaDiscountPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{6}
}

func (m *CalcLocalSipOverseaDiscountPriceRequest) GetAffiItemModelIds() []*ItemModelId {
	if m != nil {
		return m.AffiItemModelIds
	}
	return nil
}

func (m *CalcLocalSipOverseaDiscountPriceRequest) GetAffiShopId() int64 {
	if m != nil && m.AffiShopId != nil {
		return *m.AffiShopId
	}
	return 0
}

func (m *CalcLocalSipOverseaDiscountPriceRequest) GetAffiRegion() string {
	if m != nil && m.AffiRegion != nil {
		return *m.AffiRegion
	}
	return ""
}

func (m *CalcLocalSipOverseaDiscountPriceRequest) GetDiscountRate() int64 {
	if m != nil && m.DiscountRate != nil {
		return *m.DiscountRate
	}
	return 0
}

type CalcLocalSipOverseaDiscountPriceResponse struct {
	Results []*LocalSIPAffiPriceResult `protobuf:"bytes,1,rep,name=results" json:"results"`
	// found, then return result.affi_price=-1 with detailed error_detail
	DebugMsg         *string `protobuf:"bytes,2,opt,name=debug_msg,json=debugMsg" json:"debug_msg"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CalcLocalSipOverseaDiscountPriceResponse) Reset() {
	*m = CalcLocalSipOverseaDiscountPriceResponse{}
}
func (m *CalcLocalSipOverseaDiscountPriceResponse) String() string { return proto.CompactTextString(m) }
func (*CalcLocalSipOverseaDiscountPriceResponse) ProtoMessage()    {}
func (*CalcLocalSipOverseaDiscountPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{7}
}

func (m *CalcLocalSipOverseaDiscountPriceResponse) GetResults() []*LocalSIPAffiPriceResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *CalcLocalSipOverseaDiscountPriceResponse) GetDebugMsg() string {
	if m != nil && m.DebugMsg != nil {
		return *m.DebugMsg
	}
	return ""
}

type LocalSIPAffiPriceResult struct {
	AffiPrice        *int64  `protobuf:"varint,1,opt,name=affi_price,json=affiPrice" json:"affi_price"`
	ErrorDetail      *string `protobuf:"bytes,2,opt,name=error_detail,json=errorDetail" json:"error_detail"`
	CalcErr          *uint32 `protobuf:"varint,3,opt,name=calc_err,json=calcErr" json:"calc_err"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LocalSIPAffiPriceResult) Reset()         { *m = LocalSIPAffiPriceResult{} }
func (m *LocalSIPAffiPriceResult) String() string { return proto.CompactTextString(m) }
func (*LocalSIPAffiPriceResult) ProtoMessage()    {}
func (*LocalSIPAffiPriceResult) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{8}
}

func (m *LocalSIPAffiPriceResult) GetAffiPrice() int64 {
	if m != nil && m.AffiPrice != nil {
		return *m.AffiPrice
	}
	return 0
}

func (m *LocalSIPAffiPriceResult) GetErrorDetail() string {
	if m != nil && m.ErrorDetail != nil {
		return *m.ErrorDetail
	}
	return ""
}

func (m *LocalSIPAffiPriceResult) GetCalcErr() uint32 {
	if m != nil && m.CalcErr != nil {
		return *m.CalcErr
	}
	return 0
}

type GetCbSipAHiddenFeeConfigRequest struct {
	InfoType         *uint32 `protobuf:"varint,1,opt,name=info_type,json=infoType" json:"info_type"`
	PageIndex        *uint32 `protobuf:"varint,2,opt,name=page_index,json=pageIndex" json:"page_index"`
	PageSize         *uint32 `protobuf:"varint,3,opt,name=page_size,json=pageSize" json:"page_size"`
	RuleKey          *string `protobuf:"bytes,4,opt,name=rule_key,json=ruleKey" json:"rule_key"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetCbSipAHiddenFeeConfigRequest) Reset()         { *m = GetCbSipAHiddenFeeConfigRequest{} }
func (m *GetCbSipAHiddenFeeConfigRequest) String() string { return proto.CompactTextString(m) }
func (*GetCbSipAHiddenFeeConfigRequest) ProtoMessage()    {}
func (*GetCbSipAHiddenFeeConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{9}
}

func (m *GetCbSipAHiddenFeeConfigRequest) GetInfoType() uint32 {
	if m != nil && m.InfoType != nil {
		return *m.InfoType
	}
	return 0
}

func (m *GetCbSipAHiddenFeeConfigRequest) GetPageIndex() uint32 {
	if m != nil && m.PageIndex != nil {
		return *m.PageIndex
	}
	return 0
}

func (m *GetCbSipAHiddenFeeConfigRequest) GetPageSize() uint32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *GetCbSipAHiddenFeeConfigRequest) GetRuleKey() string {
	if m != nil && m.RuleKey != nil {
		return *m.RuleKey
	}
	return ""
}

type GetCbSipAHiddenFeeConfigResponse struct {
	DebugMsg              *string               `protobuf:"bytes,1,opt,name=debug_msg,json=debugMsg" json:"debug_msg"`
	Total                 *uint32               `protobuf:"varint,2,opt,name=total" json:"total"`
	Rules                 []*AHiddenFeeRuleInfo `protobuf:"bytes,3,rep,name=rules" json:"rules"`
	RuleRegionSettingsStr *string               `protobuf:"bytes,4,opt,name=rule_region_settings_str,json=ruleRegionSettingsStr" json:"rule_region_settings_str"`
	XXX_unrecognized      []byte                `json:"-"`
}

func (m *GetCbSipAHiddenFeeConfigResponse) Reset()         { *m = GetCbSipAHiddenFeeConfigResponse{} }
func (m *GetCbSipAHiddenFeeConfigResponse) String() string { return proto.CompactTextString(m) }
func (*GetCbSipAHiddenFeeConfigResponse) ProtoMessage()    {}
func (*GetCbSipAHiddenFeeConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{10}
}

func (m *GetCbSipAHiddenFeeConfigResponse) GetDebugMsg() string {
	if m != nil && m.DebugMsg != nil {
		return *m.DebugMsg
	}
	return ""
}

func (m *GetCbSipAHiddenFeeConfigResponse) GetTotal() uint32 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *GetCbSipAHiddenFeeConfigResponse) GetRules() []*AHiddenFeeRuleInfo {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *GetCbSipAHiddenFeeConfigResponse) GetRuleRegionSettingsStr() string {
	if m != nil && m.RuleRegionSettingsStr != nil {
		return *m.RuleRegionSettingsStr
	}
	return ""
}

type AHiddenFeeRuleInfo struct {
	RuleKey          *string              `protobuf:"bytes,1,opt,name=rule_key,json=ruleKey" json:"rule_key"`
	DescInfo         *string              `protobuf:"bytes,2,opt,name=desc_info,json=descInfo" json:"desc_info"`
	Details          []*AHiddenFeeRuleRow `protobuf:"bytes,3,rep,name=details" json:"details"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *AHiddenFeeRuleInfo) Reset()         { *m = AHiddenFeeRuleInfo{} }
func (m *AHiddenFeeRuleInfo) String() string { return proto.CompactTextString(m) }
func (*AHiddenFeeRuleInfo) ProtoMessage()    {}
func (*AHiddenFeeRuleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{11}
}

func (m *AHiddenFeeRuleInfo) GetRuleKey() string {
	if m != nil && m.RuleKey != nil {
		return *m.RuleKey
	}
	return ""
}

func (m *AHiddenFeeRuleInfo) GetDescInfo() string {
	if m != nil && m.DescInfo != nil {
		return *m.DescInfo
	}
	return ""
}

func (m *AHiddenFeeRuleInfo) GetDetails() []*AHiddenFeeRuleRow {
	if m != nil {
		return m.Details
	}
	return nil
}

type AHiddenFeeRuleRow struct {
	WeightRange      *int64  `protobuf:"varint,1,opt,name=weight_range,json=weightRange" json:"weight_range"`
	StartPrice       *int64  `protobuf:"varint,2,opt,name=start_price,json=startPrice" json:"start_price"`
	StartWeight      *int64  `protobuf:"varint,3,opt,name=start_weight,json=startWeight" json:"start_weight"`
	RoundSize        *int64  `protobuf:"varint,4,opt,name=round_size,json=roundSize" json:"round_size"`
	Price            *int64  `protobuf:"varint,5,opt,name=price" json:"price"`
	WeightStep       *int64  `protobuf:"varint,6,opt,name=weight_step,json=weightStep" json:"weight_step"`
	Adjustment       *int64  `protobuf:"varint,7,opt,name=adjustment" json:"adjustment"`
	DescInfo         *string `protobuf:"bytes,8,opt,name=desc_info,json=descInfo" json:"desc_info"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AHiddenFeeRuleRow) Reset()         { *m = AHiddenFeeRuleRow{} }
func (m *AHiddenFeeRuleRow) String() string { return proto.CompactTextString(m) }
func (*AHiddenFeeRuleRow) ProtoMessage()    {}
func (*AHiddenFeeRuleRow) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{12}
}

func (m *AHiddenFeeRuleRow) GetWeightRange() int64 {
	if m != nil && m.WeightRange != nil {
		return *m.WeightRange
	}
	return 0
}

func (m *AHiddenFeeRuleRow) GetStartPrice() int64 {
	if m != nil && m.StartPrice != nil {
		return *m.StartPrice
	}
	return 0
}

func (m *AHiddenFeeRuleRow) GetStartWeight() int64 {
	if m != nil && m.StartWeight != nil {
		return *m.StartWeight
	}
	return 0
}

func (m *AHiddenFeeRuleRow) GetRoundSize() int64 {
	if m != nil && m.RoundSize != nil {
		return *m.RoundSize
	}
	return 0
}

func (m *AHiddenFeeRuleRow) GetPrice() int64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *AHiddenFeeRuleRow) GetWeightStep() int64 {
	if m != nil && m.WeightStep != nil {
		return *m.WeightStep
	}
	return 0
}

func (m *AHiddenFeeRuleRow) GetAdjustment() int64 {
	if m != nil && m.Adjustment != nil {
		return *m.Adjustment
	}
	return 0
}

func (m *AHiddenFeeRuleRow) GetDescInfo() string {
	if m != nil && m.DescInfo != nil {
		return *m.DescInfo
	}
	return ""
}

type GetCbSipRateConfigRequest struct {
	CbSipRateInfoType *uint32 `protobuf:"varint,1,opt,name=cb_sip_rate_info_type,json=cbSipRateInfoType" json:"cb_sip_rate_info_type"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *GetCbSipRateConfigRequest) Reset()         { *m = GetCbSipRateConfigRequest{} }
func (m *GetCbSipRateConfigRequest) String() string { return proto.CompactTextString(m) }
func (*GetCbSipRateConfigRequest) ProtoMessage()    {}
func (*GetCbSipRateConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{13}
}

func (m *GetCbSipRateConfigRequest) GetCbSipRateInfoType() uint32 {
	if m != nil && m.CbSipRateInfoType != nil {
		return *m.CbSipRateInfoType
	}
	return 0
}

type GetCbSipRateConfigResponse struct {
	DebugMsg          *string `protobuf:"bytes,1,opt,name=debug_msg,json=debugMsg" json:"debug_msg"`
	DefaultSipRateStr *string `protobuf:"bytes,2,opt,name=default_sip_rate_str,json=defaultSipRateStr" json:"default_sip_rate_str"`
	SipRateLimitStr   *string `protobuf:"bytes,3,opt,name=sip_rate_limit_str,json=sipRateLimitStr" json:"sip_rate_limit_str"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *GetCbSipRateConfigResponse) Reset()         { *m = GetCbSipRateConfigResponse{} }
func (m *GetCbSipRateConfigResponse) String() string { return proto.CompactTextString(m) }
func (*GetCbSipRateConfigResponse) ProtoMessage()    {}
func (*GetCbSipRateConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{14}
}

func (m *GetCbSipRateConfigResponse) GetDebugMsg() string {
	if m != nil && m.DebugMsg != nil {
		return *m.DebugMsg
	}
	return ""
}

func (m *GetCbSipRateConfigResponse) GetDefaultSipRateStr() string {
	if m != nil && m.DefaultSipRateStr != nil {
		return *m.DefaultSipRateStr
	}
	return ""
}

func (m *GetCbSipRateConfigResponse) GetSipRateLimitStr() string {
	if m != nil && m.SipRateLimitStr != nil {
		return *m.SipRateLimitStr
	}
	return ""
}

type GetCbSipShopLevelConfigRequest struct {
	PShopId          *uint64 `protobuf:"varint,1,opt,name=p_shop_id,json=pShopId" json:"p_shop_id"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetCbSipShopLevelConfigRequest) Reset()         { *m = GetCbSipShopLevelConfigRequest{} }
func (m *GetCbSipShopLevelConfigRequest) String() string { return proto.CompactTextString(m) }
func (*GetCbSipShopLevelConfigRequest) ProtoMessage()    {}
func (*GetCbSipShopLevelConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{15}
}

func (m *GetCbSipShopLevelConfigRequest) GetPShopId() uint64 {
	if m != nil && m.PShopId != nil {
		return *m.PShopId
	}
	return 0
}

type GetCbSipShopLevelConfigResponse struct {
	DebugMsg *string `protobuf:"bytes,1,opt,name=debug_msg,json=debugMsg" json:"debug_msg"`
	// only return existing configs
	AShopConfigList  []*CbSipAffiShopInfo `protobuf:"bytes,2,rep,name=a_shop_config_list,json=aShopConfigList" json:"a_shop_config_list"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *GetCbSipShopLevelConfigResponse) Reset()         { *m = GetCbSipShopLevelConfigResponse{} }
func (m *GetCbSipShopLevelConfigResponse) String() string { return proto.CompactTextString(m) }
func (*GetCbSipShopLevelConfigResponse) ProtoMessage()    {}
func (*GetCbSipShopLevelConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{16}
}

func (m *GetCbSipShopLevelConfigResponse) GetDebugMsg() string {
	if m != nil && m.DebugMsg != nil {
		return *m.DebugMsg
	}
	return ""
}

func (m *GetCbSipShopLevelConfigResponse) GetAShopConfigList() []*CbSipAffiShopInfo {
	if m != nil {
		return m.AShopConfigList
	}
	return nil
}

type CbSipAffiShopInfo struct {
	AShopId          *uint64  `protobuf:"varint,1,opt,name=a_shop_id,json=aShopId" json:"a_shop_id"`
	SipRate          *float64 `protobuf:"fixed64,2,opt,name=sip_rate,json=sipRate" json:"sip_rate"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CbSipAffiShopInfo) Reset()         { *m = CbSipAffiShopInfo{} }
func (m *CbSipAffiShopInfo) String() string { return proto.CompactTextString(m) }
func (*CbSipAffiShopInfo) ProtoMessage()    {}
func (*CbSipAffiShopInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{17}
}

func (m *CbSipAffiShopInfo) GetAShopId() uint64 {
	if m != nil && m.AShopId != nil {
		return *m.AShopId
	}
	return 0
}

func (m *CbSipAffiShopInfo) GetSipRate() float64 {
	if m != nil && m.SipRate != nil {
		return *m.SipRate
	}
	return 0
}

type GetCbSipRegionLevelConfigRequest struct {
	RegionPairList   []*RegionPair `protobuf:"bytes,1,rep,name=region_pair_list,json=regionPairList" json:"region_pair_list"`
	InfoType         *uint32       `protobuf:"varint,2,opt,name=info_type,json=infoType" json:"info_type"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *GetCbSipRegionLevelConfigRequest) Reset()         { *m = GetCbSipRegionLevelConfigRequest{} }
func (m *GetCbSipRegionLevelConfigRequest) String() string { return proto.CompactTextString(m) }
func (*GetCbSipRegionLevelConfigRequest) ProtoMessage()    {}
func (*GetCbSipRegionLevelConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{18}
}

func (m *GetCbSipRegionLevelConfigRequest) GetRegionPairList() []*RegionPair {
	if m != nil {
		return m.RegionPairList
	}
	return nil
}

func (m *GetCbSipRegionLevelConfigRequest) GetInfoType() uint32 {
	if m != nil && m.InfoType != nil {
		return *m.InfoType
	}
	return 0
}

type GetCbSipRegionLevelConfigResponse struct {
	DebugMsg            *string                              `protobuf:"bytes,1,opt,name=debug_msg,json=debugMsg" json:"debug_msg"`
	ExchangeRateConfig  *CbSipRegionLevelExchangeRateConfig  `protobuf:"bytes,2,opt,name=exchange_rate_config,json=exchangeRateConfig" json:"exchange_rate_config"`
	CountryMarginConfig *CbSipRegionLevelCountryMarginConfig `protobuf:"bytes,3,opt,name=country_margin_config,json=countryMarginConfig" json:"country_margin_config"`
	XXX_unrecognized    []byte                               `json:"-"`
}

func (m *GetCbSipRegionLevelConfigResponse) Reset()         { *m = GetCbSipRegionLevelConfigResponse{} }
func (m *GetCbSipRegionLevelConfigResponse) String() string { return proto.CompactTextString(m) }
func (*GetCbSipRegionLevelConfigResponse) ProtoMessage()    {}
func (*GetCbSipRegionLevelConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{19}
}

func (m *GetCbSipRegionLevelConfigResponse) GetDebugMsg() string {
	if m != nil && m.DebugMsg != nil {
		return *m.DebugMsg
	}
	return ""
}

func (m *GetCbSipRegionLevelConfigResponse) GetExchangeRateConfig() *CbSipRegionLevelExchangeRateConfig {
	if m != nil {
		return m.ExchangeRateConfig
	}
	return nil
}

func (m *GetCbSipRegionLevelConfigResponse) GetCountryMarginConfig() *CbSipRegionLevelCountryMarginConfig {
	if m != nil {
		return m.CountryMarginConfig
	}
	return nil
}

type CbSipRegionLevelExchangeRateConfig struct {
	ExchangeRateList []*ExchangeRateData `protobuf:"bytes,2,rep,name=exchange_rate_list,json=exchangeRateList" json:"exchange_rate_list"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *CbSipRegionLevelExchangeRateConfig) Reset()         { *m = CbSipRegionLevelExchangeRateConfig{} }
func (m *CbSipRegionLevelExchangeRateConfig) String() string { return proto.CompactTextString(m) }
func (*CbSipRegionLevelExchangeRateConfig) ProtoMessage()    {}
func (*CbSipRegionLevelExchangeRateConfig) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{20}
}

func (m *CbSipRegionLevelExchangeRateConfig) GetExchangeRateList() []*ExchangeRateData {
	if m != nil {
		return m.ExchangeRateList
	}
	return nil
}

type ExchangeRateData struct {
	SrcCurrency      *string `protobuf:"bytes,1,opt,name=src_currency,json=srcCurrency" json:"src_currency"`
	DstCurrency      *string `protobuf:"bytes,2,opt,name=dst_currency,json=dstCurrency" json:"dst_currency"`
	ExchangeRate     *string `protobuf:"bytes,3,opt,name=exchange_rate,json=exchangeRate" json:"exchange_rate"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ExchangeRateData) Reset()         { *m = ExchangeRateData{} }
func (m *ExchangeRateData) String() string { return proto.CompactTextString(m) }
func (*ExchangeRateData) ProtoMessage()    {}
func (*ExchangeRateData) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{21}
}

func (m *ExchangeRateData) GetSrcCurrency() string {
	if m != nil && m.SrcCurrency != nil {
		return *m.SrcCurrency
	}
	return ""
}

func (m *ExchangeRateData) GetDstCurrency() string {
	if m != nil && m.DstCurrency != nil {
		return *m.DstCurrency
	}
	return ""
}

func (m *ExchangeRateData) GetExchangeRate() string {
	if m != nil && m.ExchangeRate != nil {
		return *m.ExchangeRate
	}
	return ""
}

type CbSipRegionLevelCountryMarginConfig struct {
	CountryMarginList []*CountryMarginData `protobuf:"bytes,3,rep,name=country_margin_list,json=countryMarginList" json:"country_margin_list"`
	XXX_unrecognized  []byte               `json:"-"`
}

func (m *CbSipRegionLevelCountryMarginConfig) Reset()         { *m = CbSipRegionLevelCountryMarginConfig{} }
func (m *CbSipRegionLevelCountryMarginConfig) String() string { return proto.CompactTextString(m) }
func (*CbSipRegionLevelCountryMarginConfig) ProtoMessage()    {}
func (*CbSipRegionLevelCountryMarginConfig) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{22}
}

func (m *CbSipRegionLevelCountryMarginConfig) GetCountryMarginList() []*CountryMarginData {
	if m != nil {
		return m.CountryMarginList
	}
	return nil
}

type CountryMarginData struct {
	SrcRegion        *string  `protobuf:"bytes,1,opt,name=src_region,json=srcRegion" json:"src_region"`
	DstRegion        *string  `protobuf:"bytes,2,opt,name=dst_region,json=dstRegion" json:"dst_region"`
	CountryMargin    *float64 `protobuf:"fixed64,3,opt,name=country_margin,json=countryMargin" json:"country_margin"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CountryMarginData) Reset()         { *m = CountryMarginData{} }
func (m *CountryMarginData) String() string { return proto.CompactTextString(m) }
func (*CountryMarginData) ProtoMessage()    {}
func (*CountryMarginData) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{23}
}

func (m *CountryMarginData) GetSrcRegion() string {
	if m != nil && m.SrcRegion != nil {
		return *m.SrcRegion
	}
	return ""
}

func (m *CountryMarginData) GetDstRegion() string {
	if m != nil && m.DstRegion != nil {
		return *m.DstRegion
	}
	return ""
}

func (m *CountryMarginData) GetCountryMargin() float64 {
	if m != nil && m.CountryMargin != nil {
		return *m.CountryMargin
	}
	return 0
}

type GetLocalSipPriceFactorRequest struct {
	RegionPairList   []*RegionPair `protobuf:"bytes,1,rep,name=region_pair_list,json=regionPairList" json:"region_pair_list"`
	InfoType         *uint32       `protobuf:"varint,2,opt,name=info_type,json=infoType" json:"info_type"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *GetLocalSipPriceFactorRequest) Reset()         { *m = GetLocalSipPriceFactorRequest{} }
func (m *GetLocalSipPriceFactorRequest) String() string { return proto.CompactTextString(m) }
func (*GetLocalSipPriceFactorRequest) ProtoMessage()    {}
func (*GetLocalSipPriceFactorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{24}
}

func (m *GetLocalSipPriceFactorRequest) GetRegionPairList() []*RegionPair {
	if m != nil {
		return m.RegionPairList
	}
	return nil
}

func (m *GetLocalSipPriceFactorRequest) GetInfoType() uint32 {
	if m != nil && m.InfoType != nil {
		return *m.InfoType
	}
	return 0
}

type RegionPair struct {
	SrcRegion        *string `protobuf:"bytes,1,opt,name=src_region,json=srcRegion" json:"src_region"`
	DstRegion        *string `protobuf:"bytes,2,opt,name=dst_region,json=dstRegion" json:"dst_region"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RegionPair) Reset()         { *m = RegionPair{} }
func (m *RegionPair) String() string { return proto.CompactTextString(m) }
func (*RegionPair) ProtoMessage()    {}
func (*RegionPair) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{25}
}

func (m *RegionPair) GetSrcRegion() string {
	if m != nil && m.SrcRegion != nil {
		return *m.SrcRegion
	}
	return ""
}

func (m *RegionPair) GetDstRegion() string {
	if m != nil && m.DstRegion != nil {
		return *m.DstRegion
	}
	return ""
}

type GetLocalSipPriceFactorResponse struct {
	DebugMsg         *string                    `protobuf:"bytes,1,opt,name=debug_msg,json=debugMsg" json:"debug_msg"`
	Results          []*LocalSipPriceFactorInfo `protobuf:"bytes,2,rep,name=results" json:"results"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *GetLocalSipPriceFactorResponse) Reset()         { *m = GetLocalSipPriceFactorResponse{} }
func (m *GetLocalSipPriceFactorResponse) String() string { return proto.CompactTextString(m) }
func (*GetLocalSipPriceFactorResponse) ProtoMessage()    {}
func (*GetLocalSipPriceFactorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{26}
}

func (m *GetLocalSipPriceFactorResponse) GetDebugMsg() string {
	if m != nil && m.DebugMsg != nil {
		return *m.DebugMsg
	}
	return ""
}

func (m *GetLocalSipPriceFactorResponse) GetResults() []*LocalSipPriceFactorInfo {
	if m != nil {
		return m.Results
	}
	return nil
}

type LocalSipPriceFactorInfo struct {
	// for BASIC_INFO
	BasicInfo *LocalSipPriceFactorBasicInfo `protobuf:"bytes,1,opt,name=basic_info,json=basicInfo" json:"basic_info"`
	// for Hidden_Fee
	HiddenFeeInfo *LocalSipPriceFactorHiddenFeeInfo `protobuf:"bytes,2,opt,name=hidden_fee_info,json=hiddenFeeInfo" json:"hidden_fee_info"`
	// for Shipping_Fee
	ShippingFeeInfo  *LocalSipPriceFactorShippingFeeInfo `protobuf:"bytes,3,opt,name=shipping_fee_info,json=shippingFeeInfo" json:"shipping_fee_info"`
	XXX_unrecognized []byte                              `json:"-"`
}

func (m *LocalSipPriceFactorInfo) Reset()         { *m = LocalSipPriceFactorInfo{} }
func (m *LocalSipPriceFactorInfo) String() string { return proto.CompactTextString(m) }
func (*LocalSipPriceFactorInfo) ProtoMessage()    {}
func (*LocalSipPriceFactorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{27}
}

func (m *LocalSipPriceFactorInfo) GetBasicInfo() *LocalSipPriceFactorBasicInfo {
	if m != nil {
		return m.BasicInfo
	}
	return nil
}

func (m *LocalSipPriceFactorInfo) GetHiddenFeeInfo() *LocalSipPriceFactorHiddenFeeInfo {
	if m != nil {
		return m.HiddenFeeInfo
	}
	return nil
}

func (m *LocalSipPriceFactorInfo) GetShippingFeeInfo() *LocalSipPriceFactorShippingFeeInfo {
	if m != nil {
		return m.ShippingFeeInfo
	}
	return nil
}

type LocalSipPriceFactorBasicInfo struct {
	CountryMargin          *float64 `protobuf:"fixed64,1,opt,name=country_margin,json=countryMargin" json:"country_margin"`
	MinCountryMargin       *float64 `protobuf:"fixed64,2,opt,name=min_country_margin,json=minCountryMargin" json:"min_country_margin"`
	MaxCountryMargin       *float64 `protobuf:"fixed64,3,opt,name=max_country_margin,json=maxCountryMargin" json:"max_country_margin"`
	ExchangeRate           *float64 `protobuf:"fixed64,4,opt,name=exchange_rate,json=exchangeRate" json:"exchange_rate"`
	MinExchangeRate        *float64 `protobuf:"fixed64,5,opt,name=min_exchange_rate,json=minExchangeRate" json:"min_exchange_rate"`
	MaxExchangeRate        *float64 `protobuf:"fixed64,6,opt,name=max_exchange_rate,json=maxExchangeRate" json:"max_exchange_rate"`
	InitialHiddenFeeToggle *int32   `protobuf:"varint,7,opt,name=initial_hidden_fee_toggle,json=initialHiddenFeeToggle" json:"initial_hidden_fee_toggle"`
	ShippingFeeToggle      *int32   `protobuf:"varint,8,opt,name=shipping_fee_toggle,json=shippingFeeToggle" json:"shipping_fee_toggle"`
	InitHiddenPrice        *float64 `protobuf:"fixed64,9,opt,name=init_hidden_price,json=initHiddenPrice" json:"init_hidden_price"`
	MinInitHiddenPrice     *float64 `protobuf:"fixed64,10,opt,name=min_init_hidden_price,json=minInitHiddenPrice" json:"min_init_hidden_price"`
	MaxInitHiddenPrice     *float64 `protobuf:"fixed64,11,opt,name=max_init_hidden_price,json=maxInitHiddenPrice" json:"max_init_hidden_price"`
	XXX_unrecognized       []byte   `json:"-"`
}

func (m *LocalSipPriceFactorBasicInfo) Reset()         { *m = LocalSipPriceFactorBasicInfo{} }
func (m *LocalSipPriceFactorBasicInfo) String() string { return proto.CompactTextString(m) }
func (*LocalSipPriceFactorBasicInfo) ProtoMessage()    {}
func (*LocalSipPriceFactorBasicInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{28}
}

func (m *LocalSipPriceFactorBasicInfo) GetCountryMargin() float64 {
	if m != nil && m.CountryMargin != nil {
		return *m.CountryMargin
	}
	return 0
}

func (m *LocalSipPriceFactorBasicInfo) GetMinCountryMargin() float64 {
	if m != nil && m.MinCountryMargin != nil {
		return *m.MinCountryMargin
	}
	return 0
}

func (m *LocalSipPriceFactorBasicInfo) GetMaxCountryMargin() float64 {
	if m != nil && m.MaxCountryMargin != nil {
		return *m.MaxCountryMargin
	}
	return 0
}

func (m *LocalSipPriceFactorBasicInfo) GetExchangeRate() float64 {
	if m != nil && m.ExchangeRate != nil {
		return *m.ExchangeRate
	}
	return 0
}

func (m *LocalSipPriceFactorBasicInfo) GetMinExchangeRate() float64 {
	if m != nil && m.MinExchangeRate != nil {
		return *m.MinExchangeRate
	}
	return 0
}

func (m *LocalSipPriceFactorBasicInfo) GetMaxExchangeRate() float64 {
	if m != nil && m.MaxExchangeRate != nil {
		return *m.MaxExchangeRate
	}
	return 0
}

func (m *LocalSipPriceFactorBasicInfo) GetInitialHiddenFeeToggle() int32 {
	if m != nil && m.InitialHiddenFeeToggle != nil {
		return *m.InitialHiddenFeeToggle
	}
	return 0
}

func (m *LocalSipPriceFactorBasicInfo) GetShippingFeeToggle() int32 {
	if m != nil && m.ShippingFeeToggle != nil {
		return *m.ShippingFeeToggle
	}
	return 0
}

func (m *LocalSipPriceFactorBasicInfo) GetInitHiddenPrice() float64 {
	if m != nil && m.InitHiddenPrice != nil {
		return *m.InitHiddenPrice
	}
	return 0
}

func (m *LocalSipPriceFactorBasicInfo) GetMinInitHiddenPrice() float64 {
	if m != nil && m.MinInitHiddenPrice != nil {
		return *m.MinInitHiddenPrice
	}
	return 0
}

func (m *LocalSipPriceFactorBasicInfo) GetMaxInitHiddenPrice() float64 {
	if m != nil && m.MaxInitHiddenPrice != nil {
		return *m.MaxInitHiddenPrice
	}
	return 0
}

type LocalSipPriceFactorShippingFeeInfo struct {
	LocalShippingFeeRules []*LocalShippingFeeRule `protobuf:"bytes,1,rep,name=local_shipping_fee_rules,json=localShippingFeeRules" json:"local_shipping_fee_rules"`
	XXX_unrecognized      []byte                  `json:"-"`
}

func (m *LocalSipPriceFactorShippingFeeInfo) Reset()         { *m = LocalSipPriceFactorShippingFeeInfo{} }
func (m *LocalSipPriceFactorShippingFeeInfo) String() string { return proto.CompactTextString(m) }
func (*LocalSipPriceFactorShippingFeeInfo) ProtoMessage()    {}
func (*LocalSipPriceFactorShippingFeeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{29}
}

func (m *LocalSipPriceFactorShippingFeeInfo) GetLocalShippingFeeRules() []*LocalShippingFeeRule {
	if m != nil {
		return m.LocalShippingFeeRules
	}
	return nil
}

type LocalSipPriceFactorHiddenFeeInfo struct {
	LocalHiddenFeeRules []*LocalShippingFeeRule `protobuf:"bytes,1,rep,name=local_hidden_fee_rules,json=localHiddenFeeRules" json:"local_hidden_fee_rules"`
	XXX_unrecognized    []byte                  `json:"-"`
}

func (m *LocalSipPriceFactorHiddenFeeInfo) Reset()         { *m = LocalSipPriceFactorHiddenFeeInfo{} }
func (m *LocalSipPriceFactorHiddenFeeInfo) String() string { return proto.CompactTextString(m) }
func (*LocalSipPriceFactorHiddenFeeInfo) ProtoMessage()    {}
func (*LocalSipPriceFactorHiddenFeeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{30}
}

func (m *LocalSipPriceFactorHiddenFeeInfo) GetLocalHiddenFeeRules() []*LocalShippingFeeRule {
	if m != nil {
		return m.LocalHiddenFeeRules
	}
	return nil
}

type LocalShippingFeeRule struct {
	MstRegion        *string `protobuf:"bytes,1,opt,name=mst_region,json=mstRegion" json:"mst_region"`
	AffiRegion       *string `protobuf:"bytes,2,opt,name=affi_region,json=affiRegion" json:"affi_region"`
	Weight           *int64  `protobuf:"varint,3,opt,name=weight" json:"weight"`
	Fee              *int64  `protobuf:"varint,4,opt,name=fee" json:"fee"`
	Id               *int64  `protobuf:"varint,5,opt,name=id" json:"id"`
	Ctime            *int64  `protobuf:"varint,6,opt,name=ctime" json:"ctime"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LocalShippingFeeRule) Reset()         { *m = LocalShippingFeeRule{} }
func (m *LocalShippingFeeRule) String() string { return proto.CompactTextString(m) }
func (*LocalShippingFeeRule) ProtoMessage()    {}
func (*LocalShippingFeeRule) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{31}
}

func (m *LocalShippingFeeRule) GetMstRegion() string {
	if m != nil && m.MstRegion != nil {
		return *m.MstRegion
	}
	return ""
}

func (m *LocalShippingFeeRule) GetAffiRegion() string {
	if m != nil && m.AffiRegion != nil {
		return *m.AffiRegion
	}
	return ""
}

func (m *LocalShippingFeeRule) GetWeight() int64 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return 0
}

func (m *LocalShippingFeeRule) GetFee() int64 {
	if m != nil && m.Fee != nil {
		return *m.Fee
	}
	return 0
}

func (m *LocalShippingFeeRule) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LocalShippingFeeRule) GetCtime() int64 {
	if m != nil && m.Ctime != nil {
		return *m.Ctime
	}
	return 0
}

type GetCbscPriceFactorRequest struct {
	InfoType         *uint32  `protobuf:"varint,1,opt,name=info_type,json=infoType" json:"info_type"`
	MerchantId       *uint64  `protobuf:"varint,2,opt,name=merchant_id,json=merchantId" json:"merchant_id"`
	MainAccountId    *uint64  `protobuf:"varint,3,opt,name=main_account_id,json=mainAccountId" json:"main_account_id"`
	ShopIdList       []uint64 `protobuf:"varint,4,rep,name=shop_id_list,json=shopIdList" json:"shop_id_list"`
	ShopRegion       *string  `protobuf:"bytes,5,opt,name=shop_region,json=shopRegion" json:"shop_region"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *GetCbscPriceFactorRequest) Reset()         { *m = GetCbscPriceFactorRequest{} }
func (m *GetCbscPriceFactorRequest) String() string { return proto.CompactTextString(m) }
func (*GetCbscPriceFactorRequest) ProtoMessage()    {}
func (*GetCbscPriceFactorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{32}
}

func (m *GetCbscPriceFactorRequest) GetInfoType() uint32 {
	if m != nil && m.InfoType != nil {
		return *m.InfoType
	}
	return 0
}

func (m *GetCbscPriceFactorRequest) GetMerchantId() uint64 {
	if m != nil && m.MerchantId != nil {
		return *m.MerchantId
	}
	return 0
}

func (m *GetCbscPriceFactorRequest) GetMainAccountId() uint64 {
	if m != nil && m.MainAccountId != nil {
		return *m.MainAccountId
	}
	return 0
}

func (m *GetCbscPriceFactorRequest) GetShopIdList() []uint64 {
	if m != nil {
		return m.ShopIdList
	}
	return nil
}

func (m *GetCbscPriceFactorRequest) GetShopRegion() string {
	if m != nil && m.ShopRegion != nil {
		return *m.ShopRegion
	}
	return ""
}

type GetCbscPriceFactorResponse struct {
	DebugMsg         *string          `protobuf:"bytes,1,opt,name=debug_msg,json=debugMsg" json:"debug_msg"`
	Results          *CbscPriceFactor `protobuf:"bytes,2,opt,name=results" json:"results"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *GetCbscPriceFactorResponse) Reset()         { *m = GetCbscPriceFactorResponse{} }
func (m *GetCbscPriceFactorResponse) String() string { return proto.CompactTextString(m) }
func (*GetCbscPriceFactorResponse) ProtoMessage()    {}
func (*GetCbscPriceFactorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{33}
}

func (m *GetCbscPriceFactorResponse) GetDebugMsg() string {
	if m != nil && m.DebugMsg != nil {
		return *m.DebugMsg
	}
	return ""
}

func (m *GetCbscPriceFactorResponse) GetResults() *CbscPriceFactor {
	if m != nil {
		return m.Results
	}
	return nil
}

type CbscPriceFactor struct {
	ShopFeeRateList  []*CbscShopLevelFeeRate `protobuf:"bytes,1,rep,name=shop_fee_rate_list,json=shopFeeRateList" json:"shop_fee_rate_list"`
	FeeRateLimit     *CbscFeeRateLimit       `protobuf:"bytes,2,opt,name=fee_rate_limit,json=feeRateLimit" json:"fee_rate_limit"`
	ExchangeRateList []*CbscExchangeRate     `protobuf:"bytes,3,rep,name=exchange_rate_list,json=exchangeRateList" json:"exchange_rate_list"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *CbscPriceFactor) Reset()         { *m = CbscPriceFactor{} }
func (m *CbscPriceFactor) String() string { return proto.CompactTextString(m) }
func (*CbscPriceFactor) ProtoMessage()    {}
func (*CbscPriceFactor) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{34}
}

func (m *CbscPriceFactor) GetShopFeeRateList() []*CbscShopLevelFeeRate {
	if m != nil {
		return m.ShopFeeRateList
	}
	return nil
}

func (m *CbscPriceFactor) GetFeeRateLimit() *CbscFeeRateLimit {
	if m != nil {
		return m.FeeRateLimit
	}
	return nil
}

func (m *CbscPriceFactor) GetExchangeRateList() []*CbscExchangeRate {
	if m != nil {
		return m.ExchangeRateList
	}
	return nil
}

type CbscShopLevelFeeRate struct {
	ShopId                  *int64 `protobuf:"varint,1,opt,name=shop_id,json=shopId" json:"shop_id"`
	TransactionFeeRate      *int64 `protobuf:"varint,2,opt,name=transaction_fee_rate,json=transactionFeeRate" json:"transaction_fee_rate"`
	ProfitRate              *int64 `protobuf:"varint,3,opt,name=profit_rate,json=profitRate" json:"profit_rate"`
	ProfitRateStatus        *int32 `protobuf:"varint,4,opt,name=profit_rate_status,json=profitRateStatus" json:"profit_rate_status"`
	ServiceFeeRate          *int64 `protobuf:"varint,5,opt,name=service_fee_rate,json=serviceFeeRate" json:"service_fee_rate"`
	ServiceFeeRateStatus    *int32 `protobuf:"varint,6,opt,name=service_fee_rate_status,json=serviceFeeRateStatus" json:"service_fee_rate_status"`
	CommissionRate          *int64 `protobuf:"varint,7,opt,name=commission_rate,json=commissionRate" json:"commission_rate"`
	ReferenceServiceFeeRate *int64 `protobuf:"varint,8,opt,name=reference_service_fee_rate,json=referenceServiceFeeRate" json:"reference_service_fee_rate"`
	XXX_unrecognized        []byte `json:"-"`
}

func (m *CbscShopLevelFeeRate) Reset()         { *m = CbscShopLevelFeeRate{} }
func (m *CbscShopLevelFeeRate) String() string { return proto.CompactTextString(m) }
func (*CbscShopLevelFeeRate) ProtoMessage()    {}
func (*CbscShopLevelFeeRate) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{35}
}

func (m *CbscShopLevelFeeRate) GetShopId() int64 {
	if m != nil && m.ShopId != nil {
		return *m.ShopId
	}
	return 0
}

func (m *CbscShopLevelFeeRate) GetTransactionFeeRate() int64 {
	if m != nil && m.TransactionFeeRate != nil {
		return *m.TransactionFeeRate
	}
	return 0
}

func (m *CbscShopLevelFeeRate) GetProfitRate() int64 {
	if m != nil && m.ProfitRate != nil {
		return *m.ProfitRate
	}
	return 0
}

func (m *CbscShopLevelFeeRate) GetProfitRateStatus() int32 {
	if m != nil && m.ProfitRateStatus != nil {
		return *m.ProfitRateStatus
	}
	return 0
}

func (m *CbscShopLevelFeeRate) GetServiceFeeRate() int64 {
	if m != nil && m.ServiceFeeRate != nil {
		return *m.ServiceFeeRate
	}
	return 0
}

func (m *CbscShopLevelFeeRate) GetServiceFeeRateStatus() int32 {
	if m != nil && m.ServiceFeeRateStatus != nil {
		return *m.ServiceFeeRateStatus
	}
	return 0
}

func (m *CbscShopLevelFeeRate) GetCommissionRate() int64 {
	if m != nil && m.CommissionRate != nil {
		return *m.CommissionRate
	}
	return 0
}

func (m *CbscShopLevelFeeRate) GetReferenceServiceFeeRate() int64 {
	if m != nil && m.ReferenceServiceFeeRate != nil {
		return *m.ReferenceServiceFeeRate
	}
	return 0
}

type CbscFeeRateLimit struct {
	ServiceFeeLimit  *CbscServiceFeeRateLimit `protobuf:"bytes,1,opt,name=service_fee_limit,json=serviceFeeLimit" json:"service_fee_limit"`
	ProfitRateLimit  []*CbscProfitRateLimit   `protobuf:"bytes,2,rep,name=profit_rate_limit,json=profitRateLimit" json:"profit_rate_limit"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *CbscFeeRateLimit) Reset()         { *m = CbscFeeRateLimit{} }
func (m *CbscFeeRateLimit) String() string { return proto.CompactTextString(m) }
func (*CbscFeeRateLimit) ProtoMessage()    {}
func (*CbscFeeRateLimit) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{36}
}

func (m *CbscFeeRateLimit) GetServiceFeeLimit() *CbscServiceFeeRateLimit {
	if m != nil {
		return m.ServiceFeeLimit
	}
	return nil
}

func (m *CbscFeeRateLimit) GetProfitRateLimit() []*CbscProfitRateLimit {
	if m != nil {
		return m.ProfitRateLimit
	}
	return nil
}

type CbscProfitRateLimit struct {
	MinProfitRate    *int64  `protobuf:"varint,1,opt,name=min_profit_rate,json=minProfitRate" json:"min_profit_rate"`
	MaxProfitRate    *int64  `protobuf:"varint,2,opt,name=max_profit_rate,json=maxProfitRate" json:"max_profit_rate"`
	Region           *string `protobuf:"bytes,3,opt,name=region" json:"region"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CbscProfitRateLimit) Reset()         { *m = CbscProfitRateLimit{} }
func (m *CbscProfitRateLimit) String() string { return proto.CompactTextString(m) }
func (*CbscProfitRateLimit) ProtoMessage()    {}
func (*CbscProfitRateLimit) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{37}
}

func (m *CbscProfitRateLimit) GetMinProfitRate() int64 {
	if m != nil && m.MinProfitRate != nil {
		return *m.MinProfitRate
	}
	return 0
}

func (m *CbscProfitRateLimit) GetMaxProfitRate() int64 {
	if m != nil && m.MaxProfitRate != nil {
		return *m.MaxProfitRate
	}
	return 0
}

func (m *CbscProfitRateLimit) GetRegion() string {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return ""
}

type CbscServiceFeeRateLimit struct {
	MinServiceFeeRate *int64 `protobuf:"varint,1,opt,name=min_service_fee_rate,json=minServiceFeeRate" json:"min_service_fee_rate"`
	MaxServiceFeeRate *int64 `protobuf:"varint,2,opt,name=max_service_fee_rate,json=maxServiceFeeRate" json:"max_service_fee_rate"`
	XXX_unrecognized  []byte `json:"-"`
}

func (m *CbscServiceFeeRateLimit) Reset()         { *m = CbscServiceFeeRateLimit{} }
func (m *CbscServiceFeeRateLimit) String() string { return proto.CompactTextString(m) }
func (*CbscServiceFeeRateLimit) ProtoMessage()    {}
func (*CbscServiceFeeRateLimit) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{38}
}

func (m *CbscServiceFeeRateLimit) GetMinServiceFeeRate() int64 {
	if m != nil && m.MinServiceFeeRate != nil {
		return *m.MinServiceFeeRate
	}
	return 0
}

func (m *CbscServiceFeeRateLimit) GetMaxServiceFeeRate() int64 {
	if m != nil && m.MaxServiceFeeRate != nil {
		return *m.MaxServiceFeeRate
	}
	return 0
}

type CbscExchangeRate struct {
	ExchangeRate     *float64 `protobuf:"fixed64,1,opt,name=exchange_rate,json=exchangeRate" json:"exchange_rate"`
	Region           *string  `protobuf:"bytes,2,opt,name=region" json:"region"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CbscExchangeRate) Reset()         { *m = CbscExchangeRate{} }
func (m *CbscExchangeRate) String() string { return proto.CompactTextString(m) }
func (*CbscExchangeRate) ProtoMessage()    {}
func (*CbscExchangeRate) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{39}
}

func (m *CbscExchangeRate) GetExchangeRate() float64 {
	if m != nil && m.ExchangeRate != nil {
		return *m.ExchangeRate
	}
	return 0
}

func (m *CbscExchangeRate) GetRegion() string {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return ""
}

type SetCbscPriceFactorRequest struct {
	MerchantId           *uint64                       `protobuf:"varint,1,opt,name=merchant_id,json=merchantId" json:"merchant_id"`
	ShopCbscPriceFactors []*ShopCbscPriceFactorSetting `protobuf:"bytes,2,rep,name=shop_cbsc_price_factors,json=shopCbscPriceFactors" json:"shop_cbsc_price_factors"`
	XXX_unrecognized     []byte                        `json:"-"`
}

func (m *SetCbscPriceFactorRequest) Reset()         { *m = SetCbscPriceFactorRequest{} }
func (m *SetCbscPriceFactorRequest) String() string { return proto.CompactTextString(m) }
func (*SetCbscPriceFactorRequest) ProtoMessage()    {}
func (*SetCbscPriceFactorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{40}
}

func (m *SetCbscPriceFactorRequest) GetMerchantId() uint64 {
	if m != nil && m.MerchantId != nil {
		return *m.MerchantId
	}
	return 0
}

func (m *SetCbscPriceFactorRequest) GetShopCbscPriceFactors() []*ShopCbscPriceFactorSetting {
	if m != nil {
		return m.ShopCbscPriceFactors
	}
	return nil
}

type SetCbscPriceFactorResponse struct {
	DebugMsg         *string `protobuf:"bytes,1,opt,name=debug_msg,json=debugMsg" json:"debug_msg"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SetCbscPriceFactorResponse) Reset()         { *m = SetCbscPriceFactorResponse{} }
func (m *SetCbscPriceFactorResponse) String() string { return proto.CompactTextString(m) }
func (*SetCbscPriceFactorResponse) ProtoMessage()    {}
func (*SetCbscPriceFactorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{41}
}

func (m *SetCbscPriceFactorResponse) GetDebugMsg() string {
	if m != nil && m.DebugMsg != nil {
		return *m.DebugMsg
	}
	return ""
}

type ShopCbscPriceFactorSetting struct {
	ShopId           *int64  `protobuf:"varint,1,opt,name=shop_id,json=shopId" json:"shop_id"`
	Region           *string `protobuf:"bytes,2,opt,name=region" json:"region"`
	ProfitRate       *uint64 `protobuf:"varint,3,opt,name=profit_rate,json=profitRate" json:"profit_rate"`
	ServiceFeeRate   *uint64 `protobuf:"varint,4,opt,name=service_fee_rate,json=serviceFeeRate" json:"service_fee_rate"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ShopCbscPriceFactorSetting) Reset()         { *m = ShopCbscPriceFactorSetting{} }
func (m *ShopCbscPriceFactorSetting) String() string { return proto.CompactTextString(m) }
func (*ShopCbscPriceFactorSetting) ProtoMessage()    {}
func (*ShopCbscPriceFactorSetting) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{42}
}

func (m *ShopCbscPriceFactorSetting) GetShopId() int64 {
	if m != nil && m.ShopId != nil {
		return *m.ShopId
	}
	return 0
}

func (m *ShopCbscPriceFactorSetting) GetRegion() string {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return ""
}

func (m *ShopCbscPriceFactorSetting) GetProfitRate() uint64 {
	if m != nil && m.ProfitRate != nil {
		return *m.ProfitRate
	}
	return 0
}

func (m *ShopCbscPriceFactorSetting) GetServiceFeeRate() uint64 {
	if m != nil && m.ServiceFeeRate != nil {
		return *m.ServiceFeeRate
	}
	return 0
}

type ConvertCurrencyRequest struct {
	SrcPriceList       []int64 `protobuf:"varint,1,rep,name=src_price_list,json=srcPriceList" json:"src_price_list"`
	ExchangeRateSource *uint32 `protobuf:"varint,2,opt,name=exchange_rate_source,json=exchangeRateSource" json:"exchange_rate_source"`
	SrcCurrency        *string `protobuf:"bytes,3,opt,name=src_currency,json=srcCurrency" json:"src_currency"`
	DstCurrency        *string `protobuf:"bytes,4,opt,name=dst_currency,json=dstCurrency" json:"dst_currency"`
	MerchantId         *uint64 `protobuf:"varint,5,opt,name=merchant_id,json=merchantId" json:"merchant_id"`
	MpskuRegion        *string `protobuf:"bytes,6,opt,name=mpsku_region,json=mpskuRegion" json:"mpsku_region"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *ConvertCurrencyRequest) Reset()         { *m = ConvertCurrencyRequest{} }
func (m *ConvertCurrencyRequest) String() string { return proto.CompactTextString(m) }
func (*ConvertCurrencyRequest) ProtoMessage()    {}
func (*ConvertCurrencyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{43}
}

func (m *ConvertCurrencyRequest) GetSrcPriceList() []int64 {
	if m != nil {
		return m.SrcPriceList
	}
	return nil
}

func (m *ConvertCurrencyRequest) GetExchangeRateSource() uint32 {
	if m != nil && m.ExchangeRateSource != nil {
		return *m.ExchangeRateSource
	}
	return 0
}

func (m *ConvertCurrencyRequest) GetSrcCurrency() string {
	if m != nil && m.SrcCurrency != nil {
		return *m.SrcCurrency
	}
	return ""
}

func (m *ConvertCurrencyRequest) GetDstCurrency() string {
	if m != nil && m.DstCurrency != nil {
		return *m.DstCurrency
	}
	return ""
}

func (m *ConvertCurrencyRequest) GetMerchantId() uint64 {
	if m != nil && m.MerchantId != nil {
		return *m.MerchantId
	}
	return 0
}

func (m *ConvertCurrencyRequest) GetMpskuRegion() string {
	if m != nil && m.MpskuRegion != nil {
		return *m.MpskuRegion
	}
	return ""
}

type ConvertCurrencyResponse struct {
	DebugMsg         *string  `protobuf:"bytes,1,opt,name=debug_msg,json=debugMsg" json:"debug_msg"`
	DstPrices        []int64  `protobuf:"varint,2,rep,name=dst_prices,json=dstPrices" json:"dst_prices"`
	ExchangeRate     *float64 `protobuf:"fixed64,3,opt,name=exchange_rate,json=exchangeRate" json:"exchange_rate"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ConvertCurrencyResponse) Reset()         { *m = ConvertCurrencyResponse{} }
func (m *ConvertCurrencyResponse) String() string { return proto.CompactTextString(m) }
func (*ConvertCurrencyResponse) ProtoMessage()    {}
func (*ConvertCurrencyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{44}
}

func (m *ConvertCurrencyResponse) GetDebugMsg() string {
	if m != nil && m.DebugMsg != nil {
		return *m.DebugMsg
	}
	return ""
}

func (m *ConvertCurrencyResponse) GetDstPrices() []int64 {
	if m != nil {
		return m.DstPrices
	}
	return nil
}

func (m *ConvertCurrencyResponse) GetExchangeRate() float64 {
	if m != nil && m.ExchangeRate != nil {
		return *m.ExchangeRate
	}
	return 0
}

type CalculateAPriceByPItemForLocalSIPRequest struct {
	PShopId            *uint64                  `protobuf:"varint,1,opt,name=p_shop_id,json=pShopId" json:"p_shop_id"`
	PRegion            *string                  `protobuf:"bytes,2,opt,name=p_region,json=pRegion" json:"p_region"`
	PItemId            *uint64                  `protobuf:"varint,3,opt,name=p_item_id,json=pItemId" json:"p_item_id"`
	Queries            []*LocalSipAPriceQueryId `protobuf:"bytes,4,rep,name=queries" json:"queries"`
	CalculateForCreate *bool                    `protobuf:"varint,5,opt,name=calculate_for_create,json=calculateForCreate" json:"calculate_for_create"`
	XXX_unrecognized   []byte                   `json:"-"`
}

func (m *CalculateAPriceByPItemForLocalSIPRequest) Reset() {
	*m = CalculateAPriceByPItemForLocalSIPRequest{}
}
func (m *CalculateAPriceByPItemForLocalSIPRequest) String() string { return proto.CompactTextString(m) }
func (*CalculateAPriceByPItemForLocalSIPRequest) ProtoMessage()    {}
func (*CalculateAPriceByPItemForLocalSIPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{45}
}

func (m *CalculateAPriceByPItemForLocalSIPRequest) GetPShopId() uint64 {
	if m != nil && m.PShopId != nil {
		return *m.PShopId
	}
	return 0
}

func (m *CalculateAPriceByPItemForLocalSIPRequest) GetPRegion() string {
	if m != nil && m.PRegion != nil {
		return *m.PRegion
	}
	return ""
}

func (m *CalculateAPriceByPItemForLocalSIPRequest) GetPItemId() uint64 {
	if m != nil && m.PItemId != nil {
		return *m.PItemId
	}
	return 0
}

func (m *CalculateAPriceByPItemForLocalSIPRequest) GetQueries() []*LocalSipAPriceQueryId {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *CalculateAPriceByPItemForLocalSIPRequest) GetCalculateForCreate() bool {
	if m != nil && m.CalculateForCreate != nil {
		return *m.CalculateForCreate
	}
	return false
}

type LocalSipAPriceQueryId struct {
	AShopId          *uint64 `protobuf:"varint,1,opt,name=a_shop_id,json=aShopId" json:"a_shop_id"`
	ARegion          *string `protobuf:"bytes,2,opt,name=a_region,json=aRegion" json:"a_region"`
	AItemId          *uint64 `protobuf:"varint,3,opt,name=a_item_id,json=aItemId" json:"a_item_id"`
	AModelId         *uint64 `protobuf:"varint,4,opt,name=a_model_id,json=aModelId" json:"a_model_id"`
	PNormalPrice     *int64  `protobuf:"varint,5,opt,name=p_normal_price,json=pNormalPrice" json:"p_normal_price"`
	PPromotionPrices []int64 `protobuf:"varint,6,rep,name=p_promotion_prices,json=pPromotionPrices" json:"p_promotion_prices"`
	// following fields are used for create scenario, need fill for shipping fee calculation on SLS mode
	EnabledChannelIdList []int64 `protobuf:"varint,7,rep,name=enabled_channel_id_list,json=enabledChannelIdList" json:"enabled_channel_id_list"`
	LeafCategoryId       *uint64 `protobuf:"varint,8,opt,name=leaf_category_id,json=leafCategoryId" json:"leaf_category_id"`
	XXX_unrecognized     []byte  `json:"-"`
}

func (m *LocalSipAPriceQueryId) Reset()         { *m = LocalSipAPriceQueryId{} }
func (m *LocalSipAPriceQueryId) String() string { return proto.CompactTextString(m) }
func (*LocalSipAPriceQueryId) ProtoMessage()    {}
func (*LocalSipAPriceQueryId) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{46}
}

func (m *LocalSipAPriceQueryId) GetAShopId() uint64 {
	if m != nil && m.AShopId != nil {
		return *m.AShopId
	}
	return 0
}

func (m *LocalSipAPriceQueryId) GetARegion() string {
	if m != nil && m.ARegion != nil {
		return *m.ARegion
	}
	return ""
}

func (m *LocalSipAPriceQueryId) GetAItemId() uint64 {
	if m != nil && m.AItemId != nil {
		return *m.AItemId
	}
	return 0
}

func (m *LocalSipAPriceQueryId) GetAModelId() uint64 {
	if m != nil && m.AModelId != nil {
		return *m.AModelId
	}
	return 0
}

func (m *LocalSipAPriceQueryId) GetPNormalPrice() int64 {
	if m != nil && m.PNormalPrice != nil {
		return *m.PNormalPrice
	}
	return 0
}

func (m *LocalSipAPriceQueryId) GetPPromotionPrices() []int64 {
	if m != nil {
		return m.PPromotionPrices
	}
	return nil
}

func (m *LocalSipAPriceQueryId) GetEnabledChannelIdList() []int64 {
	if m != nil {
		return m.EnabledChannelIdList
	}
	return nil
}

func (m *LocalSipAPriceQueryId) GetLeafCategoryId() uint64 {
	if m != nil && m.LeafCategoryId != nil {
		return *m.LeafCategoryId
	}
	return 0
}

type CalculateAPriceByPItemForLocalSIPResponse struct {
	DebugMsg                *string                  `protobuf:"bytes,1,opt,name=debug_msg,json=debugMsg" json:"debug_msg"`
	Results                 []*LocalSipAPriceInfo    `protobuf:"bytes,2,rep,name=results" json:"results"`
	AShopItemCustomizedOpls []*ShopItemCustomizedOPL `protobuf:"bytes,3,rep,name=a_shop_item_customized_opls,json=aShopItemCustomizedOpls" json:"a_shop_item_customized_opls"`
	XXX_unrecognized        []byte                   `json:"-"`
}

func (m *CalculateAPriceByPItemForLocalSIPResponse) Reset() {
	*m = CalculateAPriceByPItemForLocalSIPResponse{}
}
func (m *CalculateAPriceByPItemForLocalSIPResponse) String() string {
	return proto.CompactTextString(m)
}
func (*CalculateAPriceByPItemForLocalSIPResponse) ProtoMessage() {}
func (*CalculateAPriceByPItemForLocalSIPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{47}
}

func (m *CalculateAPriceByPItemForLocalSIPResponse) GetDebugMsg() string {
	if m != nil && m.DebugMsg != nil {
		return *m.DebugMsg
	}
	return ""
}

func (m *CalculateAPriceByPItemForLocalSIPResponse) GetResults() []*LocalSipAPriceInfo {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *CalculateAPriceByPItemForLocalSIPResponse) GetAShopItemCustomizedOpls() []*ShopItemCustomizedOPL {
	if m != nil {
		return m.AShopItemCustomizedOpls
	}
	return nil
}

type ShopItemCustomizedOPL struct {
	ShopId           *uint64        `protobuf:"varint,1,opt,name=shop_id,json=shopId" json:"shop_id"`
	ItemId           *uint64        `protobuf:"varint,2,opt,name=item_id,json=itemId" json:"item_id"`
	CustomizedOpl    *CustomizedOPL `protobuf:"bytes,3,opt,name=customized_opl,json=customizedOpl" json:"customized_opl"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *ShopItemCustomizedOPL) Reset()         { *m = ShopItemCustomizedOPL{} }
func (m *ShopItemCustomizedOPL) String() string { return proto.CompactTextString(m) }
func (*ShopItemCustomizedOPL) ProtoMessage()    {}
func (*ShopItemCustomizedOPL) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{48}
}

func (m *ShopItemCustomizedOPL) GetShopId() uint64 {
	if m != nil && m.ShopId != nil {
		return *m.ShopId
	}
	return 0
}

func (m *ShopItemCustomizedOPL) GetItemId() uint64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *ShopItemCustomizedOPL) GetCustomizedOpl() *CustomizedOPL {
	if m != nil {
		return m.CustomizedOpl
	}
	return nil
}

type LocalSipAPriceInfo struct {
	ErrCode          *uint32                  `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code"`
	ErrMsg           *string                  `protobuf:"bytes,2,opt,name=err_msg,json=errMsg" json:"err_msg"`
	NormalPrice      *int64                   `protobuf:"varint,3,opt,name=normal_price,json=normalPrice" json:"normal_price"`
	PromotionPrices  []int64                  `protobuf:"varint,4,rep,name=promotion_prices,json=promotionPrices" json:"promotion_prices"`
	AShopId          *uint64                  `protobuf:"varint,5,opt,name=a_shop_id,json=aShopId" json:"a_shop_id"`
	ARegion          *string                  `protobuf:"bytes,6,opt,name=a_region,json=aRegion" json:"a_region"`
	AItemId          *uint64                  `protobuf:"varint,7,opt,name=a_item_id,json=aItemId" json:"a_item_id"`
	AModelId         *uint64                  `protobuf:"varint,8,opt,name=a_model_id,json=aModelId" json:"a_model_id"`
	Snap             *LocalSipPriceFactorSnap `protobuf:"bytes,9,opt,name=snap" json:"snap"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *LocalSipAPriceInfo) Reset()         { *m = LocalSipAPriceInfo{} }
func (m *LocalSipAPriceInfo) String() string { return proto.CompactTextString(m) }
func (*LocalSipAPriceInfo) ProtoMessage()    {}
func (*LocalSipAPriceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{49}
}

func (m *LocalSipAPriceInfo) GetErrCode() uint32 {
	if m != nil && m.ErrCode != nil {
		return *m.ErrCode
	}
	return 0
}

func (m *LocalSipAPriceInfo) GetErrMsg() string {
	if m != nil && m.ErrMsg != nil {
		return *m.ErrMsg
	}
	return ""
}

func (m *LocalSipAPriceInfo) GetNormalPrice() int64 {
	if m != nil && m.NormalPrice != nil {
		return *m.NormalPrice
	}
	return 0
}

func (m *LocalSipAPriceInfo) GetPromotionPrices() []int64 {
	if m != nil {
		return m.PromotionPrices
	}
	return nil
}

func (m *LocalSipAPriceInfo) GetAShopId() uint64 {
	if m != nil && m.AShopId != nil {
		return *m.AShopId
	}
	return 0
}

func (m *LocalSipAPriceInfo) GetARegion() string {
	if m != nil && m.ARegion != nil {
		return *m.ARegion
	}
	return ""
}

func (m *LocalSipAPriceInfo) GetAItemId() uint64 {
	if m != nil && m.AItemId != nil {
		return *m.AItemId
	}
	return 0
}

func (m *LocalSipAPriceInfo) GetAModelId() uint64 {
	if m != nil && m.AModelId != nil {
		return *m.AModelId
	}
	return 0
}

func (m *LocalSipAPriceInfo) GetSnap() *LocalSipPriceFactorSnap {
	if m != nil {
		return m.Snap
	}
	return nil
}

type LocalSipPriceFactorSnap struct {
	Weight           *float64 `protobuf:"fixed64,1,opt,name=weight" json:"weight"`
	ShopMargin       *float64 `protobuf:"fixed64,2,opt,name=shop_margin,json=shopMargin" json:"shop_margin"`
	ItemMargin       *float64 `protobuf:"fixed64,3,opt,name=item_margin,json=itemMargin" json:"item_margin"`
	ShippingFee      *float64 `protobuf:"fixed64,4,opt,name=shippingFee" json:"shippingFee"`
	CountryMargin    *float64 `protobuf:"fixed64,5,opt,name=country_margin,json=countryMargin" json:"country_margin"`
	ExchangeRate     *float64 `protobuf:"fixed64,6,opt,name=exchange_rate,json=exchangeRate" json:"exchange_rate"`
	InitHiddenPrice  *float64 `protobuf:"fixed64,7,opt,name=init_hidden_price,json=initHiddenPrice" json:"init_hidden_price"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *LocalSipPriceFactorSnap) Reset()         { *m = LocalSipPriceFactorSnap{} }
func (m *LocalSipPriceFactorSnap) String() string { return proto.CompactTextString(m) }
func (*LocalSipPriceFactorSnap) ProtoMessage()    {}
func (*LocalSipPriceFactorSnap) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{50}
}

func (m *LocalSipPriceFactorSnap) GetWeight() float64 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return 0
}

func (m *LocalSipPriceFactorSnap) GetShopMargin() float64 {
	if m != nil && m.ShopMargin != nil {
		return *m.ShopMargin
	}
	return 0
}

func (m *LocalSipPriceFactorSnap) GetItemMargin() float64 {
	if m != nil && m.ItemMargin != nil {
		return *m.ItemMargin
	}
	return 0
}

func (m *LocalSipPriceFactorSnap) GetShippingFee() float64 {
	if m != nil && m.ShippingFee != nil {
		return *m.ShippingFee
	}
	return 0
}

func (m *LocalSipPriceFactorSnap) GetCountryMargin() float64 {
	if m != nil && m.CountryMargin != nil {
		return *m.CountryMargin
	}
	return 0
}

func (m *LocalSipPriceFactorSnap) GetExchangeRate() float64 {
	if m != nil && m.ExchangeRate != nil {
		return *m.ExchangeRate
	}
	return 0
}

func (m *LocalSipPriceFactorSnap) GetInitHiddenPrice() float64 {
	if m != nil && m.InitHiddenPrice != nil {
		return *m.InitHiddenPrice
	}
	return 0
}

type CalculateSipItemPriceForCbSipRequest struct {
	ShopId *uint64 `protobuf:"varint,1,opt,name=shop_id,json=shopId" json:"shop_id"`
	Region *string `protobuf:"bytes,2,opt,name=region" json:"region"`
	ItemId *uint64 `protobuf:"varint,3,opt,name=item_id,json=itemId" json:"item_id"`
	// item level info, used for hidden fee calculation now.
	ChannelIdList  []uint64 `protobuf:"varint,4,rep,name=channel_id_list,json=channelIdList" json:"channel_id_list"`
	LeafCategoryId *uint64  `protobuf:"varint,5,opt,name=leaf_category_id,json=leafCategoryId" json:"leaf_category_id"`
	Weight         *uint64  `protobuf:"varint,6,opt,name=weight" json:"weight"`
	// for multiple models
	Queries          []*SipItemPriceForCbSipQueryId `protobuf:"bytes,7,rep,name=queries" json:"queries"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *CalculateSipItemPriceForCbSipRequest) Reset()         { *m = CalculateSipItemPriceForCbSipRequest{} }
func (m *CalculateSipItemPriceForCbSipRequest) String() string { return proto.CompactTextString(m) }
func (*CalculateSipItemPriceForCbSipRequest) ProtoMessage()    {}
func (*CalculateSipItemPriceForCbSipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{51}
}

func (m *CalculateSipItemPriceForCbSipRequest) GetShopId() uint64 {
	if m != nil && m.ShopId != nil {
		return *m.ShopId
	}
	return 0
}

func (m *CalculateSipItemPriceForCbSipRequest) GetRegion() string {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return ""
}

func (m *CalculateSipItemPriceForCbSipRequest) GetItemId() uint64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *CalculateSipItemPriceForCbSipRequest) GetChannelIdList() []uint64 {
	if m != nil {
		return m.ChannelIdList
	}
	return nil
}

func (m *CalculateSipItemPriceForCbSipRequest) GetLeafCategoryId() uint64 {
	if m != nil && m.LeafCategoryId != nil {
		return *m.LeafCategoryId
	}
	return 0
}

func (m *CalculateSipItemPriceForCbSipRequest) GetWeight() uint64 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return 0
}

func (m *CalculateSipItemPriceForCbSipRequest) GetQueries() []*SipItemPriceForCbSipQueryId {
	if m != nil {
		return m.Queries
	}
	return nil
}

type SipItemPriceForCbSipQueryId struct {
	ModelId          *uint64 `protobuf:"varint,1,opt,name=model_id,json=modelId" json:"model_id"`
	Price            *int64  `protobuf:"varint,2,opt,name=price" json:"price"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SipItemPriceForCbSipQueryId) Reset()         { *m = SipItemPriceForCbSipQueryId{} }
func (m *SipItemPriceForCbSipQueryId) String() string { return proto.CompactTextString(m) }
func (*SipItemPriceForCbSipQueryId) ProtoMessage()    {}
func (*SipItemPriceForCbSipQueryId) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{52}
}

func (m *SipItemPriceForCbSipQueryId) GetModelId() uint64 {
	if m != nil && m.ModelId != nil {
		return *m.ModelId
	}
	return 0
}

func (m *SipItemPriceForCbSipQueryId) GetPrice() int64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

type CalculateSipItemPriceForCbSipResponse struct {
	DebugMsg               *string               `protobuf:"bytes,1,opt,name=debug_msg,json=debugMsg" json:"debug_msg"`
	CbSipItemPriceInfoList []*CbSipItemPriceInfo `protobuf:"bytes,2,rep,name=cb_sip_item_price_info_list,json=cbSipItemPriceInfoList" json:"cb_sip_item_price_info_list"`
	XXX_unrecognized       []byte                `json:"-"`
}

func (m *CalculateSipItemPriceForCbSipResponse) Reset()         { *m = CalculateSipItemPriceForCbSipResponse{} }
func (m *CalculateSipItemPriceForCbSipResponse) String() string { return proto.CompactTextString(m) }
func (*CalculateSipItemPriceForCbSipResponse) ProtoMessage()    {}
func (*CalculateSipItemPriceForCbSipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{53}
}

func (m *CalculateSipItemPriceForCbSipResponse) GetDebugMsg() string {
	if m != nil && m.DebugMsg != nil {
		return *m.DebugMsg
	}
	return ""
}

func (m *CalculateSipItemPriceForCbSipResponse) GetCbSipItemPriceInfoList() []*CbSipItemPriceInfo {
	if m != nil {
		return m.CbSipItemPriceInfoList
	}
	return nil
}

type CbSipItemPriceInfo struct {
	ErrCode          *uint32 `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code"`
	ErrMsg           *string `protobuf:"bytes,2,opt,name=err_msg,json=errMsg" json:"err_msg"`
	ModelId          *uint64 `protobuf:"varint,3,opt,name=model_id,json=modelId" json:"model_id"`
	CbSipItemPrice   *int64  `protobuf:"varint,4,opt,name=cb_sip_item_price,json=cbSipItemPrice" json:"cb_sip_item_price"`
	Currency         *string `protobuf:"bytes,5,opt,name=currency" json:"currency"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CbSipItemPriceInfo) Reset()         { *m = CbSipItemPriceInfo{} }
func (m *CbSipItemPriceInfo) String() string { return proto.CompactTextString(m) }
func (*CbSipItemPriceInfo) ProtoMessage()    {}
func (*CbSipItemPriceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{54}
}

func (m *CbSipItemPriceInfo) GetErrCode() uint32 {
	if m != nil && m.ErrCode != nil {
		return *m.ErrCode
	}
	return 0
}

func (m *CbSipItemPriceInfo) GetErrMsg() string {
	if m != nil && m.ErrMsg != nil {
		return *m.ErrMsg
	}
	return ""
}

func (m *CbSipItemPriceInfo) GetModelId() uint64 {
	if m != nil && m.ModelId != nil {
		return *m.ModelId
	}
	return 0
}

func (m *CbSipItemPriceInfo) GetCbSipItemPrice() int64 {
	if m != nil && m.CbSipItemPrice != nil {
		return *m.CbSipItemPrice
	}
	return 0
}

func (m *CbSipItemPriceInfo) GetCurrency() string {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return ""
}

type CalculateAPriceByPItemForCBSIPRequest struct {
	MerchantId         *uint64              `protobuf:"varint,1,opt,name=merchant_id,json=merchantId" json:"merchant_id"`
	MerchantRegion     *string              `protobuf:"bytes,2,opt,name=merchant_region,json=merchantRegion" json:"merchant_region"`
	PShopId            *uint64              `protobuf:"varint,3,opt,name=p_shop_id,json=pShopId" json:"p_shop_id"`
	PRegion            *string              `protobuf:"bytes,4,opt,name=p_region,json=pRegion" json:"p_region"`
	PItemId            *uint64              `protobuf:"varint,5,opt,name=p_item_id,json=pItemId" json:"p_item_id"`
	AShopId            *uint64              `protobuf:"varint,6,opt,name=a_shop_id,json=aShopId" json:"a_shop_id"`
	ARegion            *string              `protobuf:"bytes,7,opt,name=a_region,json=aRegion" json:"a_region"`
	AItemId            *uint64              `protobuf:"varint,8,opt,name=a_item_id,json=aItemId" json:"a_item_id"`
	Queries            []*AItemCBSIPQueryId `protobuf:"bytes,9,rep,name=queries" json:"queries"`
	CalculateForCreate *bool                `protobuf:"varint,10,opt,name=calculate_for_create,json=calculateForCreate" json:"calculate_for_create"`
	XXX_unrecognized   []byte               `json:"-"`
}

func (m *CalculateAPriceByPItemForCBSIPRequest) Reset()         { *m = CalculateAPriceByPItemForCBSIPRequest{} }
func (m *CalculateAPriceByPItemForCBSIPRequest) String() string { return proto.CompactTextString(m) }
func (*CalculateAPriceByPItemForCBSIPRequest) ProtoMessage()    {}
func (*CalculateAPriceByPItemForCBSIPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{55}
}

func (m *CalculateAPriceByPItemForCBSIPRequest) GetMerchantId() uint64 {
	if m != nil && m.MerchantId != nil {
		return *m.MerchantId
	}
	return 0
}

func (m *CalculateAPriceByPItemForCBSIPRequest) GetMerchantRegion() string {
	if m != nil && m.MerchantRegion != nil {
		return *m.MerchantRegion
	}
	return ""
}

func (m *CalculateAPriceByPItemForCBSIPRequest) GetPShopId() uint64 {
	if m != nil && m.PShopId != nil {
		return *m.PShopId
	}
	return 0
}

func (m *CalculateAPriceByPItemForCBSIPRequest) GetPRegion() string {
	if m != nil && m.PRegion != nil {
		return *m.PRegion
	}
	return ""
}

func (m *CalculateAPriceByPItemForCBSIPRequest) GetPItemId() uint64 {
	if m != nil && m.PItemId != nil {
		return *m.PItemId
	}
	return 0
}

func (m *CalculateAPriceByPItemForCBSIPRequest) GetAShopId() uint64 {
	if m != nil && m.AShopId != nil {
		return *m.AShopId
	}
	return 0
}

func (m *CalculateAPriceByPItemForCBSIPRequest) GetARegion() string {
	if m != nil && m.ARegion != nil {
		return *m.ARegion
	}
	return ""
}

func (m *CalculateAPriceByPItemForCBSIPRequest) GetAItemId() uint64 {
	if m != nil && m.AItemId != nil {
		return *m.AItemId
	}
	return 0
}

func (m *CalculateAPriceByPItemForCBSIPRequest) GetQueries() []*AItemCBSIPQueryId {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *CalculateAPriceByPItemForCBSIPRequest) GetCalculateForCreate() bool {
	if m != nil && m.CalculateForCreate != nil {
		return *m.CalculateForCreate
	}
	return false
}

type AItemCBSIPQueryId struct {
	AModelId         *uint64 `protobuf:"varint,1,opt,name=a_model_id,json=aModelId" json:"a_model_id"`
	PItemPrice       *int64  `protobuf:"varint,2,opt,name=p_item_price,json=pItemPrice" json:"p_item_price"`
	PNormalPrice     *int64  `protobuf:"varint,3,opt,name=p_normal_price,json=pNormalPrice" json:"p_normal_price"`
	PPromotionPrice  *int64  `protobuf:"varint,4,opt,name=p_promotion_price,json=pPromotionPrice" json:"p_promotion_price"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AItemCBSIPQueryId) Reset()         { *m = AItemCBSIPQueryId{} }
func (m *AItemCBSIPQueryId) String() string { return proto.CompactTextString(m) }
func (*AItemCBSIPQueryId) ProtoMessage()    {}
func (*AItemCBSIPQueryId) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{56}
}

func (m *AItemCBSIPQueryId) GetAModelId() uint64 {
	if m != nil && m.AModelId != nil {
		return *m.AModelId
	}
	return 0
}

func (m *AItemCBSIPQueryId) GetPItemPrice() int64 {
	if m != nil && m.PItemPrice != nil {
		return *m.PItemPrice
	}
	return 0
}

func (m *AItemCBSIPQueryId) GetPNormalPrice() int64 {
	if m != nil && m.PNormalPrice != nil {
		return *m.PNormalPrice
	}
	return 0
}

func (m *AItemCBSIPQueryId) GetPPromotionPrice() int64 {
	if m != nil && m.PPromotionPrice != nil {
		return *m.PPromotionPrice
	}
	return 0
}

type CalculateAPriceByPItemForCBSIPResponse struct {
	DebugMsg         *string                 `protobuf:"bytes,1,opt,name=debug_msg,json=debugMsg" json:"debug_msg"`
	Results          []*AItemPriceResultInfo `protobuf:"bytes,2,rep,name=results" json:"results"`
	CustomizedOpl    *CustomizedOPL          `protobuf:"bytes,3,opt,name=customized_opl,json=customizedOpl" json:"customized_opl"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *CalculateAPriceByPItemForCBSIPResponse) Reset() {
	*m = CalculateAPriceByPItemForCBSIPResponse{}
}
func (m *CalculateAPriceByPItemForCBSIPResponse) String() string { return proto.CompactTextString(m) }
func (*CalculateAPriceByPItemForCBSIPResponse) ProtoMessage()    {}
func (*CalculateAPriceByPItemForCBSIPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{57}
}

func (m *CalculateAPriceByPItemForCBSIPResponse) GetDebugMsg() string {
	if m != nil && m.DebugMsg != nil {
		return *m.DebugMsg
	}
	return ""
}

func (m *CalculateAPriceByPItemForCBSIPResponse) GetResults() []*AItemPriceResultInfo {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *CalculateAPriceByPItemForCBSIPResponse) GetCustomizedOpl() *CustomizedOPL {
	if m != nil {
		return m.CustomizedOpl
	}
	return nil
}

type CustomizedOPL struct {
	StartTime        *uint32 `protobuf:"varint,1,opt,name=start_time,json=startTime" json:"start_time"`
	EndTime          *uint32 `protobuf:"varint,2,opt,name=end_time,json=endTime" json:"end_time"`
	PurchaseLimit    *uint32 `protobuf:"varint,3,opt,name=purchase_limit,json=purchaseLimit" json:"purchase_limit"`
	RepeatedTimes    *uint32 `protobuf:"varint,4,opt,name=repeated_times,json=repeatedTimes" json:"repeated_times"`
	PromotionId      *uint64 `protobuf:"varint,5,opt,name=promotion_id,json=promotionId" json:"promotion_id"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CustomizedOPL) Reset()         { *m = CustomizedOPL{} }
func (m *CustomizedOPL) String() string { return proto.CompactTextString(m) }
func (*CustomizedOPL) ProtoMessage()    {}
func (*CustomizedOPL) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{58}
}

func (m *CustomizedOPL) GetStartTime() uint32 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *CustomizedOPL) GetEndTime() uint32 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *CustomizedOPL) GetPurchaseLimit() uint32 {
	if m != nil && m.PurchaseLimit != nil {
		return *m.PurchaseLimit
	}
	return 0
}

func (m *CustomizedOPL) GetRepeatedTimes() uint32 {
	if m != nil && m.RepeatedTimes != nil {
		return *m.RepeatedTimes
	}
	return 0
}

func (m *CustomizedOPL) GetPromotionId() uint64 {
	if m != nil && m.PromotionId != nil {
		return *m.PromotionId
	}
	return 0
}

type AItemPriceResultInfo struct {
	ErrCode                 *uint32               `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code"`
	ErrMsg                  *string               `protobuf:"bytes,2,opt,name=err_msg,json=errMsg" json:"err_msg"`
	NormalPrice             *int64                `protobuf:"varint,3,opt,name=normal_price,json=normalPrice" json:"normal_price"`
	SettlementPrice         *int64                `protobuf:"varint,4,opt,name=settlement_price,json=settlementPrice" json:"settlement_price"`
	SettlementPriceCurrency *string               `protobuf:"bytes,5,opt,name=settlement_price_currency,json=settlementPriceCurrency" json:"settlement_price_currency"`
	PromotionPrice          *int64                `protobuf:"varint,6,opt,name=promotion_price,json=promotionPrice" json:"promotion_price"`
	Snap                    *CbSipPriceFactorSnap `protobuf:"bytes,7,opt,name=snap" json:"snap"`
	XXX_unrecognized        []byte                `json:"-"`
}

func (m *AItemPriceResultInfo) Reset()         { *m = AItemPriceResultInfo{} }
func (m *AItemPriceResultInfo) String() string { return proto.CompactTextString(m) }
func (*AItemPriceResultInfo) ProtoMessage()    {}
func (*AItemPriceResultInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{59}
}

func (m *AItemPriceResultInfo) GetErrCode() uint32 {
	if m != nil && m.ErrCode != nil {
		return *m.ErrCode
	}
	return 0
}

func (m *AItemPriceResultInfo) GetErrMsg() string {
	if m != nil && m.ErrMsg != nil {
		return *m.ErrMsg
	}
	return ""
}

func (m *AItemPriceResultInfo) GetNormalPrice() int64 {
	if m != nil && m.NormalPrice != nil {
		return *m.NormalPrice
	}
	return 0
}

func (m *AItemPriceResultInfo) GetSettlementPrice() int64 {
	if m != nil && m.SettlementPrice != nil {
		return *m.SettlementPrice
	}
	return 0
}

func (m *AItemPriceResultInfo) GetSettlementPriceCurrency() string {
	if m != nil && m.SettlementPriceCurrency != nil {
		return *m.SettlementPriceCurrency
	}
	return ""
}

func (m *AItemPriceResultInfo) GetPromotionPrice() int64 {
	if m != nil && m.PromotionPrice != nil {
		return *m.PromotionPrice
	}
	return 0
}

func (m *AItemPriceResultInfo) GetSnap() *CbSipPriceFactorSnap {
	if m != nil {
		return m.Snap
	}
	return nil
}

type CbSipPriceFactorSnap struct {
	Weight           *float64 `protobuf:"fixed64,1,opt,name=weight" json:"weight"`
	CountryMargin    *float64 `protobuf:"fixed64,2,opt,name=country_margin,json=countryMargin" json:"country_margin"`
	ShopMargin       *float64 `protobuf:"fixed64,3,opt,name=shop_margin,json=shopMargin" json:"shop_margin"`
	ItemMargin       *float64 `protobuf:"fixed64,4,opt,name=item_margin,json=itemMargin" json:"item_margin"`
	ExchangeRate     *float64 `protobuf:"fixed64,5,opt,name=exchange_rate,json=exchangeRate" json:"exchange_rate"`
	PriceRatio       *float64 `protobuf:"fixed64,6,opt,name=price_ratio,json=priceRatio" json:"price_ratio"`
	AffiHiddenPrice  *float64 `protobuf:"fixed64,7,opt,name=affi_hidden_price,json=affiHiddenPrice" json:"affi_hidden_price"`
	SrcCurrency      *string  `protobuf:"bytes,8,opt,name=src_currency,json=srcCurrency" json:"src_currency"`
	ServiceFee       *float64 `protobuf:"fixed64,9,opt,name=service_fee,json=serviceFee" json:"service_fee"`
	CommissionFee    *float64 `protobuf:"fixed64,10,opt,name=commission_fee,json=commissionFee" json:"commission_fee"`
	HandlingFee      *float64 `protobuf:"fixed64,11,opt,name=handling_fee,json=handlingFee" json:"handling_fee"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CbSipPriceFactorSnap) Reset()         { *m = CbSipPriceFactorSnap{} }
func (m *CbSipPriceFactorSnap) String() string { return proto.CompactTextString(m) }
func (*CbSipPriceFactorSnap) ProtoMessage()    {}
func (*CbSipPriceFactorSnap) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{60}
}

func (m *CbSipPriceFactorSnap) GetWeight() float64 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return 0
}

func (m *CbSipPriceFactorSnap) GetCountryMargin() float64 {
	if m != nil && m.CountryMargin != nil {
		return *m.CountryMargin
	}
	return 0
}

func (m *CbSipPriceFactorSnap) GetShopMargin() float64 {
	if m != nil && m.ShopMargin != nil {
		return *m.ShopMargin
	}
	return 0
}

func (m *CbSipPriceFactorSnap) GetItemMargin() float64 {
	if m != nil && m.ItemMargin != nil {
		return *m.ItemMargin
	}
	return 0
}

func (m *CbSipPriceFactorSnap) GetExchangeRate() float64 {
	if m != nil && m.ExchangeRate != nil {
		return *m.ExchangeRate
	}
	return 0
}

func (m *CbSipPriceFactorSnap) GetPriceRatio() float64 {
	if m != nil && m.PriceRatio != nil {
		return *m.PriceRatio
	}
	return 0
}

func (m *CbSipPriceFactorSnap) GetAffiHiddenPrice() float64 {
	if m != nil && m.AffiHiddenPrice != nil {
		return *m.AffiHiddenPrice
	}
	return 0
}

func (m *CbSipPriceFactorSnap) GetSrcCurrency() string {
	if m != nil && m.SrcCurrency != nil {
		return *m.SrcCurrency
	}
	return ""
}

func (m *CbSipPriceFactorSnap) GetServiceFee() float64 {
	if m != nil && m.ServiceFee != nil {
		return *m.ServiceFee
	}
	return 0
}

func (m *CbSipPriceFactorSnap) GetCommissionFee() float64 {
	if m != nil && m.CommissionFee != nil {
		return *m.CommissionFee
	}
	return 0
}

func (m *CbSipPriceFactorSnap) GetHandlingFee() float64 {
	if m != nil && m.HandlingFee != nil {
		return *m.HandlingFee
	}
	return 0
}

type CalculatePriceForCbscRequest struct {
	MerchantId       *uint64                   `protobuf:"varint,1,opt,name=merchant_id,json=merchantId" json:"merchant_id"`
	IsMtskuToMpsku   *bool                     `protobuf:"varint,2,opt,name=is_mtsku_to_mpsku,json=isMtskuToMpsku" json:"is_mtsku_to_mpsku"`
	Queries          []*MtskuMpskuPriceQueryId `protobuf:"bytes,3,rep,name=queries" json:"queries"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *CalculatePriceForCbscRequest) Reset()         { *m = CalculatePriceForCbscRequest{} }
func (m *CalculatePriceForCbscRequest) String() string { return proto.CompactTextString(m) }
func (*CalculatePriceForCbscRequest) ProtoMessage()    {}
func (*CalculatePriceForCbscRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{61}
}

func (m *CalculatePriceForCbscRequest) GetMerchantId() uint64 {
	if m != nil && m.MerchantId != nil {
		return *m.MerchantId
	}
	return 0
}

func (m *CalculatePriceForCbscRequest) GetIsMtskuToMpsku() bool {
	if m != nil && m.IsMtskuToMpsku != nil {
		return *m.IsMtskuToMpsku
	}
	return false
}

func (m *CalculatePriceForCbscRequest) GetQueries() []*MtskuMpskuPriceQueryId {
	if m != nil {
		return m.Queries
	}
	return nil
}

type MtskuMpskuPriceQueryId struct {
	SrcPrice             *int64   `protobuf:"varint,1,opt,name=src_price,json=srcPrice" json:"src_price"`
	MpskuShopId          *uint64  `protobuf:"varint,2,opt,name=mpsku_shop_id,json=mpskuShopId" json:"mpsku_shop_id"`
	MpskuRegion          *string  `protobuf:"bytes,3,opt,name=mpsku_region,json=mpskuRegion" json:"mpsku_region"`
	MpskuItemId          *uint64  `protobuf:"varint,4,opt,name=mpsku_item_id,json=mpskuItemId" json:"mpsku_item_id"`
	Weight               *uint64  `protobuf:"varint,5,opt,name=weight" json:"weight"`
	LeafCategoryId       *uint64  `protobuf:"varint,6,opt,name=leaf_category_id,json=leafCategoryId" json:"leaf_category_id"`
	EnabledChannelIdList []uint32 `protobuf:"varint,7,rep,name=enabled_channel_id_list,json=enabledChannelIdList" json:"enabled_channel_id_list"`
	XXX_unrecognized     []byte   `json:"-"`
}

func (m *MtskuMpskuPriceQueryId) Reset()         { *m = MtskuMpskuPriceQueryId{} }
func (m *MtskuMpskuPriceQueryId) String() string { return proto.CompactTextString(m) }
func (*MtskuMpskuPriceQueryId) ProtoMessage()    {}
func (*MtskuMpskuPriceQueryId) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{62}
}

func (m *MtskuMpskuPriceQueryId) GetSrcPrice() int64 {
	if m != nil && m.SrcPrice != nil {
		return *m.SrcPrice
	}
	return 0
}

func (m *MtskuMpskuPriceQueryId) GetMpskuShopId() uint64 {
	if m != nil && m.MpskuShopId != nil {
		return *m.MpskuShopId
	}
	return 0
}

func (m *MtskuMpskuPriceQueryId) GetMpskuRegion() string {
	if m != nil && m.MpskuRegion != nil {
		return *m.MpskuRegion
	}
	return ""
}

func (m *MtskuMpskuPriceQueryId) GetMpskuItemId() uint64 {
	if m != nil && m.MpskuItemId != nil {
		return *m.MpskuItemId
	}
	return 0
}

func (m *MtskuMpskuPriceQueryId) GetWeight() uint64 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return 0
}

func (m *MtskuMpskuPriceQueryId) GetLeafCategoryId() uint64 {
	if m != nil && m.LeafCategoryId != nil {
		return *m.LeafCategoryId
	}
	return 0
}

func (m *MtskuMpskuPriceQueryId) GetEnabledChannelIdList() []uint32 {
	if m != nil {
		return m.EnabledChannelIdList
	}
	return nil
}

type CalculatePriceForCbscResponse struct {
	DebugMsg         *string                     `protobuf:"bytes,1,opt,name=debug_msg,json=debugMsg" json:"debug_msg"`
	Results          []*MtskuMpskuPriceQueryInfo `protobuf:"bytes,2,rep,name=results" json:"results"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *CalculatePriceForCbscResponse) Reset()         { *m = CalculatePriceForCbscResponse{} }
func (m *CalculatePriceForCbscResponse) String() string { return proto.CompactTextString(m) }
func (*CalculatePriceForCbscResponse) ProtoMessage()    {}
func (*CalculatePriceForCbscResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{63}
}

func (m *CalculatePriceForCbscResponse) GetDebugMsg() string {
	if m != nil && m.DebugMsg != nil {
		return *m.DebugMsg
	}
	return ""
}

func (m *CalculatePriceForCbscResponse) GetResults() []*MtskuMpskuPriceQueryInfo {
	if m != nil {
		return m.Results
	}
	return nil
}

type MtskuMpskuPriceQueryInfo struct {
	ErrCode          *uint32 `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code"`
	ErrMsg           *string `protobuf:"bytes,2,opt,name=err_msg,json=errMsg" json:"err_msg"`
	DstPrice         *int64  `protobuf:"varint,3,opt,name=dst_price,json=dstPrice" json:"dst_price"`
	HidePrice        *int64  `protobuf:"varint,4,opt,name=hide_price,json=hidePrice" json:"hide_price"`
	HidePriceError   *int32  `protobuf:"varint,5,opt,name=hide_price_error,json=hidePriceError" json:"hide_price_error"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MtskuMpskuPriceQueryInfo) Reset()         { *m = MtskuMpskuPriceQueryInfo{} }
func (m *MtskuMpskuPriceQueryInfo) String() string { return proto.CompactTextString(m) }
func (*MtskuMpskuPriceQueryInfo) ProtoMessage()    {}
func (*MtskuMpskuPriceQueryInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{64}
}

func (m *MtskuMpskuPriceQueryInfo) GetErrCode() uint32 {
	if m != nil && m.ErrCode != nil {
		return *m.ErrCode
	}
	return 0
}

func (m *MtskuMpskuPriceQueryInfo) GetErrMsg() string {
	if m != nil && m.ErrMsg != nil {
		return *m.ErrMsg
	}
	return ""
}

func (m *MtskuMpskuPriceQueryInfo) GetDstPrice() int64 {
	if m != nil && m.DstPrice != nil {
		return *m.DstPrice
	}
	return 0
}

func (m *MtskuMpskuPriceQueryInfo) GetHidePrice() int64 {
	if m != nil && m.HidePrice != nil {
		return *m.HidePrice
	}
	return 0
}

func (m *MtskuMpskuPriceQueryInfo) GetHidePriceError() int32 {
	if m != nil && m.HidePriceError != nil {
		return *m.HidePriceError
	}
	return 0
}

type UpdateProfitRateLimitRequest struct {
	MerchantRegion *string `protobuf:"bytes,1,opt,name=merchant_region,json=merchantRegion" json:"merchant_region"`
	Region         *string `protobuf:"bytes,2,opt,name=region" json:"region"`
	// 3 and 4 must have at least one provided
	ProfitRateMin    *float64 `protobuf:"fixed64,3,opt,name=profit_rate_min,json=profitRateMin" json:"profit_rate_min"`
	ProfitRateMax    *float64 `protobuf:"fixed64,4,opt,name=profit_rate_max,json=profitRateMax" json:"profit_rate_max"`
	Operator         *string  `protobuf:"bytes,5,opt,name=operator" json:"operator"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *UpdateProfitRateLimitRequest) Reset()         { *m = UpdateProfitRateLimitRequest{} }
func (m *UpdateProfitRateLimitRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateProfitRateLimitRequest) ProtoMessage()    {}
func (*UpdateProfitRateLimitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{65}
}

func (m *UpdateProfitRateLimitRequest) GetMerchantRegion() string {
	if m != nil && m.MerchantRegion != nil {
		return *m.MerchantRegion
	}
	return ""
}

func (m *UpdateProfitRateLimitRequest) GetRegion() string {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return ""
}

func (m *UpdateProfitRateLimitRequest) GetProfitRateMin() float64 {
	if m != nil && m.ProfitRateMin != nil {
		return *m.ProfitRateMin
	}
	return 0
}

func (m *UpdateProfitRateLimitRequest) GetProfitRateMax() float64 {
	if m != nil && m.ProfitRateMax != nil {
		return *m.ProfitRateMax
	}
	return 0
}

func (m *UpdateProfitRateLimitRequest) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

type UpdateProfitRateLimitResponse struct {
	DebugMsg         *string `protobuf:"bytes,1,opt,name=debug_msg,json=debugMsg" json:"debug_msg"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UpdateProfitRateLimitResponse) Reset()         { *m = UpdateProfitRateLimitResponse{} }
func (m *UpdateProfitRateLimitResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateProfitRateLimitResponse) ProtoMessage()    {}
func (*UpdateProfitRateLimitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{66}
}

func (m *UpdateProfitRateLimitResponse) GetDebugMsg() string {
	if m != nil && m.DebugMsg != nil {
		return *m.DebugMsg
	}
	return ""
}

type GetProfitRateLimitListRequest struct {
	MerchantRegion   *string `protobuf:"bytes,1,opt,name=merchant_region,json=merchantRegion" json:"merchant_region"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetProfitRateLimitListRequest) Reset()         { *m = GetProfitRateLimitListRequest{} }
func (m *GetProfitRateLimitListRequest) String() string { return proto.CompactTextString(m) }
func (*GetProfitRateLimitListRequest) ProtoMessage()    {}
func (*GetProfitRateLimitListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{67}
}

func (m *GetProfitRateLimitListRequest) GetMerchantRegion() string {
	if m != nil && m.MerchantRegion != nil {
		return *m.MerchantRegion
	}
	return ""
}

type GetProfitRateLimitListResponse struct {
	DebugMsg         *string            `protobuf:"bytes,1,opt,name=debug_msg,json=debugMsg" json:"debug_msg"`
	Data             []*ProfitRateLimit `protobuf:"bytes,2,rep,name=data" json:"data"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *GetProfitRateLimitListResponse) Reset()         { *m = GetProfitRateLimitListResponse{} }
func (m *GetProfitRateLimitListResponse) String() string { return proto.CompactTextString(m) }
func (*GetProfitRateLimitListResponse) ProtoMessage()    {}
func (*GetProfitRateLimitListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{68}
}

func (m *GetProfitRateLimitListResponse) GetDebugMsg() string {
	if m != nil && m.DebugMsg != nil {
		return *m.DebugMsg
	}
	return ""
}

func (m *GetProfitRateLimitListResponse) GetData() []*ProfitRateLimit {
	if m != nil {
		return m.Data
	}
	return nil
}

type ProfitRateLimit struct {
	Id               *uint64  `protobuf:"varint,1,opt,name=id" json:"id"`
	Region           *string  `protobuf:"bytes,2,opt,name=region" json:"region"`
	ProfitRateMin    *float64 `protobuf:"fixed64,3,opt,name=profit_rate_min,json=profitRateMin" json:"profit_rate_min"`
	ProfitRateMax    *float64 `protobuf:"fixed64,4,opt,name=profit_rate_max,json=profitRateMax" json:"profit_rate_max"`
	Operator         *string  `protobuf:"bytes,5,opt,name=operator" json:"operator"`
	UpdateTime       *uint32  `protobuf:"varint,6,opt,name=update_time,json=updateTime" json:"update_time"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ProfitRateLimit) Reset()         { *m = ProfitRateLimit{} }
func (m *ProfitRateLimit) String() string { return proto.CompactTextString(m) }
func (*ProfitRateLimit) ProtoMessage()    {}
func (*ProfitRateLimit) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{69}
}

func (m *ProfitRateLimit) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ProfitRateLimit) GetRegion() string {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return ""
}

func (m *ProfitRateLimit) GetProfitRateMin() float64 {
	if m != nil && m.ProfitRateMin != nil {
		return *m.ProfitRateMin
	}
	return 0
}

func (m *ProfitRateLimit) GetProfitRateMax() float64 {
	if m != nil && m.ProfitRateMax != nil {
		return *m.ProfitRateMax
	}
	return 0
}

func (m *ProfitRateLimit) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *ProfitRateLimit) GetUpdateTime() uint32 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

// get_shop_margin
type GetAShopMarginRequest struct {
	ShopIds          []uint64 `protobuf:"varint,1,rep,name=shop_ids,json=shopIds" json:"shop_ids"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *GetAShopMarginRequest) Reset()         { *m = GetAShopMarginRequest{} }
func (m *GetAShopMarginRequest) String() string { return proto.CompactTextString(m) }
func (*GetAShopMarginRequest) ProtoMessage()    {}
func (*GetAShopMarginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{70}
}

func (m *GetAShopMarginRequest) GetShopIds() []uint64 {
	if m != nil {
		return m.ShopIds
	}
	return nil
}

type GetAShopMarginResponse struct {
	DebugMsg         *string       `protobuf:"bytes,1,opt,name=debug_msg,json=debugMsg" json:"debug_msg"`
	AShopMargins     []*ShopMargin `protobuf:"bytes,2,rep,name=a_shop_margins,json=aShopMargins" json:"a_shop_margins"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *GetAShopMarginResponse) Reset()         { *m = GetAShopMarginResponse{} }
func (m *GetAShopMarginResponse) String() string { return proto.CompactTextString(m) }
func (*GetAShopMarginResponse) ProtoMessage()    {}
func (*GetAShopMarginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{71}
}

func (m *GetAShopMarginResponse) GetDebugMsg() string {
	if m != nil && m.DebugMsg != nil {
		return *m.DebugMsg
	}
	return ""
}

func (m *GetAShopMarginResponse) GetAShopMargins() []*ShopMargin {
	if m != nil {
		return m.AShopMargins
	}
	return nil
}

type ShopMargin struct {
	ShopId           *uint64 `protobuf:"varint,1,opt,name=shop_id,json=shopId" json:"shop_id"`
	Margin           *int64  `protobuf:"varint,2,opt,name=margin" json:"margin"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ShopMargin) Reset()         { *m = ShopMargin{} }
func (m *ShopMargin) String() string { return proto.CompactTextString(m) }
func (*ShopMargin) ProtoMessage()    {}
func (*ShopMargin) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{72}
}

func (m *ShopMargin) GetShopId() uint64 {
	if m != nil && m.ShopId != nil {
		return *m.ShopId
	}
	return 0
}

func (m *ShopMargin) GetMargin() int64 {
	if m != nil && m.Margin != nil {
		return *m.Margin
	}
	return 0
}

// sip_rate_info
type GetAShopPriceRatioRequest struct {
	ShopIds          []uint64 `protobuf:"varint,1,rep,name=shop_ids,json=shopIds" json:"shop_ids"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *GetAShopPriceRatioRequest) Reset()         { *m = GetAShopPriceRatioRequest{} }
func (m *GetAShopPriceRatioRequest) String() string { return proto.CompactTextString(m) }
func (*GetAShopPriceRatioRequest) ProtoMessage()    {}
func (*GetAShopPriceRatioRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{73}
}

func (m *GetAShopPriceRatioRequest) GetShopIds() []uint64 {
	if m != nil {
		return m.ShopIds
	}
	return nil
}

type GetAShopPriceRatioResponse struct {
	DebugMsg         *string           `protobuf:"bytes,1,opt,name=debug_msg,json=debugMsg" json:"debug_msg"`
	AShopPriceRatios []*ShopPriceRatio `protobuf:"bytes,2,rep,name=a_shop_price_ratios,json=aShopPriceRatios" json:"a_shop_price_ratios"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *GetAShopPriceRatioResponse) Reset()         { *m = GetAShopPriceRatioResponse{} }
func (m *GetAShopPriceRatioResponse) String() string { return proto.CompactTextString(m) }
func (*GetAShopPriceRatioResponse) ProtoMessage()    {}
func (*GetAShopPriceRatioResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{74}
}

func (m *GetAShopPriceRatioResponse) GetDebugMsg() string {
	if m != nil && m.DebugMsg != nil {
		return *m.DebugMsg
	}
	return ""
}

func (m *GetAShopPriceRatioResponse) GetAShopPriceRatios() []*ShopPriceRatio {
	if m != nil {
		return m.AShopPriceRatios
	}
	return nil
}

type ShopPriceRatio struct {
	ShopId           *uint64 `protobuf:"varint,1,opt,name=shop_id,json=shopId" json:"shop_id"`
	PriceRatio       *int64  `protobuf:"varint,2,opt,name=price_ratio,json=priceRatio" json:"price_ratio"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ShopPriceRatio) Reset()         { *m = ShopPriceRatio{} }
func (m *ShopPriceRatio) String() string { return proto.CompactTextString(m) }
func (*ShopPriceRatio) ProtoMessage()    {}
func (*ShopPriceRatio) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{75}
}

func (m *ShopPriceRatio) GetShopId() uint64 {
	if m != nil && m.ShopId != nil {
		return *m.ShopId
	}
	return 0
}

func (m *ShopPriceRatio) GetPriceRatio() int64 {
	if m != nil && m.PriceRatio != nil {
		return *m.PriceRatio
	}
	return 0
}

// get_item_margin
type GetAItemMarginRequest struct {
	ShopIdToItemIdsList []*ShopIDToItemIDs `protobuf:"bytes,1,rep,name=shop_id_to_item_ids_list,json=shopIdToItemIdsList" json:"shop_id_to_item_ids_list"`
	XXX_unrecognized    []byte             `json:"-"`
}

func (m *GetAItemMarginRequest) Reset()         { *m = GetAItemMarginRequest{} }
func (m *GetAItemMarginRequest) String() string { return proto.CompactTextString(m) }
func (*GetAItemMarginRequest) ProtoMessage()    {}
func (*GetAItemMarginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{76}
}

func (m *GetAItemMarginRequest) GetShopIdToItemIdsList() []*ShopIDToItemIDs {
	if m != nil {
		return m.ShopIdToItemIdsList
	}
	return nil
}

type ShopIDToItemIDs struct {
	ShopId           *uint64  `protobuf:"varint,1,opt,name=shop_id,json=shopId" json:"shop_id"`
	ItemIds          []uint64 `protobuf:"varint,2,rep,name=item_ids,json=itemIds" json:"item_ids"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ShopIDToItemIDs) Reset()         { *m = ShopIDToItemIDs{} }
func (m *ShopIDToItemIDs) String() string { return proto.CompactTextString(m) }
func (*ShopIDToItemIDs) ProtoMessage()    {}
func (*ShopIDToItemIDs) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{77}
}

func (m *ShopIDToItemIDs) GetShopId() uint64 {
	if m != nil && m.ShopId != nil {
		return *m.ShopId
	}
	return 0
}

func (m *ShopIDToItemIDs) GetItemIds() []uint64 {
	if m != nil {
		return m.ItemIds
	}
	return nil
}

type GetAItemMarginResponse struct {
	DebugMsg         *string       `protobuf:"bytes,1,opt,name=debug_msg,json=debugMsg" json:"debug_msg"`
	AItemMargins     []*ItemMargin `protobuf:"bytes,2,rep,name=a_item_margins,json=aItemMargins" json:"a_item_margins"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *GetAItemMarginResponse) Reset()         { *m = GetAItemMarginResponse{} }
func (m *GetAItemMarginResponse) String() string { return proto.CompactTextString(m) }
func (*GetAItemMarginResponse) ProtoMessage()    {}
func (*GetAItemMarginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{78}
}

func (m *GetAItemMarginResponse) GetDebugMsg() string {
	if m != nil && m.DebugMsg != nil {
		return *m.DebugMsg
	}
	return ""
}

func (m *GetAItemMarginResponse) GetAItemMargins() []*ItemMargin {
	if m != nil {
		return m.AItemMargins
	}
	return nil
}

type ItemMargin struct {
	ItemId           *uint64 `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id"`
	ItemMargin       *int64  `protobuf:"varint,2,opt,name=item_margin,json=itemMargin" json:"item_margin"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ItemMargin) Reset()         { *m = ItemMargin{} }
func (m *ItemMargin) String() string { return proto.CompactTextString(m) }
func (*ItemMargin) ProtoMessage()    {}
func (*ItemMargin) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{79}
}

func (m *ItemMargin) GetItemId() uint64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *ItemMargin) GetItemMargin() int64 {
	if m != nil && m.ItemMargin != nil {
		return *m.ItemMargin
	}
	return 0
}

// get_aitem_real_weight
type GetAItemRealWeightRequest struct {
	ShopId           *uint64 `protobuf:"varint,1,opt,name=shop_id,json=shopId" json:"shop_id"`
	ItemId           *uint64 `protobuf:"varint,2,opt,name=item_id,json=itemId" json:"item_id"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetAItemRealWeightRequest) Reset()         { *m = GetAItemRealWeightRequest{} }
func (m *GetAItemRealWeightRequest) String() string { return proto.CompactTextString(m) }
func (*GetAItemRealWeightRequest) ProtoMessage()    {}
func (*GetAItemRealWeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{80}
}

func (m *GetAItemRealWeightRequest) GetShopId() uint64 {
	if m != nil && m.ShopId != nil {
		return *m.ShopId
	}
	return 0
}

func (m *GetAItemRealWeightRequest) GetItemId() uint64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

type GetAItemRealWeightResponse struct {
	DebugMsg         *string `protobuf:"bytes,1,opt,name=debug_msg,json=debugMsg" json:"debug_msg"`
	AItemRealWeight  *int64  `protobuf:"varint,2,opt,name=a_item_real_weight,json=aItemRealWeight" json:"a_item_real_weight"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetAItemRealWeightResponse) Reset()         { *m = GetAItemRealWeightResponse{} }
func (m *GetAItemRealWeightResponse) String() string { return proto.CompactTextString(m) }
func (*GetAItemRealWeightResponse) ProtoMessage()    {}
func (*GetAItemRealWeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{81}
}

func (m *GetAItemRealWeightResponse) GetDebugMsg() string {
	if m != nil && m.DebugMsg != nil {
		return *m.DebugMsg
	}
	return ""
}

func (m *GetAItemRealWeightResponse) GetAItemRealWeight() int64 {
	if m != nil && m.AItemRealWeight != nil {
		return *m.AItemRealWeight
	}
	return 0
}

type SetAShopMarginRequest struct {
	ShopId           *uint64 `protobuf:"varint,1,opt,name=shop_id,json=shopId" json:"shop_id"`
	Margin           *int64  `protobuf:"varint,2,opt,name=margin" json:"margin"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SetAShopMarginRequest) Reset()         { *m = SetAShopMarginRequest{} }
func (m *SetAShopMarginRequest) String() string { return proto.CompactTextString(m) }
func (*SetAShopMarginRequest) ProtoMessage()    {}
func (*SetAShopMarginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{82}
}

func (m *SetAShopMarginRequest) GetShopId() uint64 {
	if m != nil && m.ShopId != nil {
		return *m.ShopId
	}
	return 0
}

func (m *SetAShopMarginRequest) GetMargin() int64 {
	if m != nil && m.Margin != nil {
		return *m.Margin
	}
	return 0
}

type SetAShopMarginResponse struct {
	DebugMsg         *string `protobuf:"bytes,1,opt,name=debug_msg,json=debugMsg" json:"debug_msg"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SetAShopMarginResponse) Reset()         { *m = SetAShopMarginResponse{} }
func (m *SetAShopMarginResponse) String() string { return proto.CompactTextString(m) }
func (*SetAShopMarginResponse) ProtoMessage()    {}
func (*SetAShopMarginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{83}
}

func (m *SetAShopMarginResponse) GetDebugMsg() string {
	if m != nil && m.DebugMsg != nil {
		return *m.DebugMsg
	}
	return ""
}

type ShopPriceRatioSetting struct {
	ShopId           *uint64 `protobuf:"varint,1,opt,name=shop_id,json=shopId" json:"shop_id"`
	Region           *string `protobuf:"bytes,2,opt,name=region" json:"region"`
	PriceRatio       *int64  `protobuf:"varint,3,opt,name=price_ratio,json=priceRatio" json:"price_ratio"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ShopPriceRatioSetting) Reset()         { *m = ShopPriceRatioSetting{} }
func (m *ShopPriceRatioSetting) String() string { return proto.CompactTextString(m) }
func (*ShopPriceRatioSetting) ProtoMessage()    {}
func (*ShopPriceRatioSetting) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{84}
}

func (m *ShopPriceRatioSetting) GetShopId() uint64 {
	if m != nil && m.ShopId != nil {
		return *m.ShopId
	}
	return 0
}

func (m *ShopPriceRatioSetting) GetRegion() string {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return ""
}

func (m *ShopPriceRatioSetting) GetPriceRatio() int64 {
	if m != nil && m.PriceRatio != nil {
		return *m.PriceRatio
	}
	return 0
}

type SetAShopPriceRatioBatchResponse struct {
	DebugMsg         *string `protobuf:"bytes,1,opt,name=debug_msg,json=debugMsg" json:"debug_msg"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SetAShopPriceRatioBatchResponse) Reset()         { *m = SetAShopPriceRatioBatchResponse{} }
func (m *SetAShopPriceRatioBatchResponse) String() string { return proto.CompactTextString(m) }
func (*SetAShopPriceRatioBatchResponse) ProtoMessage()    {}
func (*SetAShopPriceRatioBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{85}
}

func (m *SetAShopPriceRatioBatchResponse) GetDebugMsg() string {
	if m != nil && m.DebugMsg != nil {
		return *m.DebugMsg
	}
	return ""
}

type SetAItemMarginRequest struct {
	AShopId          *uint64 `protobuf:"varint,1,opt,name=a_shop_id,json=aShopId" json:"a_shop_id"`
	AItemId          *uint64 `protobuf:"varint,2,opt,name=a_item_id,json=aItemId" json:"a_item_id"`
	AItemMargin      *int64  `protobuf:"varint,3,opt,name=a_item_margin,json=aItemMargin" json:"a_item_margin"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SetAItemMarginRequest) Reset()         { *m = SetAItemMarginRequest{} }
func (m *SetAItemMarginRequest) String() string { return proto.CompactTextString(m) }
func (*SetAItemMarginRequest) ProtoMessage()    {}
func (*SetAItemMarginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{86}
}

func (m *SetAItemMarginRequest) GetAShopId() uint64 {
	if m != nil && m.AShopId != nil {
		return *m.AShopId
	}
	return 0
}

func (m *SetAItemMarginRequest) GetAItemId() uint64 {
	if m != nil && m.AItemId != nil {
		return *m.AItemId
	}
	return 0
}

func (m *SetAItemMarginRequest) GetAItemMargin() int64 {
	if m != nil && m.AItemMargin != nil {
		return *m.AItemMargin
	}
	return 0
}

type SetAItemMarginResponse struct {
	DebugMsg         *string `protobuf:"bytes,1,opt,name=debug_msg,json=debugMsg" json:"debug_msg"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SetAItemMarginResponse) Reset()         { *m = SetAItemMarginResponse{} }
func (m *SetAItemMarginResponse) String() string { return proto.CompactTextString(m) }
func (*SetAItemMarginResponse) ProtoMessage()    {}
func (*SetAItemMarginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{87}
}

func (m *SetAItemMarginResponse) GetDebugMsg() string {
	if m != nil && m.DebugMsg != nil {
		return *m.DebugMsg
	}
	return ""
}

type SetAItemRealWeightRequest struct {
	AShopId          *uint64 `protobuf:"varint,1,opt,name=a_shop_id,json=aShopId" json:"a_shop_id"`
	AItemId          *uint64 `protobuf:"varint,2,opt,name=a_item_id,json=aItemId" json:"a_item_id"`
	AItemRealWeight  *int64  `protobuf:"varint,3,opt,name=a_item_real_weight,json=aItemRealWeight" json:"a_item_real_weight"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SetAItemRealWeightRequest) Reset()         { *m = SetAItemRealWeightRequest{} }
func (m *SetAItemRealWeightRequest) String() string { return proto.CompactTextString(m) }
func (*SetAItemRealWeightRequest) ProtoMessage()    {}
func (*SetAItemRealWeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{88}
}

func (m *SetAItemRealWeightRequest) GetAShopId() uint64 {
	if m != nil && m.AShopId != nil {
		return *m.AShopId
	}
	return 0
}

func (m *SetAItemRealWeightRequest) GetAItemId() uint64 {
	if m != nil && m.AItemId != nil {
		return *m.AItemId
	}
	return 0
}

func (m *SetAItemRealWeightRequest) GetAItemRealWeight() int64 {
	if m != nil && m.AItemRealWeight != nil {
		return *m.AItemRealWeight
	}
	return 0
}

type SetAItemRealWeightResponse struct {
	DebugMsg         *string `protobuf:"bytes,1,opt,name=debug_msg,json=debugMsg" json:"debug_msg"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SetAItemRealWeightResponse) Reset()         { *m = SetAItemRealWeightResponse{} }
func (m *SetAItemRealWeightResponse) String() string { return proto.CompactTextString(m) }
func (*SetAItemRealWeightResponse) ProtoMessage()    {}
func (*SetAItemRealWeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{89}
}

func (m *SetAItemRealWeightResponse) GetDebugMsg() string {
	if m != nil && m.DebugMsg != nil {
		return *m.DebugMsg
	}
	return ""
}

type GetPShopOpsPriceRatioSettingBatchRequest struct {
	PShopIds         []uint64 `protobuf:"varint,1,rep,name=p_shop_ids,json=pShopIds" json:"p_shop_ids"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *GetPShopOpsPriceRatioSettingBatchRequest) Reset() {
	*m = GetPShopOpsPriceRatioSettingBatchRequest{}
}
func (m *GetPShopOpsPriceRatioSettingBatchRequest) String() string { return proto.CompactTextString(m) }
func (*GetPShopOpsPriceRatioSettingBatchRequest) ProtoMessage()    {}
func (*GetPShopOpsPriceRatioSettingBatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{90}
}

func (m *GetPShopOpsPriceRatioSettingBatchRequest) GetPShopIds() []uint64 {
	if m != nil {
		return m.PShopIds
	}
	return nil
}

type PShopOpsPriceRatioSetting struct {
	IsControlledByOps *bool  `protobuf:"varint,1,opt,name=is_controlled_by_ops,json=isControlledByOps" json:"is_controlled_by_ops"`
	StartTime         *int64 `protobuf:"varint,2,opt,name=start_time,json=startTime" json:"start_time"`
	EndTime           *int64 `protobuf:"varint,3,opt,name=end_time,json=endTime" json:"end_time"`
	XXX_unrecognized  []byte `json:"-"`
}

func (m *PShopOpsPriceRatioSetting) Reset()         { *m = PShopOpsPriceRatioSetting{} }
func (m *PShopOpsPriceRatioSetting) String() string { return proto.CompactTextString(m) }
func (*PShopOpsPriceRatioSetting) ProtoMessage()    {}
func (*PShopOpsPriceRatioSetting) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{91}
}

func (m *PShopOpsPriceRatioSetting) GetIsControlledByOps() bool {
	if m != nil && m.IsControlledByOps != nil {
		return *m.IsControlledByOps
	}
	return false
}

func (m *PShopOpsPriceRatioSetting) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *PShopOpsPriceRatioSetting) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

type GetPShopOpsPriceRatioSettingBatchResponse struct {
	DebugMsg             *string                      `protobuf:"bytes,1,opt,name=debug_msg,json=debugMsg" json:"debug_msg"`
	OpsPriceRatioSetting []*PShopOpsPriceRatioSetting `protobuf:"bytes,2,rep,name=ops_price_ratio_setting,json=opsPriceRatioSetting" json:"ops_price_ratio_setting"`
	XXX_unrecognized     []byte                       `json:"-"`
}

func (m *GetPShopOpsPriceRatioSettingBatchResponse) Reset() {
	*m = GetPShopOpsPriceRatioSettingBatchResponse{}
}
func (m *GetPShopOpsPriceRatioSettingBatchResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetPShopOpsPriceRatioSettingBatchResponse) ProtoMessage() {}
func (*GetPShopOpsPriceRatioSettingBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{92}
}

func (m *GetPShopOpsPriceRatioSettingBatchResponse) GetDebugMsg() string {
	if m != nil && m.DebugMsg != nil {
		return *m.DebugMsg
	}
	return ""
}

func (m *GetPShopOpsPriceRatioSettingBatchResponse) GetOpsPriceRatioSetting() []*PShopOpsPriceRatioSetting {
	if m != nil {
		return m.OpsPriceRatioSetting
	}
	return nil
}

type SetPriceRatioRequest struct {
	PShopId                 *uint64                  `protobuf:"varint,1,opt,name=p_shop_id,json=pShopId" json:"p_shop_id"`
	AShopPriceRatioSettings []*ShopPriceRatioSetting `protobuf:"bytes,2,rep,name=a_shop_price_ratio_settings,json=aShopPriceRatioSettings" json:"a_shop_price_ratio_settings"`
	IsCreate                *bool                    `protobuf:"varint,3,opt,name=is_create,json=isCreate" json:"is_create"`
	IsOps                   *bool                    `protobuf:"varint,4,opt,name=is_ops,json=isOps" json:"is_ops"`
	SkipControlFlagCheck    *bool                    `protobuf:"varint,5,opt,name=skip_control_flag_check,json=skipControlFlagCheck" json:"skip_control_flag_check"`
	NeedSyncExistingData    *bool                    `protobuf:"varint,6,opt,name=need_sync_existing_data,json=needSyncExistingData" json:"need_sync_existing_data"`
	XXX_unrecognized        []byte                   `json:"-"`
}

func (m *SetPriceRatioRequest) Reset()         { *m = SetPriceRatioRequest{} }
func (m *SetPriceRatioRequest) String() string { return proto.CompactTextString(m) }
func (*SetPriceRatioRequest) ProtoMessage()    {}
func (*SetPriceRatioRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{93}
}

func (m *SetPriceRatioRequest) GetPShopId() uint64 {
	if m != nil && m.PShopId != nil {
		return *m.PShopId
	}
	return 0
}

func (m *SetPriceRatioRequest) GetAShopPriceRatioSettings() []*ShopPriceRatioSetting {
	if m != nil {
		return m.AShopPriceRatioSettings
	}
	return nil
}

func (m *SetPriceRatioRequest) GetIsCreate() bool {
	if m != nil && m.IsCreate != nil {
		return *m.IsCreate
	}
	return false
}

func (m *SetPriceRatioRequest) GetIsOps() bool {
	if m != nil && m.IsOps != nil {
		return *m.IsOps
	}
	return false
}

func (m *SetPriceRatioRequest) GetSkipControlFlagCheck() bool {
	if m != nil && m.SkipControlFlagCheck != nil {
		return *m.SkipControlFlagCheck
	}
	return false
}

func (m *SetPriceRatioRequest) GetNeedSyncExistingData() bool {
	if m != nil && m.NeedSyncExistingData != nil {
		return *m.NeedSyncExistingData
	}
	return false
}

type SetPriceRatioResponse struct {
	DebugMsg         *string `protobuf:"bytes,1,opt,name=debug_msg,json=debugMsg" json:"debug_msg"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SetPriceRatioResponse) Reset()         { *m = SetPriceRatioResponse{} }
func (m *SetPriceRatioResponse) String() string { return proto.CompactTextString(m) }
func (*SetPriceRatioResponse) ProtoMessage()    {}
func (*SetPriceRatioResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{94}
}

func (m *SetPriceRatioResponse) GetDebugMsg() string {
	if m != nil && m.DebugMsg != nil {
		return *m.DebugMsg
	}
	return ""
}

type GetCBSIPAShopSellerDiscountPromotionRequest struct {
	AShopId          *uint64 `protobuf:"varint,1,opt,name=a_shop_id,json=aShopId" json:"a_shop_id"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetCBSIPAShopSellerDiscountPromotionRequest) Reset() {
	*m = GetCBSIPAShopSellerDiscountPromotionRequest{}
}
func (m *GetCBSIPAShopSellerDiscountPromotionRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GetCBSIPAShopSellerDiscountPromotionRequest) ProtoMessage() {}
func (*GetCBSIPAShopSellerDiscountPromotionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{95}
}

func (m *GetCBSIPAShopSellerDiscountPromotionRequest) GetAShopId() uint64 {
	if m != nil && m.AShopId != nil {
		return *m.AShopId
	}
	return 0
}

type GetCBSIPAShopSellerDiscountPromotionResponse struct {
	DebugMsg         *string `protobuf:"bytes,1,opt,name=debug_msg,json=debugMsg" json:"debug_msg"`
	PromotionId      *uint64 `protobuf:"varint,2,opt,name=promotion_id,json=promotionId" json:"promotion_id"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetCBSIPAShopSellerDiscountPromotionResponse) Reset() {
	*m = GetCBSIPAShopSellerDiscountPromotionResponse{}
}
func (m *GetCBSIPAShopSellerDiscountPromotionResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetCBSIPAShopSellerDiscountPromotionResponse) ProtoMessage() {}
func (*GetCBSIPAShopSellerDiscountPromotionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{96}
}

func (m *GetCBSIPAShopSellerDiscountPromotionResponse) GetDebugMsg() string {
	if m != nil && m.DebugMsg != nil {
		return *m.DebugMsg
	}
	return ""
}

func (m *GetCBSIPAShopSellerDiscountPromotionResponse) GetPromotionId() uint64 {
	if m != nil && m.PromotionId != nil {
		return *m.PromotionId
	}
	return 0
}

type CreateCBSIPAShopSellerDiscountPromotionRequest struct {
	AShopId          *uint64 `protobuf:"varint,1,opt,name=a_shop_id,json=aShopId" json:"a_shop_id"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CreateCBSIPAShopSellerDiscountPromotionRequest) Reset() {
	*m = CreateCBSIPAShopSellerDiscountPromotionRequest{}
}
func (m *CreateCBSIPAShopSellerDiscountPromotionRequest) String() string {
	return proto.CompactTextString(m)
}
func (*CreateCBSIPAShopSellerDiscountPromotionRequest) ProtoMessage() {}
func (*CreateCBSIPAShopSellerDiscountPromotionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{97}
}

func (m *CreateCBSIPAShopSellerDiscountPromotionRequest) GetAShopId() uint64 {
	if m != nil && m.AShopId != nil {
		return *m.AShopId
	}
	return 0
}

type CreateCBSIPAShopSellerDiscountPromotionResponse struct {
	DebugMsg         *string `protobuf:"bytes,1,opt,name=debug_msg,json=debugMsg" json:"debug_msg"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CreateCBSIPAShopSellerDiscountPromotionResponse) Reset() {
	*m = CreateCBSIPAShopSellerDiscountPromotionResponse{}
}
func (m *CreateCBSIPAShopSellerDiscountPromotionResponse) String() string {
	return proto.CompactTextString(m)
}
func (*CreateCBSIPAShopSellerDiscountPromotionResponse) ProtoMessage() {}
func (*CreateCBSIPAShopSellerDiscountPromotionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPriceSyncPriceCalculation, []int{98}
}

func (m *CreateCBSIPAShopSellerDiscountPromotionResponse) GetDebugMsg() string {
	if m != nil && m.DebugMsg != nil {
		return *m.DebugMsg
	}
	return ""
}

func init() {
	proto.RegisterType((*Constant)(nil), "price.sync_price.calculation.Constant")
	proto.RegisterType((*CalcGlobalDiscountInfoByItemIdsRequest)(nil), "price.sync_price.calculation.CalcGlobalDiscountInfoByItemIdsRequest")
	proto.RegisterType((*GlobalDiscountQueryId)(nil), "price.sync_price.calculation.GlobalDiscountQueryId")
	proto.RegisterType((*CalcGlobalDiscountInfoByItemIdsResponse)(nil), "price.sync_price.calculation.CalcGlobalDiscountInfoByItemIdsResponse")
	proto.RegisterType((*GlobalDiscountInfo)(nil), "price.sync_price.calculation.GlobalDiscountInfo")
	proto.RegisterType((*ItemModelId)(nil), "price.sync_price.calculation.ItemModelId")
	proto.RegisterType((*CalcLocalSipOverseaDiscountPriceRequest)(nil), "price.sync_price.calculation.CalcLocalSipOverseaDiscountPriceRequest")
	proto.RegisterType((*CalcLocalSipOverseaDiscountPriceResponse)(nil), "price.sync_price.calculation.CalcLocalSipOverseaDiscountPriceResponse")
	proto.RegisterType((*LocalSIPAffiPriceResult)(nil), "price.sync_price.calculation.LocalSIPAffiPriceResult")
	proto.RegisterType((*GetCbSipAHiddenFeeConfigRequest)(nil), "price.sync_price.calculation.GetCbSipAHiddenFeeConfigRequest")
	proto.RegisterType((*GetCbSipAHiddenFeeConfigResponse)(nil), "price.sync_price.calculation.GetCbSipAHiddenFeeConfigResponse")
	proto.RegisterType((*AHiddenFeeRuleInfo)(nil), "price.sync_price.calculation.AHiddenFeeRuleInfo")
	proto.RegisterType((*AHiddenFeeRuleRow)(nil), "price.sync_price.calculation.AHiddenFeeRuleRow")
	proto.RegisterType((*GetCbSipRateConfigRequest)(nil), "price.sync_price.calculation.GetCbSipRateConfigRequest")
	proto.RegisterType((*GetCbSipRateConfigResponse)(nil), "price.sync_price.calculation.GetCbSipRateConfigResponse")
	proto.RegisterType((*GetCbSipShopLevelConfigRequest)(nil), "price.sync_price.calculation.GetCbSipShopLevelConfigRequest")
	proto.RegisterType((*GetCbSipShopLevelConfigResponse)(nil), "price.sync_price.calculation.GetCbSipShopLevelConfigResponse")
	proto.RegisterType((*CbSipAffiShopInfo)(nil), "price.sync_price.calculation.CbSipAffiShopInfo")
	proto.RegisterType((*GetCbSipRegionLevelConfigRequest)(nil), "price.sync_price.calculation.GetCbSipRegionLevelConfigRequest")
	proto.RegisterType((*GetCbSipRegionLevelConfigResponse)(nil), "price.sync_price.calculation.GetCbSipRegionLevelConfigResponse")
	proto.RegisterType((*CbSipRegionLevelExchangeRateConfig)(nil), "price.sync_price.calculation.CbSipRegionLevelExchangeRateConfig")
	proto.RegisterType((*ExchangeRateData)(nil), "price.sync_price.calculation.ExchangeRateData")
	proto.RegisterType((*CbSipRegionLevelCountryMarginConfig)(nil), "price.sync_price.calculation.CbSipRegionLevelCountryMarginConfig")
	proto.RegisterType((*CountryMarginData)(nil), "price.sync_price.calculation.CountryMarginData")
	proto.RegisterType((*GetLocalSipPriceFactorRequest)(nil), "price.sync_price.calculation.GetLocalSipPriceFactorRequest")
	proto.RegisterType((*RegionPair)(nil), "price.sync_price.calculation.RegionPair")
	proto.RegisterType((*GetLocalSipPriceFactorResponse)(nil), "price.sync_price.calculation.GetLocalSipPriceFactorResponse")
	proto.RegisterType((*LocalSipPriceFactorInfo)(nil), "price.sync_price.calculation.LocalSipPriceFactorInfo")
	proto.RegisterType((*LocalSipPriceFactorBasicInfo)(nil), "price.sync_price.calculation.LocalSipPriceFactorBasicInfo")
	proto.RegisterType((*LocalSipPriceFactorShippingFeeInfo)(nil), "price.sync_price.calculation.LocalSipPriceFactorShippingFeeInfo")
	proto.RegisterType((*LocalSipPriceFactorHiddenFeeInfo)(nil), "price.sync_price.calculation.LocalSipPriceFactorHiddenFeeInfo")
	proto.RegisterType((*LocalShippingFeeRule)(nil), "price.sync_price.calculation.LocalShippingFeeRule")
	proto.RegisterType((*GetCbscPriceFactorRequest)(nil), "price.sync_price.calculation.GetCbscPriceFactorRequest")
	proto.RegisterType((*GetCbscPriceFactorResponse)(nil), "price.sync_price.calculation.GetCbscPriceFactorResponse")
	proto.RegisterType((*CbscPriceFactor)(nil), "price.sync_price.calculation.CbscPriceFactor")
	proto.RegisterType((*CbscShopLevelFeeRate)(nil), "price.sync_price.calculation.CbscShopLevelFeeRate")
	proto.RegisterType((*CbscFeeRateLimit)(nil), "price.sync_price.calculation.CbscFeeRateLimit")
	proto.RegisterType((*CbscProfitRateLimit)(nil), "price.sync_price.calculation.CbscProfitRateLimit")
	proto.RegisterType((*CbscServiceFeeRateLimit)(nil), "price.sync_price.calculation.CbscServiceFeeRateLimit")
	proto.RegisterType((*CbscExchangeRate)(nil), "price.sync_price.calculation.CbscExchangeRate")
	proto.RegisterType((*SetCbscPriceFactorRequest)(nil), "price.sync_price.calculation.SetCbscPriceFactorRequest")
	proto.RegisterType((*SetCbscPriceFactorResponse)(nil), "price.sync_price.calculation.SetCbscPriceFactorResponse")
	proto.RegisterType((*ShopCbscPriceFactorSetting)(nil), "price.sync_price.calculation.ShopCbscPriceFactorSetting")
	proto.RegisterType((*ConvertCurrencyRequest)(nil), "price.sync_price.calculation.ConvertCurrencyRequest")
	proto.RegisterType((*ConvertCurrencyResponse)(nil), "price.sync_price.calculation.ConvertCurrencyResponse")
	proto.RegisterType((*CalculateAPriceByPItemForLocalSIPRequest)(nil), "price.sync_price.calculation.CalculateAPriceByPItemForLocalSIPRequest")
	proto.RegisterType((*LocalSipAPriceQueryId)(nil), "price.sync_price.calculation.LocalSipAPriceQueryId")
	proto.RegisterType((*CalculateAPriceByPItemForLocalSIPResponse)(nil), "price.sync_price.calculation.CalculateAPriceByPItemForLocalSIPResponse")
	proto.RegisterType((*ShopItemCustomizedOPL)(nil), "price.sync_price.calculation.ShopItemCustomizedOPL")
	proto.RegisterType((*LocalSipAPriceInfo)(nil), "price.sync_price.calculation.LocalSipAPriceInfo")
	proto.RegisterType((*LocalSipPriceFactorSnap)(nil), "price.sync_price.calculation.LocalSipPriceFactorSnap")
	proto.RegisterType((*CalculateSipItemPriceForCbSipRequest)(nil), "price.sync_price.calculation.CalculateSipItemPriceForCbSipRequest")
	proto.RegisterType((*SipItemPriceForCbSipQueryId)(nil), "price.sync_price.calculation.SipItemPriceForCbSipQueryId")
	proto.RegisterType((*CalculateSipItemPriceForCbSipResponse)(nil), "price.sync_price.calculation.CalculateSipItemPriceForCbSipResponse")
	proto.RegisterType((*CbSipItemPriceInfo)(nil), "price.sync_price.calculation.CbSipItemPriceInfo")
	proto.RegisterType((*CalculateAPriceByPItemForCBSIPRequest)(nil), "price.sync_price.calculation.CalculateAPriceByPItemForCBSIPRequest")
	proto.RegisterType((*AItemCBSIPQueryId)(nil), "price.sync_price.calculation.AItemCBSIPQueryId")
	proto.RegisterType((*CalculateAPriceByPItemForCBSIPResponse)(nil), "price.sync_price.calculation.CalculateAPriceByPItemForCBSIPResponse")
	proto.RegisterType((*CustomizedOPL)(nil), "price.sync_price.calculation.CustomizedOPL")
	proto.RegisterType((*AItemPriceResultInfo)(nil), "price.sync_price.calculation.AItemPriceResultInfo")
	proto.RegisterType((*CbSipPriceFactorSnap)(nil), "price.sync_price.calculation.CbSipPriceFactorSnap")
	proto.RegisterType((*CalculatePriceForCbscRequest)(nil), "price.sync_price.calculation.CalculatePriceForCbscRequest")
	proto.RegisterType((*MtskuMpskuPriceQueryId)(nil), "price.sync_price.calculation.MtskuMpskuPriceQueryId")
	proto.RegisterType((*CalculatePriceForCbscResponse)(nil), "price.sync_price.calculation.CalculatePriceForCbscResponse")
	proto.RegisterType((*MtskuMpskuPriceQueryInfo)(nil), "price.sync_price.calculation.MtskuMpskuPriceQueryInfo")
	proto.RegisterType((*UpdateProfitRateLimitRequest)(nil), "price.sync_price.calculation.UpdateProfitRateLimitRequest")
	proto.RegisterType((*UpdateProfitRateLimitResponse)(nil), "price.sync_price.calculation.UpdateProfitRateLimitResponse")
	proto.RegisterType((*GetProfitRateLimitListRequest)(nil), "price.sync_price.calculation.GetProfitRateLimitListRequest")
	proto.RegisterType((*GetProfitRateLimitListResponse)(nil), "price.sync_price.calculation.GetProfitRateLimitListResponse")
	proto.RegisterType((*ProfitRateLimit)(nil), "price.sync_price.calculation.ProfitRateLimit")
	proto.RegisterType((*GetAShopMarginRequest)(nil), "price.sync_price.calculation.GetAShopMarginRequest")
	proto.RegisterType((*GetAShopMarginResponse)(nil), "price.sync_price.calculation.GetAShopMarginResponse")
	proto.RegisterType((*ShopMargin)(nil), "price.sync_price.calculation.ShopMargin")
	proto.RegisterType((*GetAShopPriceRatioRequest)(nil), "price.sync_price.calculation.GetAShopPriceRatioRequest")
	proto.RegisterType((*GetAShopPriceRatioResponse)(nil), "price.sync_price.calculation.GetAShopPriceRatioResponse")
	proto.RegisterType((*ShopPriceRatio)(nil), "price.sync_price.calculation.ShopPriceRatio")
	proto.RegisterType((*GetAItemMarginRequest)(nil), "price.sync_price.calculation.GetAItemMarginRequest")
	proto.RegisterType((*ShopIDToItemIDs)(nil), "price.sync_price.calculation.ShopIDToItemIDs")
	proto.RegisterType((*GetAItemMarginResponse)(nil), "price.sync_price.calculation.GetAItemMarginResponse")
	proto.RegisterType((*ItemMargin)(nil), "price.sync_price.calculation.ItemMargin")
	proto.RegisterType((*GetAItemRealWeightRequest)(nil), "price.sync_price.calculation.GetAItemRealWeightRequest")
	proto.RegisterType((*GetAItemRealWeightResponse)(nil), "price.sync_price.calculation.GetAItemRealWeightResponse")
	proto.RegisterType((*SetAShopMarginRequest)(nil), "price.sync_price.calculation.SetAShopMarginRequest")
	proto.RegisterType((*SetAShopMarginResponse)(nil), "price.sync_price.calculation.SetAShopMarginResponse")
	proto.RegisterType((*ShopPriceRatioSetting)(nil), "price.sync_price.calculation.ShopPriceRatioSetting")
	proto.RegisterType((*SetAShopPriceRatioBatchResponse)(nil), "price.sync_price.calculation.SetAShopPriceRatioBatchResponse")
	proto.RegisterType((*SetAItemMarginRequest)(nil), "price.sync_price.calculation.SetAItemMarginRequest")
	proto.RegisterType((*SetAItemMarginResponse)(nil), "price.sync_price.calculation.SetAItemMarginResponse")
	proto.RegisterType((*SetAItemRealWeightRequest)(nil), "price.sync_price.calculation.SetAItemRealWeightRequest")
	proto.RegisterType((*SetAItemRealWeightResponse)(nil), "price.sync_price.calculation.SetAItemRealWeightResponse")
	proto.RegisterType((*GetPShopOpsPriceRatioSettingBatchRequest)(nil), "price.sync_price.calculation.GetPShopOpsPriceRatioSettingBatchRequest")
	proto.RegisterType((*PShopOpsPriceRatioSetting)(nil), "price.sync_price.calculation.PShopOpsPriceRatioSetting")
	proto.RegisterType((*GetPShopOpsPriceRatioSettingBatchResponse)(nil), "price.sync_price.calculation.GetPShopOpsPriceRatioSettingBatchResponse")
	proto.RegisterType((*SetPriceRatioRequest)(nil), "price.sync_price.calculation.SetPriceRatioRequest")
	proto.RegisterType((*SetPriceRatioResponse)(nil), "price.sync_price.calculation.SetPriceRatioResponse")
	proto.RegisterType((*GetCBSIPAShopSellerDiscountPromotionRequest)(nil), "price.sync_price.calculation.GetCBSIPAShopSellerDiscountPromotionRequest")
	proto.RegisterType((*GetCBSIPAShopSellerDiscountPromotionResponse)(nil), "price.sync_price.calculation.GetCBSIPAShopSellerDiscountPromotionResponse")
	proto.RegisterType((*CreateCBSIPAShopSellerDiscountPromotionRequest)(nil), "price.sync_price.calculation.CreateCBSIPAShopSellerDiscountPromotionRequest")
	proto.RegisterType((*CreateCBSIPAShopSellerDiscountPromotionResponse)(nil), "price.sync_price.calculation.CreateCBSIPAShopSellerDiscountPromotionResponse")
	proto.RegisterEnum("price.sync_price.calculation.Constant_ErrorCode", Constant_ErrorCode_name, Constant_ErrorCode_value)
	proto.RegisterEnum("price.sync_price.calculation.Constant_GlobalDiscountInputType", Constant_GlobalDiscountInputType_name, Constant_GlobalDiscountInputType_value)
	proto.RegisterEnum("price.sync_price.calculation.Constant_CalcErr", Constant_CalcErr_name, Constant_CalcErr_value)
	proto.RegisterEnum("price.sync_price.calculation.Constant_LocalSipInfoType", Constant_LocalSipInfoType_name, Constant_LocalSipInfoType_value)
	proto.RegisterEnum("price.sync_price.calculation.Constant_CbSipRegionLevelInfoType", Constant_CbSipRegionLevelInfoType_name, Constant_CbSipRegionLevelInfoType_value)
	proto.RegisterEnum("price.sync_price.calculation.Constant_CbSipRateInfoType", Constant_CbSipRateInfoType_name, Constant_CbSipRateInfoType_value)
	proto.RegisterEnum("price.sync_price.calculation.Constant_CbSipAHiddenFeeInfoType", Constant_CbSipAHiddenFeeInfoType_name, Constant_CbSipAHiddenFeeInfoType_value)
	proto.RegisterEnum("price.sync_price.calculation.Constant_ExchangeRateSource", Constant_ExchangeRateSource_name, Constant_ExchangeRateSource_value)
	proto.RegisterEnum("price.sync_price.calculation.Constant_PriceSyncToggle", Constant_PriceSyncToggle_name, Constant_PriceSyncToggle_value)
	proto.RegisterEnum("price.sync_price.calculation.Constant_FeeRateStatus", Constant_FeeRateStatus_name, Constant_FeeRateStatus_value)
	proto.RegisterEnum("price.sync_price.calculation.Constant_HiddenPriceError", Constant_HiddenPriceError_name, Constant_HiddenPriceError_value)
	proto.RegisterEnum("price.sync_price.calculation.Constant_CbscPriceFactorInfoType", Constant_CbscPriceFactorInfoType_name, Constant_CbscPriceFactorInfoType_value)
}
func (m *Constant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Constant) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CalcGlobalDiscountInfoByItemIdsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalcGlobalDiscountInfoByItemIdsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Queries) > 0 {
		for _, msg := range m.Queries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GlobalDiscountQueryId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalDiscountQueryId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MerchantId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.MerchantId))
	}
	if m.MpskuShopId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.MpskuShopId))
	}
	if m.MpskuItemId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.MpskuItemId))
	}
	if m.MpskuModelId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.MpskuModelId))
	}
	if m.MpskuRegion != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.MpskuRegion)))
		i += copy(dAtA[i:], *m.MpskuRegion)
	}
	if m.MtskuOriginalPrice != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.MtskuOriginalPrice))
	}
	if m.GlobalDiscountInputType != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.GlobalDiscountInputType))
	}
	if m.GlobalDiscountQueryData != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.GlobalDiscountQueryData))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CalcGlobalDiscountInfoByItemIdsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalcGlobalDiscountInfoByItemIdsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DebugMsg)))
		i += copy(dAtA[i:], *m.DebugMsg)
	}
	if len(m.GlobalDiscountInfoList) > 0 {
		for _, msg := range m.GlobalDiscountInfoList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GlobalDiscountInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalDiscountInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrCode != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ErrCode))
	}
	if m.ErrMsg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.ErrMsg)))
		i += copy(dAtA[i:], *m.ErrMsg)
	}
	if m.MerchantId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.MerchantId))
	}
	if m.MpskuShopId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.MpskuShopId))
	}
	if m.MpskuItemId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.MpskuItemId))
	}
	if m.MpskuModelId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.MpskuModelId))
	}
	if m.MpskuRegion != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.MpskuRegion)))
		i += copy(dAtA[i:], *m.MpskuRegion)
	}
	if m.MtskuOriginalPrice != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.MtskuOriginalPrice))
	}
	if m.GlobalDiscountInputType != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.GlobalDiscountInputType))
	}
	if m.GlobalDiscountQueryData != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.GlobalDiscountQueryData))
	}
	if m.GlobalDiscountQueryResult != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.GlobalDiscountQueryResult))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ItemModelId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemModelId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ItemId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ItemId))
	}
	if m.ModelId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ModelId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CalcLocalSipOverseaDiscountPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalcLocalSipOverseaDiscountPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AffiItemModelIds) > 0 {
		for _, msg := range m.AffiItemModelIds {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AffiShopId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.AffiShopId))
	}
	if m.AffiRegion != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.AffiRegion)))
		i += copy(dAtA[i:], *m.AffiRegion)
	}
	if m.DiscountRate != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.DiscountRate))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CalcLocalSipOverseaDiscountPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalcLocalSipOverseaDiscountPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, msg := range m.Results {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.DebugMsg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DebugMsg)))
		i += copy(dAtA[i:], *m.DebugMsg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LocalSIPAffiPriceResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalSIPAffiPriceResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AffiPrice != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.AffiPrice))
	}
	if m.ErrorDetail != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.ErrorDetail)))
		i += copy(dAtA[i:], *m.ErrorDetail)
	}
	if m.CalcErr != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.CalcErr))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCbSipAHiddenFeeConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCbSipAHiddenFeeConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InfoType != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.InfoType))
	}
	if m.PageIndex != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.PageIndex))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.PageSize))
	}
	if m.RuleKey != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.RuleKey)))
		i += copy(dAtA[i:], *m.RuleKey)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCbSipAHiddenFeeConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCbSipAHiddenFeeConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DebugMsg)))
		i += copy(dAtA[i:], *m.DebugMsg)
	}
	if m.Total != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.Total))
	}
	if len(m.Rules) > 0 {
		for _, msg := range m.Rules {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.RuleRegionSettingsStr != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.RuleRegionSettingsStr)))
		i += copy(dAtA[i:], *m.RuleRegionSettingsStr)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AHiddenFeeRuleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AHiddenFeeRuleInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RuleKey != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.RuleKey)))
		i += copy(dAtA[i:], *m.RuleKey)
	}
	if m.DescInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DescInfo)))
		i += copy(dAtA[i:], *m.DescInfo)
	}
	if len(m.Details) > 0 {
		for _, msg := range m.Details {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AHiddenFeeRuleRow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AHiddenFeeRuleRow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WeightRange != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.WeightRange))
	}
	if m.StartPrice != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.StartPrice))
	}
	if m.StartWeight != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.StartWeight))
	}
	if m.RoundSize != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.RoundSize))
	}
	if m.Price != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.Price))
	}
	if m.WeightStep != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.WeightStep))
	}
	if m.Adjustment != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.Adjustment))
	}
	if m.DescInfo != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DescInfo)))
		i += copy(dAtA[i:], *m.DescInfo)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCbSipRateConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCbSipRateConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CbSipRateInfoType != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.CbSipRateInfoType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCbSipRateConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCbSipRateConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DebugMsg)))
		i += copy(dAtA[i:], *m.DebugMsg)
	}
	if m.DefaultSipRateStr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DefaultSipRateStr)))
		i += copy(dAtA[i:], *m.DefaultSipRateStr)
	}
	if m.SipRateLimitStr != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.SipRateLimitStr)))
		i += copy(dAtA[i:], *m.SipRateLimitStr)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCbSipShopLevelConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCbSipShopLevelConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PShopId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.PShopId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCbSipShopLevelConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCbSipShopLevelConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DebugMsg)))
		i += copy(dAtA[i:], *m.DebugMsg)
	}
	if len(m.AShopConfigList) > 0 {
		for _, msg := range m.AShopConfigList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CbSipAffiShopInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CbSipAffiShopInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AShopId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.AShopId))
	}
	if m.SipRate != nil {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.SipRate))))
		i += 8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCbSipRegionLevelConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCbSipRegionLevelConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RegionPairList) > 0 {
		for _, msg := range m.RegionPairList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.InfoType != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.InfoType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCbSipRegionLevelConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCbSipRegionLevelConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DebugMsg)))
		i += copy(dAtA[i:], *m.DebugMsg)
	}
	if m.ExchangeRateConfig != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(m.ExchangeRateConfig.Size()))
		n1, err := m.ExchangeRateConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.CountryMarginConfig != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(m.CountryMarginConfig.Size()))
		n2, err := m.CountryMarginConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CbSipRegionLevelExchangeRateConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CbSipRegionLevelExchangeRateConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ExchangeRateList) > 0 {
		for _, msg := range m.ExchangeRateList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ExchangeRateData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeRateData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SrcCurrency != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.SrcCurrency)))
		i += copy(dAtA[i:], *m.SrcCurrency)
	}
	if m.DstCurrency != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DstCurrency)))
		i += copy(dAtA[i:], *m.DstCurrency)
	}
	if m.ExchangeRate != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.ExchangeRate)))
		i += copy(dAtA[i:], *m.ExchangeRate)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CbSipRegionLevelCountryMarginConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CbSipRegionLevelCountryMarginConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CountryMarginList) > 0 {
		for _, msg := range m.CountryMarginList {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CountryMarginData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountryMarginData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SrcRegion != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.SrcRegion)))
		i += copy(dAtA[i:], *m.SrcRegion)
	}
	if m.DstRegion != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DstRegion)))
		i += copy(dAtA[i:], *m.DstRegion)
	}
	if m.CountryMargin != nil {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.CountryMargin))))
		i += 8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetLocalSipPriceFactorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLocalSipPriceFactorRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RegionPairList) > 0 {
		for _, msg := range m.RegionPairList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.InfoType != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.InfoType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RegionPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionPair) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SrcRegion != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.SrcRegion)))
		i += copy(dAtA[i:], *m.SrcRegion)
	}
	if m.DstRegion != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DstRegion)))
		i += copy(dAtA[i:], *m.DstRegion)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetLocalSipPriceFactorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLocalSipPriceFactorResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DebugMsg)))
		i += copy(dAtA[i:], *m.DebugMsg)
	}
	if len(m.Results) > 0 {
		for _, msg := range m.Results {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LocalSipPriceFactorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalSipPriceFactorInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BasicInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(m.BasicInfo.Size()))
		n3, err := m.BasicInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.HiddenFeeInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(m.HiddenFeeInfo.Size()))
		n4, err := m.HiddenFeeInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.ShippingFeeInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(m.ShippingFeeInfo.Size()))
		n5, err := m.ShippingFeeInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LocalSipPriceFactorBasicInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalSipPriceFactorBasicInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CountryMargin != nil {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.CountryMargin))))
		i += 8
	}
	if m.MinCountryMargin != nil {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.MinCountryMargin))))
		i += 8
	}
	if m.MaxCountryMargin != nil {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.MaxCountryMargin))))
		i += 8
	}
	if m.ExchangeRate != nil {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.ExchangeRate))))
		i += 8
	}
	if m.MinExchangeRate != nil {
		dAtA[i] = 0x29
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.MinExchangeRate))))
		i += 8
	}
	if m.MaxExchangeRate != nil {
		dAtA[i] = 0x31
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.MaxExchangeRate))))
		i += 8
	}
	if m.InitialHiddenFeeToggle != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.InitialHiddenFeeToggle))
	}
	if m.ShippingFeeToggle != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ShippingFeeToggle))
	}
	if m.InitHiddenPrice != nil {
		dAtA[i] = 0x49
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.InitHiddenPrice))))
		i += 8
	}
	if m.MinInitHiddenPrice != nil {
		dAtA[i] = 0x51
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.MinInitHiddenPrice))))
		i += 8
	}
	if m.MaxInitHiddenPrice != nil {
		dAtA[i] = 0x59
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.MaxInitHiddenPrice))))
		i += 8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LocalSipPriceFactorShippingFeeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalSipPriceFactorShippingFeeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LocalShippingFeeRules) > 0 {
		for _, msg := range m.LocalShippingFeeRules {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LocalSipPriceFactorHiddenFeeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalSipPriceFactorHiddenFeeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LocalHiddenFeeRules) > 0 {
		for _, msg := range m.LocalHiddenFeeRules {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LocalShippingFeeRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalShippingFeeRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MstRegion != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.MstRegion)))
		i += copy(dAtA[i:], *m.MstRegion)
	}
	if m.AffiRegion != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.AffiRegion)))
		i += copy(dAtA[i:], *m.AffiRegion)
	}
	if m.Weight != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.Weight))
	}
	if m.Fee != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.Fee))
	}
	if m.Id != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.Id))
	}
	if m.Ctime != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.Ctime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCbscPriceFactorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCbscPriceFactorRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InfoType != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.InfoType))
	}
	if m.MerchantId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.MerchantId))
	}
	if m.MainAccountId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.MainAccountId))
	}
	if len(m.ShopIdList) > 0 {
		for _, num := range m.ShopIdList {
			dAtA[i] = 0x20
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(num))
		}
	}
	if m.ShopRegion != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.ShopRegion)))
		i += copy(dAtA[i:], *m.ShopRegion)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCbscPriceFactorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCbscPriceFactorResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DebugMsg)))
		i += copy(dAtA[i:], *m.DebugMsg)
	}
	if m.Results != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(m.Results.Size()))
		n6, err := m.Results.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CbscPriceFactor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CbscPriceFactor) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ShopFeeRateList) > 0 {
		for _, msg := range m.ShopFeeRateList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.FeeRateLimit != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(m.FeeRateLimit.Size()))
		n7, err := m.FeeRateLimit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.ExchangeRateList) > 0 {
		for _, msg := range m.ExchangeRateList {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CbscShopLevelFeeRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CbscShopLevelFeeRate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ShopId))
	}
	if m.TransactionFeeRate != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.TransactionFeeRate))
	}
	if m.ProfitRate != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ProfitRate))
	}
	if m.ProfitRateStatus != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ProfitRateStatus))
	}
	if m.ServiceFeeRate != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ServiceFeeRate))
	}
	if m.ServiceFeeRateStatus != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ServiceFeeRateStatus))
	}
	if m.CommissionRate != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.CommissionRate))
	}
	if m.ReferenceServiceFeeRate != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ReferenceServiceFeeRate))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CbscFeeRateLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CbscFeeRateLimit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ServiceFeeLimit != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(m.ServiceFeeLimit.Size()))
		n8, err := m.ServiceFeeLimit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.ProfitRateLimit) > 0 {
		for _, msg := range m.ProfitRateLimit {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CbscProfitRateLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CbscProfitRateLimit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MinProfitRate != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.MinProfitRate))
	}
	if m.MaxProfitRate != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.MaxProfitRate))
	}
	if m.Region != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.Region)))
		i += copy(dAtA[i:], *m.Region)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CbscServiceFeeRateLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CbscServiceFeeRateLimit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MinServiceFeeRate != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.MinServiceFeeRate))
	}
	if m.MaxServiceFeeRate != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.MaxServiceFeeRate))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CbscExchangeRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CbscExchangeRate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ExchangeRate != nil {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.ExchangeRate))))
		i += 8
	}
	if m.Region != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.Region)))
		i += copy(dAtA[i:], *m.Region)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetCbscPriceFactorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetCbscPriceFactorRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MerchantId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.MerchantId))
	}
	if len(m.ShopCbscPriceFactors) > 0 {
		for _, msg := range m.ShopCbscPriceFactors {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetCbscPriceFactorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetCbscPriceFactorResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DebugMsg)))
		i += copy(dAtA[i:], *m.DebugMsg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShopCbscPriceFactorSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopCbscPriceFactorSetting) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ShopId))
	}
	if m.Region != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.Region)))
		i += copy(dAtA[i:], *m.Region)
	}
	if m.ProfitRate != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ProfitRate))
	}
	if m.ServiceFeeRate != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ServiceFeeRate))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConvertCurrencyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConvertCurrencyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SrcPriceList) > 0 {
		for _, num := range m.SrcPriceList {
			dAtA[i] = 0x8
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(num))
		}
	}
	if m.ExchangeRateSource != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ExchangeRateSource))
	}
	if m.SrcCurrency != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.SrcCurrency)))
		i += copy(dAtA[i:], *m.SrcCurrency)
	}
	if m.DstCurrency != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DstCurrency)))
		i += copy(dAtA[i:], *m.DstCurrency)
	}
	if m.MerchantId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.MerchantId))
	}
	if m.MpskuRegion != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.MpskuRegion)))
		i += copy(dAtA[i:], *m.MpskuRegion)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConvertCurrencyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConvertCurrencyResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DebugMsg)))
		i += copy(dAtA[i:], *m.DebugMsg)
	}
	if len(m.DstPrices) > 0 {
		for _, num := range m.DstPrices {
			dAtA[i] = 0x10
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(num))
		}
	}
	if m.ExchangeRate != nil {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.ExchangeRate))))
		i += 8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CalculateAPriceByPItemForLocalSIPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalculateAPriceByPItemForLocalSIPRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PShopId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.PShopId))
	}
	if m.PRegion != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.PRegion)))
		i += copy(dAtA[i:], *m.PRegion)
	}
	if m.PItemId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.PItemId))
	}
	if len(m.Queries) > 0 {
		for _, msg := range m.Queries {
			dAtA[i] = 0x22
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CalculateForCreate != nil {
		dAtA[i] = 0x28
		i++
		if *m.CalculateForCreate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LocalSipAPriceQueryId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalSipAPriceQueryId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AShopId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.AShopId))
	}
	if m.ARegion != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.ARegion)))
		i += copy(dAtA[i:], *m.ARegion)
	}
	if m.AItemId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.AItemId))
	}
	if m.AModelId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.AModelId))
	}
	if m.PNormalPrice != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.PNormalPrice))
	}
	if len(m.PPromotionPrices) > 0 {
		for _, num := range m.PPromotionPrices {
			dAtA[i] = 0x30
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(num))
		}
	}
	if len(m.EnabledChannelIdList) > 0 {
		for _, num := range m.EnabledChannelIdList {
			dAtA[i] = 0x38
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(num))
		}
	}
	if m.LeafCategoryId != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.LeafCategoryId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CalculateAPriceByPItemForLocalSIPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalculateAPriceByPItemForLocalSIPResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DebugMsg)))
		i += copy(dAtA[i:], *m.DebugMsg)
	}
	if len(m.Results) > 0 {
		for _, msg := range m.Results {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AShopItemCustomizedOpls) > 0 {
		for _, msg := range m.AShopItemCustomizedOpls {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShopItemCustomizedOPL) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopItemCustomizedOPL) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ShopId))
	}
	if m.ItemId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ItemId))
	}
	if m.CustomizedOpl != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(m.CustomizedOpl.Size()))
		n9, err := m.CustomizedOpl.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LocalSipAPriceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalSipAPriceInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrCode != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ErrCode))
	}
	if m.ErrMsg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.ErrMsg)))
		i += copy(dAtA[i:], *m.ErrMsg)
	}
	if m.NormalPrice != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.NormalPrice))
	}
	if len(m.PromotionPrices) > 0 {
		for _, num := range m.PromotionPrices {
			dAtA[i] = 0x20
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(num))
		}
	}
	if m.AShopId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.AShopId))
	}
	if m.ARegion != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.ARegion)))
		i += copy(dAtA[i:], *m.ARegion)
	}
	if m.AItemId != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.AItemId))
	}
	if m.AModelId != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.AModelId))
	}
	if m.Snap != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(m.Snap.Size()))
		n10, err := m.Snap.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LocalSipPriceFactorSnap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalSipPriceFactorSnap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Weight != nil {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Weight))))
		i += 8
	}
	if m.ShopMargin != nil {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.ShopMargin))))
		i += 8
	}
	if m.ItemMargin != nil {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.ItemMargin))))
		i += 8
	}
	if m.ShippingFee != nil {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.ShippingFee))))
		i += 8
	}
	if m.CountryMargin != nil {
		dAtA[i] = 0x29
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.CountryMargin))))
		i += 8
	}
	if m.ExchangeRate != nil {
		dAtA[i] = 0x31
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.ExchangeRate))))
		i += 8
	}
	if m.InitHiddenPrice != nil {
		dAtA[i] = 0x39
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.InitHiddenPrice))))
		i += 8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CalculateSipItemPriceForCbSipRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalculateSipItemPriceForCbSipRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ShopId))
	}
	if m.Region != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.Region)))
		i += copy(dAtA[i:], *m.Region)
	}
	if m.ItemId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ItemId))
	}
	if len(m.ChannelIdList) > 0 {
		for _, num := range m.ChannelIdList {
			dAtA[i] = 0x20
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(num))
		}
	}
	if m.LeafCategoryId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.LeafCategoryId))
	}
	if m.Weight != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.Weight))
	}
	if len(m.Queries) > 0 {
		for _, msg := range m.Queries {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SipItemPriceForCbSipQueryId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SipItemPriceForCbSipQueryId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ModelId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ModelId))
	}
	if m.Price != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.Price))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CalculateSipItemPriceForCbSipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalculateSipItemPriceForCbSipResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DebugMsg)))
		i += copy(dAtA[i:], *m.DebugMsg)
	}
	if len(m.CbSipItemPriceInfoList) > 0 {
		for _, msg := range m.CbSipItemPriceInfoList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CbSipItemPriceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CbSipItemPriceInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrCode != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ErrCode))
	}
	if m.ErrMsg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.ErrMsg)))
		i += copy(dAtA[i:], *m.ErrMsg)
	}
	if m.ModelId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ModelId))
	}
	if m.CbSipItemPrice != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.CbSipItemPrice))
	}
	if m.Currency != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.Currency)))
		i += copy(dAtA[i:], *m.Currency)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CalculateAPriceByPItemForCBSIPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalculateAPriceByPItemForCBSIPRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MerchantId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.MerchantId))
	}
	if m.MerchantRegion != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.MerchantRegion)))
		i += copy(dAtA[i:], *m.MerchantRegion)
	}
	if m.PShopId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.PShopId))
	}
	if m.PRegion != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.PRegion)))
		i += copy(dAtA[i:], *m.PRegion)
	}
	if m.PItemId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.PItemId))
	}
	if m.AShopId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.AShopId))
	}
	if m.ARegion != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.ARegion)))
		i += copy(dAtA[i:], *m.ARegion)
	}
	if m.AItemId != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.AItemId))
	}
	if len(m.Queries) > 0 {
		for _, msg := range m.Queries {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CalculateForCreate != nil {
		dAtA[i] = 0x50
		i++
		if *m.CalculateForCreate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AItemCBSIPQueryId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AItemCBSIPQueryId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AModelId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.AModelId))
	}
	if m.PItemPrice != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.PItemPrice))
	}
	if m.PNormalPrice != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.PNormalPrice))
	}
	if m.PPromotionPrice != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.PPromotionPrice))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CalculateAPriceByPItemForCBSIPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalculateAPriceByPItemForCBSIPResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DebugMsg)))
		i += copy(dAtA[i:], *m.DebugMsg)
	}
	if len(m.Results) > 0 {
		for _, msg := range m.Results {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CustomizedOpl != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(m.CustomizedOpl.Size()))
		n11, err := m.CustomizedOpl.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CustomizedOPL) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomizedOPL) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartTime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.EndTime))
	}
	if m.PurchaseLimit != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.PurchaseLimit))
	}
	if m.RepeatedTimes != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.RepeatedTimes))
	}
	if m.PromotionId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.PromotionId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AItemPriceResultInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AItemPriceResultInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrCode != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ErrCode))
	}
	if m.ErrMsg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.ErrMsg)))
		i += copy(dAtA[i:], *m.ErrMsg)
	}
	if m.NormalPrice != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.NormalPrice))
	}
	if m.SettlementPrice != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.SettlementPrice))
	}
	if m.SettlementPriceCurrency != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.SettlementPriceCurrency)))
		i += copy(dAtA[i:], *m.SettlementPriceCurrency)
	}
	if m.PromotionPrice != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.PromotionPrice))
	}
	if m.Snap != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(m.Snap.Size()))
		n12, err := m.Snap.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CbSipPriceFactorSnap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CbSipPriceFactorSnap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Weight != nil {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Weight))))
		i += 8
	}
	if m.CountryMargin != nil {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.CountryMargin))))
		i += 8
	}
	if m.ShopMargin != nil {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.ShopMargin))))
		i += 8
	}
	if m.ItemMargin != nil {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.ItemMargin))))
		i += 8
	}
	if m.ExchangeRate != nil {
		dAtA[i] = 0x29
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.ExchangeRate))))
		i += 8
	}
	if m.PriceRatio != nil {
		dAtA[i] = 0x31
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.PriceRatio))))
		i += 8
	}
	if m.AffiHiddenPrice != nil {
		dAtA[i] = 0x39
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.AffiHiddenPrice))))
		i += 8
	}
	if m.SrcCurrency != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.SrcCurrency)))
		i += copy(dAtA[i:], *m.SrcCurrency)
	}
	if m.ServiceFee != nil {
		dAtA[i] = 0x49
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.ServiceFee))))
		i += 8
	}
	if m.CommissionFee != nil {
		dAtA[i] = 0x51
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.CommissionFee))))
		i += 8
	}
	if m.HandlingFee != nil {
		dAtA[i] = 0x59
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.HandlingFee))))
		i += 8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CalculatePriceForCbscRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalculatePriceForCbscRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MerchantId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.MerchantId))
	}
	if m.IsMtskuToMpsku != nil {
		dAtA[i] = 0x10
		i++
		if *m.IsMtskuToMpsku {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Queries) > 0 {
		for _, msg := range m.Queries {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MtskuMpskuPriceQueryId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MtskuMpskuPriceQueryId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SrcPrice != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.SrcPrice))
	}
	if m.MpskuShopId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.MpskuShopId))
	}
	if m.MpskuRegion != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.MpskuRegion)))
		i += copy(dAtA[i:], *m.MpskuRegion)
	}
	if m.MpskuItemId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.MpskuItemId))
	}
	if m.Weight != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.Weight))
	}
	if m.LeafCategoryId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.LeafCategoryId))
	}
	if len(m.EnabledChannelIdList) > 0 {
		for _, num := range m.EnabledChannelIdList {
			dAtA[i] = 0x38
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CalculatePriceForCbscResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalculatePriceForCbscResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DebugMsg)))
		i += copy(dAtA[i:], *m.DebugMsg)
	}
	if len(m.Results) > 0 {
		for _, msg := range m.Results {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MtskuMpskuPriceQueryInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MtskuMpskuPriceQueryInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrCode != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ErrCode))
	}
	if m.ErrMsg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.ErrMsg)))
		i += copy(dAtA[i:], *m.ErrMsg)
	}
	if m.DstPrice != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.DstPrice))
	}
	if m.HidePrice != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.HidePrice))
	}
	if m.HidePriceError != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.HidePriceError))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateProfitRateLimitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateProfitRateLimitRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MerchantRegion != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.MerchantRegion)))
		i += copy(dAtA[i:], *m.MerchantRegion)
	}
	if m.Region != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.Region)))
		i += copy(dAtA[i:], *m.Region)
	}
	if m.ProfitRateMin != nil {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.ProfitRateMin))))
		i += 8
	}
	if m.ProfitRateMax != nil {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.ProfitRateMax))))
		i += 8
	}
	if m.Operator != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.Operator)))
		i += copy(dAtA[i:], *m.Operator)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateProfitRateLimitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateProfitRateLimitResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DebugMsg)))
		i += copy(dAtA[i:], *m.DebugMsg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetProfitRateLimitListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetProfitRateLimitListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MerchantRegion != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.MerchantRegion)))
		i += copy(dAtA[i:], *m.MerchantRegion)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetProfitRateLimitListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetProfitRateLimitListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DebugMsg)))
		i += copy(dAtA[i:], *m.DebugMsg)
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProfitRateLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfitRateLimit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.Id))
	}
	if m.Region != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.Region)))
		i += copy(dAtA[i:], *m.Region)
	}
	if m.ProfitRateMin != nil {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.ProfitRateMin))))
		i += 8
	}
	if m.ProfitRateMax != nil {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.ProfitRateMax))))
		i += 8
	}
	if m.Operator != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.Operator)))
		i += copy(dAtA[i:], *m.Operator)
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAShopMarginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAShopMarginRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ShopIds) > 0 {
		for _, num := range m.ShopIds {
			dAtA[i] = 0x8
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAShopMarginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAShopMarginResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DebugMsg)))
		i += copy(dAtA[i:], *m.DebugMsg)
	}
	if len(m.AShopMargins) > 0 {
		for _, msg := range m.AShopMargins {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShopMargin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopMargin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ShopId))
	}
	if m.Margin != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.Margin))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAShopPriceRatioRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAShopPriceRatioRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ShopIds) > 0 {
		for _, num := range m.ShopIds {
			dAtA[i] = 0x8
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAShopPriceRatioResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAShopPriceRatioResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DebugMsg)))
		i += copy(dAtA[i:], *m.DebugMsg)
	}
	if len(m.AShopPriceRatios) > 0 {
		for _, msg := range m.AShopPriceRatios {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShopPriceRatio) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopPriceRatio) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ShopId))
	}
	if m.PriceRatio != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.PriceRatio))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAItemMarginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAItemMarginRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ShopIdToItemIdsList) > 0 {
		for _, msg := range m.ShopIdToItemIdsList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShopIDToItemIDs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopIDToItemIDs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ShopId))
	}
	if len(m.ItemIds) > 0 {
		for _, num := range m.ItemIds {
			dAtA[i] = 0x10
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAItemMarginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAItemMarginResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DebugMsg)))
		i += copy(dAtA[i:], *m.DebugMsg)
	}
	if len(m.AItemMargins) > 0 {
		for _, msg := range m.AItemMargins {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ItemMargin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemMargin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ItemId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ItemId))
	}
	if m.ItemMargin != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ItemMargin))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAItemRealWeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAItemRealWeightRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ShopId))
	}
	if m.ItemId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ItemId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAItemRealWeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAItemRealWeightResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DebugMsg)))
		i += copy(dAtA[i:], *m.DebugMsg)
	}
	if m.AItemRealWeight != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.AItemRealWeight))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetAShopMarginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetAShopMarginRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ShopId))
	}
	if m.Margin != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.Margin))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetAShopMarginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetAShopMarginResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DebugMsg)))
		i += copy(dAtA[i:], *m.DebugMsg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShopPriceRatioSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopPriceRatioSetting) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.ShopId))
	}
	if m.Region != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.Region)))
		i += copy(dAtA[i:], *m.Region)
	}
	if m.PriceRatio != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.PriceRatio))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetAShopPriceRatioBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetAShopPriceRatioBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DebugMsg)))
		i += copy(dAtA[i:], *m.DebugMsg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetAItemMarginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetAItemMarginRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AShopId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.AShopId))
	}
	if m.AItemId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.AItemId))
	}
	if m.AItemMargin != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.AItemMargin))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetAItemMarginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetAItemMarginResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DebugMsg)))
		i += copy(dAtA[i:], *m.DebugMsg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetAItemRealWeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetAItemRealWeightRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AShopId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.AShopId))
	}
	if m.AItemId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.AItemId))
	}
	if m.AItemRealWeight != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.AItemRealWeight))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetAItemRealWeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetAItemRealWeightResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DebugMsg)))
		i += copy(dAtA[i:], *m.DebugMsg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetPShopOpsPriceRatioSettingBatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPShopOpsPriceRatioSettingBatchRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PShopIds) > 0 {
		for _, num := range m.PShopIds {
			dAtA[i] = 0x8
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PShopOpsPriceRatioSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PShopOpsPriceRatioSetting) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsControlledByOps != nil {
		dAtA[i] = 0x8
		i++
		if *m.IsControlledByOps {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.StartTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.EndTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetPShopOpsPriceRatioSettingBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPShopOpsPriceRatioSettingBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DebugMsg)))
		i += copy(dAtA[i:], *m.DebugMsg)
	}
	if len(m.OpsPriceRatioSetting) > 0 {
		for _, msg := range m.OpsPriceRatioSetting {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetPriceRatioRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetPriceRatioRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PShopId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.PShopId))
	}
	if len(m.AShopPriceRatioSettings) > 0 {
		for _, msg := range m.AShopPriceRatioSettings {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IsCreate != nil {
		dAtA[i] = 0x18
		i++
		if *m.IsCreate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsOps != nil {
		dAtA[i] = 0x20
		i++
		if *m.IsOps {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SkipControlFlagCheck != nil {
		dAtA[i] = 0x28
		i++
		if *m.SkipControlFlagCheck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NeedSyncExistingData != nil {
		dAtA[i] = 0x30
		i++
		if *m.NeedSyncExistingData {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetPriceRatioResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetPriceRatioResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DebugMsg)))
		i += copy(dAtA[i:], *m.DebugMsg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCBSIPAShopSellerDiscountPromotionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCBSIPAShopSellerDiscountPromotionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AShopId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.AShopId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCBSIPAShopSellerDiscountPromotionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCBSIPAShopSellerDiscountPromotionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DebugMsg)))
		i += copy(dAtA[i:], *m.DebugMsg)
	}
	if m.PromotionId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.PromotionId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateCBSIPAShopSellerDiscountPromotionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCBSIPAShopSellerDiscountPromotionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AShopId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(*m.AShopId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateCBSIPAShopSellerDiscountPromotionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCBSIPAShopSellerDiscountPromotionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPriceSyncPriceCalculation(dAtA, i, uint64(len(*m.DebugMsg)))
		i += copy(dAtA[i:], *m.DebugMsg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPriceSyncPriceCalculation(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Constant) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CalcGlobalDiscountInfoByItemIdsRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Queries) > 0 {
		for _, e := range m.Queries {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GlobalDiscountQueryId) Size() (n int) {
	var l int
	_ = l
	if m.MerchantId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.MerchantId))
	}
	if m.MpskuShopId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.MpskuShopId))
	}
	if m.MpskuItemId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.MpskuItemId))
	}
	if m.MpskuModelId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.MpskuModelId))
	}
	if m.MpskuRegion != nil {
		l = len(*m.MpskuRegion)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.MtskuOriginalPrice != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.MtskuOriginalPrice))
	}
	if m.GlobalDiscountInputType != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.GlobalDiscountInputType))
	}
	if m.GlobalDiscountQueryData != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.GlobalDiscountQueryData))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CalcGlobalDiscountInfoByItemIdsResponse) Size() (n int) {
	var l int
	_ = l
	if m.DebugMsg != nil {
		l = len(*m.DebugMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if len(m.GlobalDiscountInfoList) > 0 {
		for _, e := range m.GlobalDiscountInfoList {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GlobalDiscountInfo) Size() (n int) {
	var l int
	_ = l
	if m.ErrCode != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ErrCode))
	}
	if m.ErrMsg != nil {
		l = len(*m.ErrMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.MerchantId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.MerchantId))
	}
	if m.MpskuShopId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.MpskuShopId))
	}
	if m.MpskuItemId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.MpskuItemId))
	}
	if m.MpskuModelId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.MpskuModelId))
	}
	if m.MpskuRegion != nil {
		l = len(*m.MpskuRegion)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.MtskuOriginalPrice != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.MtskuOriginalPrice))
	}
	if m.GlobalDiscountInputType != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.GlobalDiscountInputType))
	}
	if m.GlobalDiscountQueryData != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.GlobalDiscountQueryData))
	}
	if m.GlobalDiscountQueryResult != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.GlobalDiscountQueryResult))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ItemModelId) Size() (n int) {
	var l int
	_ = l
	if m.ItemId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ItemId))
	}
	if m.ModelId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ModelId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CalcLocalSipOverseaDiscountPriceRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.AffiItemModelIds) > 0 {
		for _, e := range m.AffiItemModelIds {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.AffiShopId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.AffiShopId))
	}
	if m.AffiRegion != nil {
		l = len(*m.AffiRegion)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.DiscountRate != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.DiscountRate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CalcLocalSipOverseaDiscountPriceResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.DebugMsg != nil {
		l = len(*m.DebugMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocalSIPAffiPriceResult) Size() (n int) {
	var l int
	_ = l
	if m.AffiPrice != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.AffiPrice))
	}
	if m.ErrorDetail != nil {
		l = len(*m.ErrorDetail)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.CalcErr != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.CalcErr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCbSipAHiddenFeeConfigRequest) Size() (n int) {
	var l int
	_ = l
	if m.InfoType != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.InfoType))
	}
	if m.PageIndex != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.PageIndex))
	}
	if m.PageSize != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.PageSize))
	}
	if m.RuleKey != nil {
		l = len(*m.RuleKey)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCbSipAHiddenFeeConfigResponse) Size() (n int) {
	var l int
	_ = l
	if m.DebugMsg != nil {
		l = len(*m.DebugMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.Total != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.Total))
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.RuleRegionSettingsStr != nil {
		l = len(*m.RuleRegionSettingsStr)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AHiddenFeeRuleInfo) Size() (n int) {
	var l int
	_ = l
	if m.RuleKey != nil {
		l = len(*m.RuleKey)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.DescInfo != nil {
		l = len(*m.DescInfo)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if len(m.Details) > 0 {
		for _, e := range m.Details {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AHiddenFeeRuleRow) Size() (n int) {
	var l int
	_ = l
	if m.WeightRange != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.WeightRange))
	}
	if m.StartPrice != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.StartPrice))
	}
	if m.StartWeight != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.StartWeight))
	}
	if m.RoundSize != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.RoundSize))
	}
	if m.Price != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.Price))
	}
	if m.WeightStep != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.WeightStep))
	}
	if m.Adjustment != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.Adjustment))
	}
	if m.DescInfo != nil {
		l = len(*m.DescInfo)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCbSipRateConfigRequest) Size() (n int) {
	var l int
	_ = l
	if m.CbSipRateInfoType != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.CbSipRateInfoType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCbSipRateConfigResponse) Size() (n int) {
	var l int
	_ = l
	if m.DebugMsg != nil {
		l = len(*m.DebugMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.DefaultSipRateStr != nil {
		l = len(*m.DefaultSipRateStr)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.SipRateLimitStr != nil {
		l = len(*m.SipRateLimitStr)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCbSipShopLevelConfigRequest) Size() (n int) {
	var l int
	_ = l
	if m.PShopId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.PShopId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCbSipShopLevelConfigResponse) Size() (n int) {
	var l int
	_ = l
	if m.DebugMsg != nil {
		l = len(*m.DebugMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if len(m.AShopConfigList) > 0 {
		for _, e := range m.AShopConfigList {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CbSipAffiShopInfo) Size() (n int) {
	var l int
	_ = l
	if m.AShopId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.AShopId))
	}
	if m.SipRate != nil {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCbSipRegionLevelConfigRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.RegionPairList) > 0 {
		for _, e := range m.RegionPairList {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.InfoType != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.InfoType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCbSipRegionLevelConfigResponse) Size() (n int) {
	var l int
	_ = l
	if m.DebugMsg != nil {
		l = len(*m.DebugMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.ExchangeRateConfig != nil {
		l = m.ExchangeRateConfig.Size()
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.CountryMarginConfig != nil {
		l = m.CountryMarginConfig.Size()
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CbSipRegionLevelExchangeRateConfig) Size() (n int) {
	var l int
	_ = l
	if len(m.ExchangeRateList) > 0 {
		for _, e := range m.ExchangeRateList {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExchangeRateData) Size() (n int) {
	var l int
	_ = l
	if m.SrcCurrency != nil {
		l = len(*m.SrcCurrency)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.DstCurrency != nil {
		l = len(*m.DstCurrency)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.ExchangeRate != nil {
		l = len(*m.ExchangeRate)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CbSipRegionLevelCountryMarginConfig) Size() (n int) {
	var l int
	_ = l
	if len(m.CountryMarginList) > 0 {
		for _, e := range m.CountryMarginList {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CountryMarginData) Size() (n int) {
	var l int
	_ = l
	if m.SrcRegion != nil {
		l = len(*m.SrcRegion)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.DstRegion != nil {
		l = len(*m.DstRegion)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.CountryMargin != nil {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetLocalSipPriceFactorRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.RegionPairList) > 0 {
		for _, e := range m.RegionPairList {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.InfoType != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.InfoType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegionPair) Size() (n int) {
	var l int
	_ = l
	if m.SrcRegion != nil {
		l = len(*m.SrcRegion)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.DstRegion != nil {
		l = len(*m.DstRegion)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetLocalSipPriceFactorResponse) Size() (n int) {
	var l int
	_ = l
	if m.DebugMsg != nil {
		l = len(*m.DebugMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocalSipPriceFactorInfo) Size() (n int) {
	var l int
	_ = l
	if m.BasicInfo != nil {
		l = m.BasicInfo.Size()
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.HiddenFeeInfo != nil {
		l = m.HiddenFeeInfo.Size()
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.ShippingFeeInfo != nil {
		l = m.ShippingFeeInfo.Size()
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocalSipPriceFactorBasicInfo) Size() (n int) {
	var l int
	_ = l
	if m.CountryMargin != nil {
		n += 9
	}
	if m.MinCountryMargin != nil {
		n += 9
	}
	if m.MaxCountryMargin != nil {
		n += 9
	}
	if m.ExchangeRate != nil {
		n += 9
	}
	if m.MinExchangeRate != nil {
		n += 9
	}
	if m.MaxExchangeRate != nil {
		n += 9
	}
	if m.InitialHiddenFeeToggle != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.InitialHiddenFeeToggle))
	}
	if m.ShippingFeeToggle != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ShippingFeeToggle))
	}
	if m.InitHiddenPrice != nil {
		n += 9
	}
	if m.MinInitHiddenPrice != nil {
		n += 9
	}
	if m.MaxInitHiddenPrice != nil {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocalSipPriceFactorShippingFeeInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.LocalShippingFeeRules) > 0 {
		for _, e := range m.LocalShippingFeeRules {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocalSipPriceFactorHiddenFeeInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.LocalHiddenFeeRules) > 0 {
		for _, e := range m.LocalHiddenFeeRules {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocalShippingFeeRule) Size() (n int) {
	var l int
	_ = l
	if m.MstRegion != nil {
		l = len(*m.MstRegion)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.AffiRegion != nil {
		l = len(*m.AffiRegion)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.Weight != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.Weight))
	}
	if m.Fee != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.Fee))
	}
	if m.Id != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.Id))
	}
	if m.Ctime != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.Ctime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCbscPriceFactorRequest) Size() (n int) {
	var l int
	_ = l
	if m.InfoType != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.InfoType))
	}
	if m.MerchantId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.MerchantId))
	}
	if m.MainAccountId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.MainAccountId))
	}
	if len(m.ShopIdList) > 0 {
		for _, e := range m.ShopIdList {
			n += 1 + sovPriceSyncPriceCalculation(uint64(e))
		}
	}
	if m.ShopRegion != nil {
		l = len(*m.ShopRegion)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCbscPriceFactorResponse) Size() (n int) {
	var l int
	_ = l
	if m.DebugMsg != nil {
		l = len(*m.DebugMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.Results != nil {
		l = m.Results.Size()
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CbscPriceFactor) Size() (n int) {
	var l int
	_ = l
	if len(m.ShopFeeRateList) > 0 {
		for _, e := range m.ShopFeeRateList {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.FeeRateLimit != nil {
		l = m.FeeRateLimit.Size()
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if len(m.ExchangeRateList) > 0 {
		for _, e := range m.ExchangeRateList {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CbscShopLevelFeeRate) Size() (n int) {
	var l int
	_ = l
	if m.ShopId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ShopId))
	}
	if m.TransactionFeeRate != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.TransactionFeeRate))
	}
	if m.ProfitRate != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ProfitRate))
	}
	if m.ProfitRateStatus != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ProfitRateStatus))
	}
	if m.ServiceFeeRate != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ServiceFeeRate))
	}
	if m.ServiceFeeRateStatus != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ServiceFeeRateStatus))
	}
	if m.CommissionRate != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.CommissionRate))
	}
	if m.ReferenceServiceFeeRate != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ReferenceServiceFeeRate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CbscFeeRateLimit) Size() (n int) {
	var l int
	_ = l
	if m.ServiceFeeLimit != nil {
		l = m.ServiceFeeLimit.Size()
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if len(m.ProfitRateLimit) > 0 {
		for _, e := range m.ProfitRateLimit {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CbscProfitRateLimit) Size() (n int) {
	var l int
	_ = l
	if m.MinProfitRate != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.MinProfitRate))
	}
	if m.MaxProfitRate != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.MaxProfitRate))
	}
	if m.Region != nil {
		l = len(*m.Region)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CbscServiceFeeRateLimit) Size() (n int) {
	var l int
	_ = l
	if m.MinServiceFeeRate != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.MinServiceFeeRate))
	}
	if m.MaxServiceFeeRate != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.MaxServiceFeeRate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CbscExchangeRate) Size() (n int) {
	var l int
	_ = l
	if m.ExchangeRate != nil {
		n += 9
	}
	if m.Region != nil {
		l = len(*m.Region)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetCbscPriceFactorRequest) Size() (n int) {
	var l int
	_ = l
	if m.MerchantId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.MerchantId))
	}
	if len(m.ShopCbscPriceFactors) > 0 {
		for _, e := range m.ShopCbscPriceFactors {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetCbscPriceFactorResponse) Size() (n int) {
	var l int
	_ = l
	if m.DebugMsg != nil {
		l = len(*m.DebugMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShopCbscPriceFactorSetting) Size() (n int) {
	var l int
	_ = l
	if m.ShopId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ShopId))
	}
	if m.Region != nil {
		l = len(*m.Region)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.ProfitRate != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ProfitRate))
	}
	if m.ServiceFeeRate != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ServiceFeeRate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConvertCurrencyRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.SrcPriceList) > 0 {
		for _, e := range m.SrcPriceList {
			n += 1 + sovPriceSyncPriceCalculation(uint64(e))
		}
	}
	if m.ExchangeRateSource != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ExchangeRateSource))
	}
	if m.SrcCurrency != nil {
		l = len(*m.SrcCurrency)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.DstCurrency != nil {
		l = len(*m.DstCurrency)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.MerchantId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.MerchantId))
	}
	if m.MpskuRegion != nil {
		l = len(*m.MpskuRegion)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConvertCurrencyResponse) Size() (n int) {
	var l int
	_ = l
	if m.DebugMsg != nil {
		l = len(*m.DebugMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if len(m.DstPrices) > 0 {
		for _, e := range m.DstPrices {
			n += 1 + sovPriceSyncPriceCalculation(uint64(e))
		}
	}
	if m.ExchangeRate != nil {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CalculateAPriceByPItemForLocalSIPRequest) Size() (n int) {
	var l int
	_ = l
	if m.PShopId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.PShopId))
	}
	if m.PRegion != nil {
		l = len(*m.PRegion)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.PItemId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.PItemId))
	}
	if len(m.Queries) > 0 {
		for _, e := range m.Queries {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.CalculateForCreate != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocalSipAPriceQueryId) Size() (n int) {
	var l int
	_ = l
	if m.AShopId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.AShopId))
	}
	if m.ARegion != nil {
		l = len(*m.ARegion)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.AItemId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.AItemId))
	}
	if m.AModelId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.AModelId))
	}
	if m.PNormalPrice != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.PNormalPrice))
	}
	if len(m.PPromotionPrices) > 0 {
		for _, e := range m.PPromotionPrices {
			n += 1 + sovPriceSyncPriceCalculation(uint64(e))
		}
	}
	if len(m.EnabledChannelIdList) > 0 {
		for _, e := range m.EnabledChannelIdList {
			n += 1 + sovPriceSyncPriceCalculation(uint64(e))
		}
	}
	if m.LeafCategoryId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.LeafCategoryId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CalculateAPriceByPItemForLocalSIPResponse) Size() (n int) {
	var l int
	_ = l
	if m.DebugMsg != nil {
		l = len(*m.DebugMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if len(m.AShopItemCustomizedOpls) > 0 {
		for _, e := range m.AShopItemCustomizedOpls {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShopItemCustomizedOPL) Size() (n int) {
	var l int
	_ = l
	if m.ShopId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ShopId))
	}
	if m.ItemId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ItemId))
	}
	if m.CustomizedOpl != nil {
		l = m.CustomizedOpl.Size()
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocalSipAPriceInfo) Size() (n int) {
	var l int
	_ = l
	if m.ErrCode != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ErrCode))
	}
	if m.ErrMsg != nil {
		l = len(*m.ErrMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.NormalPrice != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.NormalPrice))
	}
	if len(m.PromotionPrices) > 0 {
		for _, e := range m.PromotionPrices {
			n += 1 + sovPriceSyncPriceCalculation(uint64(e))
		}
	}
	if m.AShopId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.AShopId))
	}
	if m.ARegion != nil {
		l = len(*m.ARegion)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.AItemId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.AItemId))
	}
	if m.AModelId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.AModelId))
	}
	if m.Snap != nil {
		l = m.Snap.Size()
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocalSipPriceFactorSnap) Size() (n int) {
	var l int
	_ = l
	if m.Weight != nil {
		n += 9
	}
	if m.ShopMargin != nil {
		n += 9
	}
	if m.ItemMargin != nil {
		n += 9
	}
	if m.ShippingFee != nil {
		n += 9
	}
	if m.CountryMargin != nil {
		n += 9
	}
	if m.ExchangeRate != nil {
		n += 9
	}
	if m.InitHiddenPrice != nil {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CalculateSipItemPriceForCbSipRequest) Size() (n int) {
	var l int
	_ = l
	if m.ShopId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ShopId))
	}
	if m.Region != nil {
		l = len(*m.Region)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.ItemId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ItemId))
	}
	if len(m.ChannelIdList) > 0 {
		for _, e := range m.ChannelIdList {
			n += 1 + sovPriceSyncPriceCalculation(uint64(e))
		}
	}
	if m.LeafCategoryId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.LeafCategoryId))
	}
	if m.Weight != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.Weight))
	}
	if len(m.Queries) > 0 {
		for _, e := range m.Queries {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SipItemPriceForCbSipQueryId) Size() (n int) {
	var l int
	_ = l
	if m.ModelId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ModelId))
	}
	if m.Price != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.Price))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CalculateSipItemPriceForCbSipResponse) Size() (n int) {
	var l int
	_ = l
	if m.DebugMsg != nil {
		l = len(*m.DebugMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if len(m.CbSipItemPriceInfoList) > 0 {
		for _, e := range m.CbSipItemPriceInfoList {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CbSipItemPriceInfo) Size() (n int) {
	var l int
	_ = l
	if m.ErrCode != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ErrCode))
	}
	if m.ErrMsg != nil {
		l = len(*m.ErrMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.ModelId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ModelId))
	}
	if m.CbSipItemPrice != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.CbSipItemPrice))
	}
	if m.Currency != nil {
		l = len(*m.Currency)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CalculateAPriceByPItemForCBSIPRequest) Size() (n int) {
	var l int
	_ = l
	if m.MerchantId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.MerchantId))
	}
	if m.MerchantRegion != nil {
		l = len(*m.MerchantRegion)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.PShopId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.PShopId))
	}
	if m.PRegion != nil {
		l = len(*m.PRegion)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.PItemId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.PItemId))
	}
	if m.AShopId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.AShopId))
	}
	if m.ARegion != nil {
		l = len(*m.ARegion)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.AItemId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.AItemId))
	}
	if len(m.Queries) > 0 {
		for _, e := range m.Queries {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.CalculateForCreate != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AItemCBSIPQueryId) Size() (n int) {
	var l int
	_ = l
	if m.AModelId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.AModelId))
	}
	if m.PItemPrice != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.PItemPrice))
	}
	if m.PNormalPrice != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.PNormalPrice))
	}
	if m.PPromotionPrice != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.PPromotionPrice))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CalculateAPriceByPItemForCBSIPResponse) Size() (n int) {
	var l int
	_ = l
	if m.DebugMsg != nil {
		l = len(*m.DebugMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.CustomizedOpl != nil {
		l = m.CustomizedOpl.Size()
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CustomizedOPL) Size() (n int) {
	var l int
	_ = l
	if m.StartTime != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.EndTime))
	}
	if m.PurchaseLimit != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.PurchaseLimit))
	}
	if m.RepeatedTimes != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.RepeatedTimes))
	}
	if m.PromotionId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.PromotionId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AItemPriceResultInfo) Size() (n int) {
	var l int
	_ = l
	if m.ErrCode != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ErrCode))
	}
	if m.ErrMsg != nil {
		l = len(*m.ErrMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.NormalPrice != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.NormalPrice))
	}
	if m.SettlementPrice != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.SettlementPrice))
	}
	if m.SettlementPriceCurrency != nil {
		l = len(*m.SettlementPriceCurrency)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.PromotionPrice != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.PromotionPrice))
	}
	if m.Snap != nil {
		l = m.Snap.Size()
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CbSipPriceFactorSnap) Size() (n int) {
	var l int
	_ = l
	if m.Weight != nil {
		n += 9
	}
	if m.CountryMargin != nil {
		n += 9
	}
	if m.ShopMargin != nil {
		n += 9
	}
	if m.ItemMargin != nil {
		n += 9
	}
	if m.ExchangeRate != nil {
		n += 9
	}
	if m.PriceRatio != nil {
		n += 9
	}
	if m.AffiHiddenPrice != nil {
		n += 9
	}
	if m.SrcCurrency != nil {
		l = len(*m.SrcCurrency)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.ServiceFee != nil {
		n += 9
	}
	if m.CommissionFee != nil {
		n += 9
	}
	if m.HandlingFee != nil {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CalculatePriceForCbscRequest) Size() (n int) {
	var l int
	_ = l
	if m.MerchantId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.MerchantId))
	}
	if m.IsMtskuToMpsku != nil {
		n += 2
	}
	if len(m.Queries) > 0 {
		for _, e := range m.Queries {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MtskuMpskuPriceQueryId) Size() (n int) {
	var l int
	_ = l
	if m.SrcPrice != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.SrcPrice))
	}
	if m.MpskuShopId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.MpskuShopId))
	}
	if m.MpskuRegion != nil {
		l = len(*m.MpskuRegion)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.MpskuItemId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.MpskuItemId))
	}
	if m.Weight != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.Weight))
	}
	if m.LeafCategoryId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.LeafCategoryId))
	}
	if len(m.EnabledChannelIdList) > 0 {
		for _, e := range m.EnabledChannelIdList {
			n += 1 + sovPriceSyncPriceCalculation(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CalculatePriceForCbscResponse) Size() (n int) {
	var l int
	_ = l
	if m.DebugMsg != nil {
		l = len(*m.DebugMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MtskuMpskuPriceQueryInfo) Size() (n int) {
	var l int
	_ = l
	if m.ErrCode != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ErrCode))
	}
	if m.ErrMsg != nil {
		l = len(*m.ErrMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.DstPrice != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.DstPrice))
	}
	if m.HidePrice != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.HidePrice))
	}
	if m.HidePriceError != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.HidePriceError))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateProfitRateLimitRequest) Size() (n int) {
	var l int
	_ = l
	if m.MerchantRegion != nil {
		l = len(*m.MerchantRegion)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.Region != nil {
		l = len(*m.Region)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.ProfitRateMin != nil {
		n += 9
	}
	if m.ProfitRateMax != nil {
		n += 9
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateProfitRateLimitResponse) Size() (n int) {
	var l int
	_ = l
	if m.DebugMsg != nil {
		l = len(*m.DebugMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetProfitRateLimitListRequest) Size() (n int) {
	var l int
	_ = l
	if m.MerchantRegion != nil {
		l = len(*m.MerchantRegion)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetProfitRateLimitListResponse) Size() (n int) {
	var l int
	_ = l
	if m.DebugMsg != nil {
		l = len(*m.DebugMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProfitRateLimit) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.Id))
	}
	if m.Region != nil {
		l = len(*m.Region)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.ProfitRateMin != nil {
		n += 9
	}
	if m.ProfitRateMax != nil {
		n += 9
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.UpdateTime != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAShopMarginRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.ShopIds) > 0 {
		for _, e := range m.ShopIds {
			n += 1 + sovPriceSyncPriceCalculation(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAShopMarginResponse) Size() (n int) {
	var l int
	_ = l
	if m.DebugMsg != nil {
		l = len(*m.DebugMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if len(m.AShopMargins) > 0 {
		for _, e := range m.AShopMargins {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShopMargin) Size() (n int) {
	var l int
	_ = l
	if m.ShopId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ShopId))
	}
	if m.Margin != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.Margin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAShopPriceRatioRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.ShopIds) > 0 {
		for _, e := range m.ShopIds {
			n += 1 + sovPriceSyncPriceCalculation(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAShopPriceRatioResponse) Size() (n int) {
	var l int
	_ = l
	if m.DebugMsg != nil {
		l = len(*m.DebugMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if len(m.AShopPriceRatios) > 0 {
		for _, e := range m.AShopPriceRatios {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShopPriceRatio) Size() (n int) {
	var l int
	_ = l
	if m.ShopId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ShopId))
	}
	if m.PriceRatio != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.PriceRatio))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAItemMarginRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.ShopIdToItemIdsList) > 0 {
		for _, e := range m.ShopIdToItemIdsList {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShopIDToItemIDs) Size() (n int) {
	var l int
	_ = l
	if m.ShopId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ShopId))
	}
	if len(m.ItemIds) > 0 {
		for _, e := range m.ItemIds {
			n += 1 + sovPriceSyncPriceCalculation(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAItemMarginResponse) Size() (n int) {
	var l int
	_ = l
	if m.DebugMsg != nil {
		l = len(*m.DebugMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if len(m.AItemMargins) > 0 {
		for _, e := range m.AItemMargins {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ItemMargin) Size() (n int) {
	var l int
	_ = l
	if m.ItemId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ItemId))
	}
	if m.ItemMargin != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ItemMargin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAItemRealWeightRequest) Size() (n int) {
	var l int
	_ = l
	if m.ShopId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ShopId))
	}
	if m.ItemId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ItemId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAItemRealWeightResponse) Size() (n int) {
	var l int
	_ = l
	if m.DebugMsg != nil {
		l = len(*m.DebugMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.AItemRealWeight != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.AItemRealWeight))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetAShopMarginRequest) Size() (n int) {
	var l int
	_ = l
	if m.ShopId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ShopId))
	}
	if m.Margin != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.Margin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetAShopMarginResponse) Size() (n int) {
	var l int
	_ = l
	if m.DebugMsg != nil {
		l = len(*m.DebugMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShopPriceRatioSetting) Size() (n int) {
	var l int
	_ = l
	if m.ShopId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.ShopId))
	}
	if m.Region != nil {
		l = len(*m.Region)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.PriceRatio != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.PriceRatio))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetAShopPriceRatioBatchResponse) Size() (n int) {
	var l int
	_ = l
	if m.DebugMsg != nil {
		l = len(*m.DebugMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetAItemMarginRequest) Size() (n int) {
	var l int
	_ = l
	if m.AShopId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.AShopId))
	}
	if m.AItemId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.AItemId))
	}
	if m.AItemMargin != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.AItemMargin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetAItemMarginResponse) Size() (n int) {
	var l int
	_ = l
	if m.DebugMsg != nil {
		l = len(*m.DebugMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetAItemRealWeightRequest) Size() (n int) {
	var l int
	_ = l
	if m.AShopId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.AShopId))
	}
	if m.AItemId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.AItemId))
	}
	if m.AItemRealWeight != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.AItemRealWeight))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetAItemRealWeightResponse) Size() (n int) {
	var l int
	_ = l
	if m.DebugMsg != nil {
		l = len(*m.DebugMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPShopOpsPriceRatioSettingBatchRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.PShopIds) > 0 {
		for _, e := range m.PShopIds {
			n += 1 + sovPriceSyncPriceCalculation(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PShopOpsPriceRatioSetting) Size() (n int) {
	var l int
	_ = l
	if m.IsControlledByOps != nil {
		n += 2
	}
	if m.StartTime != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.EndTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPShopOpsPriceRatioSettingBatchResponse) Size() (n int) {
	var l int
	_ = l
	if m.DebugMsg != nil {
		l = len(*m.DebugMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if len(m.OpsPriceRatioSetting) > 0 {
		for _, e := range m.OpsPriceRatioSetting {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetPriceRatioRequest) Size() (n int) {
	var l int
	_ = l
	if m.PShopId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.PShopId))
	}
	if len(m.AShopPriceRatioSettings) > 0 {
		for _, e := range m.AShopPriceRatioSettings {
			l = e.Size()
			n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
		}
	}
	if m.IsCreate != nil {
		n += 2
	}
	if m.IsOps != nil {
		n += 2
	}
	if m.SkipControlFlagCheck != nil {
		n += 2
	}
	if m.NeedSyncExistingData != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetPriceRatioResponse) Size() (n int) {
	var l int
	_ = l
	if m.DebugMsg != nil {
		l = len(*m.DebugMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCBSIPAShopSellerDiscountPromotionRequest) Size() (n int) {
	var l int
	_ = l
	if m.AShopId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.AShopId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCBSIPAShopSellerDiscountPromotionResponse) Size() (n int) {
	var l int
	_ = l
	if m.DebugMsg != nil {
		l = len(*m.DebugMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.PromotionId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.PromotionId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateCBSIPAShopSellerDiscountPromotionRequest) Size() (n int) {
	var l int
	_ = l
	if m.AShopId != nil {
		n += 1 + sovPriceSyncPriceCalculation(uint64(*m.AShopId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateCBSIPAShopSellerDiscountPromotionResponse) Size() (n int) {
	var l int
	_ = l
	if m.DebugMsg != nil {
		l = len(*m.DebugMsg)
		n += 1 + l + sovPriceSyncPriceCalculation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPriceSyncPriceCalculation(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPriceSyncPriceCalculation(x uint64) (n int) {
	return sovPriceSyncPriceCalculation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Constant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Constant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Constant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalcGlobalDiscountInfoByItemIdsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalcGlobalDiscountInfoByItemIdsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalcGlobalDiscountInfoByItemIdsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queries = append(m.Queries, &GlobalDiscountQueryId{})
			if err := m.Queries[len(m.Queries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalDiscountQueryId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalDiscountQueryId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalDiscountQueryId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MerchantId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MpskuShopId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MpskuShopId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MpskuItemId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MpskuItemId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MpskuModelId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MpskuModelId = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MpskuRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MpskuRegion = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MtskuOriginalPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MtskuOriginalPrice = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalDiscountInputType", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GlobalDiscountInputType = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalDiscountQueryData", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GlobalDiscountQueryData = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalcGlobalDiscountInfoByItemIdsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalcGlobalDiscountInfoByItemIdsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalcGlobalDiscountInfoByItemIdsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMsg = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalDiscountInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GlobalDiscountInfoList = append(m.GlobalDiscountInfoList, &GlobalDiscountInfo{})
			if err := m.GlobalDiscountInfoList[len(m.GlobalDiscountInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalDiscountInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalDiscountInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalDiscountInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ErrCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ErrMsg = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MerchantId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MpskuShopId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MpskuShopId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MpskuItemId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MpskuItemId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MpskuModelId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MpskuModelId = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MpskuRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MpskuRegion = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MtskuOriginalPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MtskuOriginalPrice = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalDiscountInputType", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GlobalDiscountInputType = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalDiscountQueryData", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GlobalDiscountQueryData = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalDiscountQueryResult", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GlobalDiscountQueryResult = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemModelId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemModelId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemModelId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ItemId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ModelId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalcLocalSipOverseaDiscountPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalcLocalSipOverseaDiscountPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalcLocalSipOverseaDiscountPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffiItemModelIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AffiItemModelIds = append(m.AffiItemModelIds, &ItemModelId{})
			if err := m.AffiItemModelIds[len(m.AffiItemModelIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffiShopId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AffiShopId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffiRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AffiRegion = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountRate", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DiscountRate = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalcLocalSipOverseaDiscountPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalcLocalSipOverseaDiscountPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalcLocalSipOverseaDiscountPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &LocalSIPAffiPriceResult{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMsg = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalSIPAffiPriceResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalSIPAffiPriceResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalSIPAffiPriceResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffiPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AffiPrice = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorDetail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ErrorDetail = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalcErr", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CalcErr = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCbSipAHiddenFeeConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCbSipAHiddenFeeConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCbSipAHiddenFeeConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfoType", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InfoType = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageIndex", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageIndex = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RuleKey = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCbSipAHiddenFeeConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCbSipAHiddenFeeConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCbSipAHiddenFeeConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMsg = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Total = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &AHiddenFeeRuleInfo{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleRegionSettingsStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RuleRegionSettingsStr = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AHiddenFeeRuleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AHiddenFeeRuleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AHiddenFeeRuleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RuleKey = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DescInfo = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details, &AHiddenFeeRuleRow{})
			if err := m.Details[len(m.Details)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AHiddenFeeRuleRow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AHiddenFeeRuleRow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AHiddenFeeRuleRow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightRange", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WeightRange = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartPrice = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartWeight", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartWeight = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundSize", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RoundSize = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightStep", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WeightStep = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adjustment", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Adjustment = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DescInfo = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCbSipRateConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCbSipRateConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCbSipRateConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbSipRateInfoType", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CbSipRateInfoType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCbSipRateConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCbSipRateConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCbSipRateConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMsg = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSipRateStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DefaultSipRateStr = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SipRateLimitStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SipRateLimitStr = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCbSipShopLevelConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCbSipShopLevelConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCbSipShopLevelConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PShopId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PShopId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCbSipShopLevelConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCbSipShopLevelConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCbSipShopLevelConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMsg = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AShopConfigList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AShopConfigList = append(m.AShopConfigList, &CbSipAffiShopInfo{})
			if err := m.AShopConfigList[len(m.AShopConfigList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CbSipAffiShopInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CbSipAffiShopInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CbSipAffiShopInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AShopId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AShopId = &v
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SipRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.SipRate = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCbSipRegionLevelConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCbSipRegionLevelConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCbSipRegionLevelConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionPairList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionPairList = append(m.RegionPairList, &RegionPair{})
			if err := m.RegionPairList[len(m.RegionPairList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfoType", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InfoType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCbSipRegionLevelConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCbSipRegionLevelConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCbSipRegionLevelConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMsg = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRateConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExchangeRateConfig == nil {
				m.ExchangeRateConfig = &CbSipRegionLevelExchangeRateConfig{}
			}
			if err := m.ExchangeRateConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryMarginConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CountryMarginConfig == nil {
				m.CountryMarginConfig = &CbSipRegionLevelCountryMarginConfig{}
			}
			if err := m.CountryMarginConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CbSipRegionLevelExchangeRateConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CbSipRegionLevelExchangeRateConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CbSipRegionLevelExchangeRateConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRateList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeRateList = append(m.ExchangeRateList, &ExchangeRateData{})
			if err := m.ExchangeRateList[len(m.ExchangeRateList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeRateData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeRateData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeRateData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcCurrency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SrcCurrency = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstCurrency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DstCurrency = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ExchangeRate = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CbSipRegionLevelCountryMarginConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CbSipRegionLevelCountryMarginConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CbSipRegionLevelCountryMarginConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryMarginList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryMarginList = append(m.CountryMarginList, &CountryMarginData{})
			if err := m.CountryMarginList[len(m.CountryMarginList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountryMarginData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountryMarginData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountryMarginData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SrcRegion = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DstRegion = &s
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryMargin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.CountryMargin = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLocalSipPriceFactorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLocalSipPriceFactorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLocalSipPriceFactorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionPairList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionPairList = append(m.RegionPairList, &RegionPair{})
			if err := m.RegionPairList[len(m.RegionPairList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfoType", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InfoType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SrcRegion = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DstRegion = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLocalSipPriceFactorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLocalSipPriceFactorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLocalSipPriceFactorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMsg = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &LocalSipPriceFactorInfo{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalSipPriceFactorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalSipPriceFactorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalSipPriceFactorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasicInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BasicInfo == nil {
				m.BasicInfo = &LocalSipPriceFactorBasicInfo{}
			}
			if err := m.BasicInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HiddenFeeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HiddenFeeInfo == nil {
				m.HiddenFeeInfo = &LocalSipPriceFactorHiddenFeeInfo{}
			}
			if err := m.HiddenFeeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingFeeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShippingFeeInfo == nil {
				m.ShippingFeeInfo = &LocalSipPriceFactorShippingFeeInfo{}
			}
			if err := m.ShippingFeeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalSipPriceFactorBasicInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalSipPriceFactorBasicInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalSipPriceFactorBasicInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryMargin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.CountryMargin = &v2
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCountryMargin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.MinCountryMargin = &v2
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCountryMargin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.MaxCountryMargin = &v2
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.ExchangeRate = &v2
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinExchangeRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.MinExchangeRate = &v2
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxExchangeRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.MaxExchangeRate = &v2
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialHiddenFeeToggle", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InitialHiddenFeeToggle = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingFeeToggle", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShippingFeeToggle = &v
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitHiddenPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.InitHiddenPrice = &v2
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinInitHiddenPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.MinInitHiddenPrice = &v2
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxInitHiddenPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.MaxInitHiddenPrice = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalSipPriceFactorShippingFeeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalSipPriceFactorShippingFeeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalSipPriceFactorShippingFeeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalShippingFeeRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalShippingFeeRules = append(m.LocalShippingFeeRules, &LocalShippingFeeRule{})
			if err := m.LocalShippingFeeRules[len(m.LocalShippingFeeRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalSipPriceFactorHiddenFeeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalSipPriceFactorHiddenFeeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalSipPriceFactorHiddenFeeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalHiddenFeeRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalHiddenFeeRules = append(m.LocalHiddenFeeRules, &LocalShippingFeeRule{})
			if err := m.LocalHiddenFeeRules[len(m.LocalHiddenFeeRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalShippingFeeRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalShippingFeeRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalShippingFeeRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MstRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MstRegion = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffiRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AffiRegion = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Weight = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Fee = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ctime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCbscPriceFactorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCbscPriceFactorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCbscPriceFactorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfoType", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InfoType = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MerchantId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainAccountId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MainAccountId = &v
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPriceSyncPriceCalculation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ShopIdList = append(m.ShopIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPriceSyncPriceCalculation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPriceSyncPriceCalculation
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPriceSyncPriceCalculation
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ShopIdList = append(m.ShopIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopIdList", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ShopRegion = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCbscPriceFactorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCbscPriceFactorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCbscPriceFactorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMsg = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Results == nil {
				m.Results = &CbscPriceFactor{}
			}
			if err := m.Results.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CbscPriceFactor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CbscPriceFactor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CbscPriceFactor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopFeeRateList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShopFeeRateList = append(m.ShopFeeRateList, &CbscShopLevelFeeRate{})
			if err := m.ShopFeeRateList[len(m.ShopFeeRateList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeeRateLimit == nil {
				m.FeeRateLimit = &CbscFeeRateLimit{}
			}
			if err := m.FeeRateLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRateList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeRateList = append(m.ExchangeRateList, &CbscExchangeRate{})
			if err := m.ExchangeRateList[len(m.ExchangeRateList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CbscShopLevelFeeRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CbscShopLevelFeeRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CbscShopLevelFeeRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShopId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionFeeRate", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransactionFeeRate = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfitRate", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProfitRate = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfitRateStatus", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProfitRateStatus = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFeeRate", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceFeeRate = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFeeRateStatus", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceFeeRateStatus = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRate", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommissionRate = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceServiceFeeRate", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReferenceServiceFeeRate = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CbscFeeRateLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CbscFeeRateLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CbscFeeRateLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFeeLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceFeeLimit == nil {
				m.ServiceFeeLimit = &CbscServiceFeeRateLimit{}
			}
			if err := m.ServiceFeeLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfitRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfitRateLimit = append(m.ProfitRateLimit, &CbscProfitRateLimit{})
			if err := m.ProfitRateLimit[len(m.ProfitRateLimit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CbscProfitRateLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CbscProfitRateLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CbscProfitRateLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinProfitRate", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinProfitRate = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxProfitRate", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxProfitRate = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Region = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CbscServiceFeeRateLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CbscServiceFeeRateLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CbscServiceFeeRateLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinServiceFeeRate", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinServiceFeeRate = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxServiceFeeRate", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxServiceFeeRate = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CbscExchangeRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CbscExchangeRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CbscExchangeRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.ExchangeRate = &v2
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Region = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetCbscPriceFactorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetCbscPriceFactorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetCbscPriceFactorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MerchantId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopCbscPriceFactors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShopCbscPriceFactors = append(m.ShopCbscPriceFactors, &ShopCbscPriceFactorSetting{})
			if err := m.ShopCbscPriceFactors[len(m.ShopCbscPriceFactors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetCbscPriceFactorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetCbscPriceFactorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetCbscPriceFactorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMsg = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShopCbscPriceFactorSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopCbscPriceFactorSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopCbscPriceFactorSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShopId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Region = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfitRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProfitRate = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFeeRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceFeeRate = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConvertCurrencyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConvertCurrencyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConvertCurrencyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPriceSyncPriceCalculation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SrcPriceList = append(m.SrcPriceList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPriceSyncPriceCalculation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPriceSyncPriceCalculation
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPriceSyncPriceCalculation
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SrcPriceList = append(m.SrcPriceList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPriceList", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRateSource", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExchangeRateSource = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcCurrency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SrcCurrency = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstCurrency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DstCurrency = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MerchantId = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MpskuRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MpskuRegion = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConvertCurrencyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConvertCurrencyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConvertCurrencyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMsg = &s
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPriceSyncPriceCalculation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DstPrices = append(m.DstPrices, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPriceSyncPriceCalculation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPriceSyncPriceCalculation
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPriceSyncPriceCalculation
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DstPrices = append(m.DstPrices, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPrices", wireType)
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.ExchangeRate = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalculateAPriceByPItemForLocalSIPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalculateAPriceByPItemForLocalSIPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalculateAPriceByPItemForLocalSIPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PShopId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PShopId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PRegion = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PItemId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PItemId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queries = append(m.Queries, &LocalSipAPriceQueryId{})
			if err := m.Queries[len(m.Queries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalculateForCreate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CalculateForCreate = &b
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalSipAPriceQueryId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalSipAPriceQueryId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalSipAPriceQueryId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AShopId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AShopId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ARegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ARegion = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AItemId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AItemId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AModelId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AModelId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PNormalPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PNormalPrice = &v
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPriceSyncPriceCalculation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PPromotionPrices = append(m.PPromotionPrices, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPriceSyncPriceCalculation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPriceSyncPriceCalculation
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPriceSyncPriceCalculation
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PPromotionPrices = append(m.PPromotionPrices, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PPromotionPrices", wireType)
			}
		case 7:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPriceSyncPriceCalculation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EnabledChannelIdList = append(m.EnabledChannelIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPriceSyncPriceCalculation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPriceSyncPriceCalculation
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPriceSyncPriceCalculation
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EnabledChannelIdList = append(m.EnabledChannelIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledChannelIdList", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeafCategoryId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LeafCategoryId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalculateAPriceByPItemForLocalSIPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalculateAPriceByPItemForLocalSIPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalculateAPriceByPItemForLocalSIPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMsg = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &LocalSipAPriceInfo{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AShopItemCustomizedOpls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AShopItemCustomizedOpls = append(m.AShopItemCustomizedOpls, &ShopItemCustomizedOPL{})
			if err := m.AShopItemCustomizedOpls[len(m.AShopItemCustomizedOpls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShopItemCustomizedOPL) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopItemCustomizedOPL: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopItemCustomizedOPL: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShopId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ItemId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomizedOpl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomizedOpl == nil {
				m.CustomizedOpl = &CustomizedOPL{}
			}
			if err := m.CustomizedOpl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalSipAPriceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalSipAPriceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalSipAPriceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ErrCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ErrMsg = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NormalPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NormalPrice = &v
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPriceSyncPriceCalculation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PromotionPrices = append(m.PromotionPrices, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPriceSyncPriceCalculation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPriceSyncPriceCalculation
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPriceSyncPriceCalculation
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PromotionPrices = append(m.PromotionPrices, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionPrices", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AShopId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AShopId = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ARegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ARegion = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AItemId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AItemId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AModelId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AModelId = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Snap == nil {
				m.Snap = &LocalSipPriceFactorSnap{}
			}
			if err := m.Snap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalSipPriceFactorSnap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalSipPriceFactorSnap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalSipPriceFactorSnap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Weight = &v2
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopMargin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.ShopMargin = &v2
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemMargin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.ItemMargin = &v2
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingFee", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.ShippingFee = &v2
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryMargin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.CountryMargin = &v2
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.ExchangeRate = &v2
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitHiddenPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.InitHiddenPrice = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalculateSipItemPriceForCbSipRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalculateSipItemPriceForCbSipRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalculateSipItemPriceForCbSipRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShopId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Region = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ItemId = &v
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPriceSyncPriceCalculation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChannelIdList = append(m.ChannelIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPriceSyncPriceCalculation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPriceSyncPriceCalculation
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPriceSyncPriceCalculation
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChannelIdList = append(m.ChannelIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelIdList", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeafCategoryId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LeafCategoryId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Weight = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queries = append(m.Queries, &SipItemPriceForCbSipQueryId{})
			if err := m.Queries[len(m.Queries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SipItemPriceForCbSipQueryId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SipItemPriceForCbSipQueryId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SipItemPriceForCbSipQueryId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ModelId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalculateSipItemPriceForCbSipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalculateSipItemPriceForCbSipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalculateSipItemPriceForCbSipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMsg = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbSipItemPriceInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CbSipItemPriceInfoList = append(m.CbSipItemPriceInfoList, &CbSipItemPriceInfo{})
			if err := m.CbSipItemPriceInfoList[len(m.CbSipItemPriceInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CbSipItemPriceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CbSipItemPriceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CbSipItemPriceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ErrCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ErrMsg = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ModelId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbSipItemPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CbSipItemPrice = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Currency = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalculateAPriceByPItemForCBSIPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalculateAPriceByPItemForCBSIPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalculateAPriceByPItemForCBSIPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MerchantId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MerchantRegion = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PShopId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PShopId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PRegion = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PItemId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PItemId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AShopId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AShopId = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ARegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ARegion = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AItemId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AItemId = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queries = append(m.Queries, &AItemCBSIPQueryId{})
			if err := m.Queries[len(m.Queries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalculateForCreate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CalculateForCreate = &b
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AItemCBSIPQueryId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AItemCBSIPQueryId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AItemCBSIPQueryId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AModelId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AModelId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PItemPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PItemPrice = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PNormalPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PNormalPrice = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PPromotionPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PPromotionPrice = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalculateAPriceByPItemForCBSIPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalculateAPriceByPItemForCBSIPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalculateAPriceByPItemForCBSIPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMsg = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &AItemPriceResultInfo{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomizedOpl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomizedOpl == nil {
				m.CustomizedOpl = &CustomizedOPL{}
			}
			if err := m.CustomizedOpl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomizedOPL) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomizedOPL: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomizedOPL: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseLimit", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PurchaseLimit = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedTimes", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RepeatedTimes = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PromotionId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AItemPriceResultInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AItemPriceResultInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AItemPriceResultInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ErrCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ErrMsg = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NormalPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NormalPrice = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettlementPrice = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementPriceCurrency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SettlementPriceCurrency = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PromotionPrice = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Snap == nil {
				m.Snap = &CbSipPriceFactorSnap{}
			}
			if err := m.Snap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CbSipPriceFactorSnap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CbSipPriceFactorSnap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CbSipPriceFactorSnap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Weight = &v2
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryMargin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.CountryMargin = &v2
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopMargin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.ShopMargin = &v2
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemMargin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.ItemMargin = &v2
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.ExchangeRate = &v2
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceRatio", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.PriceRatio = &v2
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffiHiddenPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.AffiHiddenPrice = &v2
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcCurrency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SrcCurrency = &s
			iNdEx = postIndex
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFee", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.ServiceFee = &v2
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionFee", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.CommissionFee = &v2
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandlingFee", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.HandlingFee = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalculatePriceForCbscRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalculatePriceForCbscRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalculatePriceForCbscRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MerchantId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMtskuToMpsku", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsMtskuToMpsku = &b
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queries = append(m.Queries, &MtskuMpskuPriceQueryId{})
			if err := m.Queries[len(m.Queries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MtskuMpskuPriceQueryId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MtskuMpskuPriceQueryId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MtskuMpskuPriceQueryId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SrcPrice = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MpskuShopId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MpskuShopId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MpskuRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MpskuRegion = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MpskuItemId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MpskuItemId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Weight = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeafCategoryId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LeafCategoryId = &v
		case 7:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPriceSyncPriceCalculation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EnabledChannelIdList = append(m.EnabledChannelIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPriceSyncPriceCalculation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPriceSyncPriceCalculation
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPriceSyncPriceCalculation
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EnabledChannelIdList = append(m.EnabledChannelIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledChannelIdList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalculatePriceForCbscResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalculatePriceForCbscResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalculatePriceForCbscResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMsg = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &MtskuMpskuPriceQueryInfo{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MtskuMpskuPriceQueryInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MtskuMpskuPriceQueryInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MtskuMpskuPriceQueryInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ErrCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ErrMsg = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DstPrice = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HidePrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HidePrice = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HidePriceError", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HidePriceError = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateProfitRateLimitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateProfitRateLimitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateProfitRateLimitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MerchantRegion = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Region = &s
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfitRateMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.ProfitRateMin = &v2
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfitRateMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.ProfitRateMax = &v2
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateProfitRateLimitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateProfitRateLimitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateProfitRateLimitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMsg = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetProfitRateLimitListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetProfitRateLimitListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetProfitRateLimitListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MerchantRegion = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetProfitRateLimitListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetProfitRateLimitListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetProfitRateLimitListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMsg = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &ProfitRateLimit{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfitRateLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfitRateLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfitRateLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Region = &s
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfitRateMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.ProfitRateMin = &v2
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfitRateMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.ProfitRateMax = &v2
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAShopMarginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAShopMarginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAShopMarginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPriceSyncPriceCalculation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ShopIds = append(m.ShopIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPriceSyncPriceCalculation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPriceSyncPriceCalculation
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPriceSyncPriceCalculation
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ShopIds = append(m.ShopIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAShopMarginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAShopMarginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAShopMarginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMsg = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AShopMargins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AShopMargins = append(m.AShopMargins, &ShopMargin{})
			if err := m.AShopMargins[len(m.AShopMargins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShopMargin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopMargin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopMargin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShopId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Margin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Margin = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAShopPriceRatioRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAShopPriceRatioRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAShopPriceRatioRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPriceSyncPriceCalculation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ShopIds = append(m.ShopIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPriceSyncPriceCalculation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPriceSyncPriceCalculation
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPriceSyncPriceCalculation
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ShopIds = append(m.ShopIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAShopPriceRatioResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAShopPriceRatioResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAShopPriceRatioResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMsg = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AShopPriceRatios", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AShopPriceRatios = append(m.AShopPriceRatios, &ShopPriceRatio{})
			if err := m.AShopPriceRatios[len(m.AShopPriceRatios)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShopPriceRatio) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopPriceRatio: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopPriceRatio: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShopId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceRatio", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PriceRatio = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAItemMarginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAItemMarginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAItemMarginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopIdToItemIdsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShopIdToItemIdsList = append(m.ShopIdToItemIdsList, &ShopIDToItemIDs{})
			if err := m.ShopIdToItemIdsList[len(m.ShopIdToItemIdsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShopIDToItemIDs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopIDToItemIDs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopIDToItemIDs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShopId = &v
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPriceSyncPriceCalculation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ItemIds = append(m.ItemIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPriceSyncPriceCalculation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPriceSyncPriceCalculation
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPriceSyncPriceCalculation
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ItemIds = append(m.ItemIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAItemMarginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAItemMarginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAItemMarginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMsg = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AItemMargins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AItemMargins = append(m.AItemMargins, &ItemMargin{})
			if err := m.AItemMargins[len(m.AItemMargins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemMargin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemMargin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemMargin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ItemId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemMargin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ItemMargin = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAItemRealWeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAItemRealWeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAItemRealWeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShopId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ItemId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAItemRealWeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAItemRealWeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAItemRealWeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMsg = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AItemRealWeight", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AItemRealWeight = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetAShopMarginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetAShopMarginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetAShopMarginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShopId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Margin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Margin = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetAShopMarginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetAShopMarginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetAShopMarginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMsg = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShopPriceRatioSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopPriceRatioSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopPriceRatioSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShopId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Region = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceRatio", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PriceRatio = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetAShopPriceRatioBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetAShopPriceRatioBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetAShopPriceRatioBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMsg = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetAItemMarginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetAItemMarginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetAItemMarginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AShopId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AShopId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AItemId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AItemId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AItemMargin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AItemMargin = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetAItemMarginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetAItemMarginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetAItemMarginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMsg = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetAItemRealWeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetAItemRealWeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetAItemRealWeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AShopId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AShopId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AItemId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AItemId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AItemRealWeight", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AItemRealWeight = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetAItemRealWeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetAItemRealWeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetAItemRealWeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMsg = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPShopOpsPriceRatioSettingBatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPShopOpsPriceRatioSettingBatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPShopOpsPriceRatioSettingBatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPriceSyncPriceCalculation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PShopIds = append(m.PShopIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPriceSyncPriceCalculation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPriceSyncPriceCalculation
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPriceSyncPriceCalculation
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PShopIds = append(m.PShopIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PShopIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PShopOpsPriceRatioSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PShopOpsPriceRatioSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PShopOpsPriceRatioSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsControlledByOps", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsControlledByOps = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPShopOpsPriceRatioSettingBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPShopOpsPriceRatioSettingBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPShopOpsPriceRatioSettingBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMsg = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpsPriceRatioSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpsPriceRatioSetting = append(m.OpsPriceRatioSetting, &PShopOpsPriceRatioSetting{})
			if err := m.OpsPriceRatioSetting[len(m.OpsPriceRatioSetting)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetPriceRatioRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetPriceRatioRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetPriceRatioRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PShopId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PShopId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AShopPriceRatioSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AShopPriceRatioSettings = append(m.AShopPriceRatioSettings, &ShopPriceRatioSetting{})
			if err := m.AShopPriceRatioSettings[len(m.AShopPriceRatioSettings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCreate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsCreate = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOps", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOps = &b
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipControlFlagCheck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.SkipControlFlagCheck = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedSyncExistingData", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.NeedSyncExistingData = &b
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetPriceRatioResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetPriceRatioResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetPriceRatioResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMsg = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCBSIPAShopSellerDiscountPromotionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCBSIPAShopSellerDiscountPromotionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCBSIPAShopSellerDiscountPromotionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AShopId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AShopId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCBSIPAShopSellerDiscountPromotionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCBSIPAShopSellerDiscountPromotionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCBSIPAShopSellerDiscountPromotionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMsg = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PromotionId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCBSIPAShopSellerDiscountPromotionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCBSIPAShopSellerDiscountPromotionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCBSIPAShopSellerDiscountPromotionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AShopId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AShopId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCBSIPAShopSellerDiscountPromotionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCBSIPAShopSellerDiscountPromotionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCBSIPAShopSellerDiscountPromotionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMsg = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriceSyncPriceCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPriceSyncPriceCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPriceSyncPriceCalculation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPriceSyncPriceCalculation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPriceSyncPriceCalculation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPriceSyncPriceCalculation
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPriceSyncPriceCalculation
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPriceSyncPriceCalculation(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPriceSyncPriceCalculation = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPriceSyncPriceCalculation   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("price_sync_price_calculation.proto", fileDescriptorPriceSyncPriceCalculation)
}

var fileDescriptorPriceSyncPriceCalculation = []byte{
	// 5824 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x3c, 0x5b, 0x6c, 0x23, 0xd7,
	0x75, 0x1a, 0x52, 0x12, 0xa9, 0x23, 0x91, 0x1a, 0x8d, 0xde, 0xdc, 0x97, 0x76, 0x6c, 0xaf, 0xb5,
	0xb6, 0xb3, 0xbb, 0x59, 0x7b, 0x93, 0x38, 0x76, 0x9c, 0x52, 0x14, 0x25, 0x8d, 0x43, 0x91, 0xea,
	0x0c, 0x37, 0xb1, 0xfb, 0xc0, 0x60, 0x44, 0x5e, 0x51, 0xd3, 0x25, 0x39, 0xf4, 0xcc, 0x68, 0x2d,
	0xb9, 0x30, 0x90, 0x06, 0x68, 0xfa, 0xd1, 0x38, 0x68, 0xd1, 0xa6, 0x71, 0xd0, 0x06, 0x68, 0x51,
	0x34, 0x28, 0x5a, 0x14, 0x2d, 0x90, 0xb6, 0x08, 0x0a, 0x24, 0x1f, 0x6d, 0xe2, 0xb8, 0x76, 0x5f,
	0x28, 0x8a, 0x7e, 0xa7, 0x4e, 0xdb, 0x7c, 0xf4, 0xbb, 0x28, 0xd0, 0x8f, 0xa2, 0xb8, 0x8f, 0x79,
	0xdc, 0x99, 0x21, 0x39, 0xd2, 0x3a, 0x68, 0xbf, 0x56, 0x3c, 0xf7, 0xdc, 0x73, 0xcf, 0xfb, 0x9e,
	0x7b, 0xee, 0x9d, 0x05, 0x79, 0x60, 0x9b, 0x2d, 0xa4, 0x3b, 0x67, 0xfd, 0x96, 0x4e, 0xff, 0x6c,
	0x19, 0xdd, 0xd6, 0x49, 0xd7, 0x70, 0x4d, 0xab, 0x7f, 0x6b, 0x60, 0x5b, 0xae, 0x25, 0x5d, 0x26,
	0x03, 0xb7, 0x02, 0x9c, 0x5b, 0x21, 0x1c, 0xf9, 0x4b, 0x73, 0x90, 0xaf, 0x58, 0x7d, 0xc7, 0x35,
	0xfa, 0xae, 0xfc, 0x9d, 0x49, 0x98, 0xa9, 0xda, 0xb6, 0x65, 0x57, 0xac, 0x36, 0x92, 0x56, 0xa0,
	0x58, 0x55, 0xd5, 0x86, 0xaa, 0x2b, 0xf5, 0x66, 0x55, 0xad, 0x97, 0x6b, 0xe2, 0x0f, 0xfe, 0xf2,
	0xf7, 0xdf, 0x11, 0xa4, 0x65, 0x28, 0x50, 0xf8, 0x7e, 0x59, 0xd5, 0xf6, 0xca, 0x35, 0xf1, 0x5f,
	0x08, 0xd8, 0x47, 0xdf, 0x2e, 0x37, 0xcb, 0x5b, 0x65, 0xad, 0x2a, 0x7e, 0x40, 0xe0, 0x8b, 0x30,
	0x4b, 0xe1, 0x95, 0x72, 0x65, 0xaf, 0x2a, 0xfe, 0x90, 0x47, 0xde, 0x6b, 0x36, 0x0f, 0xf4, 0xf2,
	0x81, 0x22, 0xfe, 0x2b, 0x81, 0xaf, 0xc2, 0x3c, 0x85, 0xd7, 0x1b, 0x4d, 0x7d, 0xa7, 0x71, 0xbf,
	0xbe, 0x2d, 0xfe, 0x1b, 0x3f, 0xa1, 0xfa, 0x0a, 0x63, 0xe6, 0xdf, 0x09, 0x7c, 0x09, 0xe6, 0x28,
	0xfc, 0xa0, 0xac, 0x96, 0xf7, 0x35, 0xf1, 0xbb, 0x7f, 0x85, 0xa1, 0xd7, 0x61, 0x9d, 0x42, 0x77,
	0xab, 0x4d, 0x7d, 0xbf, 0xaa, 0x56, 0xf6, 0xca, 0xf5, 0xa6, 0xae, 0x56, 0x77, 0x95, 0x46, 0x5d,
	0xfc, 0x1e, 0x41, 0xb9, 0x09, 0xd7, 0x13, 0x50, 0x2a, 0x8d, 0xfa, 0x8e, 0xb2, 0xab, 0x6b, 0xd5,
	0x66, 0x53, 0xa9, 0xef, 0x8a, 0xef, 0x10, 0xd4, 0x4d, 0xd8, 0x48, 0x40, 0xad, 0xbe, 0x82, 0xff,
	0xdd, 0xad, 0xea, 0x6a, 0xb9, 0x59, 0x15, 0xbf, 0x4f, 0x30, 0x6f, 0xc0, 0xd5, 0x00, 0x53, 0xdb,
	0x6b, 0x1c, 0xe8, 0x95, 0xc6, 0xfe, 0xbe, 0xa2, 0x69, 0x4a, 0xa3, 0x4e, 0xf1, 0xde, 0x25, 0x78,
	0x97, 0x60, 0x31, 0xc0, 0x53, 0x9a, 0xd5, 0x7d, 0x5d, 0xa9, 0xef, 0x34, 0xc4, 0xbf, 0x26, 0x83,
	0x32, 0x94, 0x82, 0xc1, 0x6a, 0xbd, 0xbc, 0x55, 0xab, 0x6e, 0xeb, 0x78, 0xad, 0x7a, 0xb5, 0xa6,
	0x89, 0xef, 0x11, 0x9c, 0xc7, 0xe1, 0x32, 0x53, 0xc7, 0xfe, 0x41, 0xf3, 0xd5, 0x38, 0xd6, 0xfb,
	0x3c, 0xa5, 0x4a, 0xb9, 0x56, 0xb9, 0x5f, 0x2b, 0x37, 0xab, 0xfa, 0x9e, 0xb2, 0xbd, 0x5d, 0xad,
	0xeb, 0x3b, 0xd5, 0xaa, 0xf8, 0x37, 0x11, 0xe1, 0x6a, 0x8d, 0xad, 0x72, 0x4d, 0xdf, 0x56, 0xb4,
	0x4a, 0xe3, 0x7e, 0xbd, 0xa9, 0xdf, 0xaf, 0x57, 0x5f, 0x39, 0xa8, 0x56, 0x9a, 0xd5, 0x6d, 0xf1,
	0x6f, 0x79, 0xa5, 0x2a, 0xf5, 0xcf, 0x96, 0x6b, 0xca, 0xb6, 0x7e, 0x5f, 0xab, 0xaa, 0xba, 0xd6,
	0x2c, 0x37, 0xef, 0x6b, 0xe2, 0xdf, 0x61, 0x14, 0xf9, 0x53, 0xb0, 0xba, 0xdb, 0xb5, 0x0e, 0x8d,
	0xee, 0xb6, 0xe9, 0xb4, 0xac, 0x93, 0xbe, 0xab, 0xf4, 0x07, 0x27, 0x6e, 0xf3, 0x6c, 0x80, 0xa4,
	0x05, 0x28, 0xf8, 0xa4, 0x89, 0x26, 0x26, 0xa4, 0x79, 0x98, 0xdd, 0x3f, 0xd0, 0x3e, 0x73, 0x5f,
	0x3f, 0x50, 0x95, 0x4a, 0x55, 0x14, 0xe4, 0x1a, 0xe4, 0x2a, 0x46, 0xb7, 0x55, 0xb5, 0x6d, 0xe9,
	0x32, 0xac, 0xf9, 0xe8, 0x64, 0x58, 0xdf, 0x53, 0x9a, 0x7a, 0x4d, 0xd9, 0x57, 0x9a, 0xa2, 0x20,
	0x3d, 0x06, 0xd7, 0x22, 0xa3, 0x3b, 0xe5, 0x4a, 0x93, 0x73, 0x9b, 0x8c, 0xbc, 0x0d, 0x62, 0xcd,
	0x6a, 0x19, 0x5d, 0xcd, 0x1c, 0x28, 0xfd, 0x23, 0x8b, 0x70, 0x51, 0x04, 0xd8, 0x2a, 0x6b, 0x4a,
	0x85, 0xea, 0x7b, 0x02, 0xff, 0x0e, 0x69, 0x44, 0x90, 0x44, 0x98, 0xd3, 0xf6, 0x94, 0x83, 0x03,
	0xa5, 0xbe, 0x4b, 0x20, 0x19, 0xb9, 0x0c, 0x6b, 0x95, 0x43, 0xcd, 0x1c, 0xa8, 0xa8, 0x63, 0x5a,
	0xfd, 0x1a, 0x7a, 0x88, 0xba, 0x3e, 0xb5, 0x05, 0x28, 0xf0, 0x5e, 0x30, 0x21, 0x49, 0x50, 0x24,
	0x6c, 0xa9, 0xaf, 0xe2, 0xf0, 0xd8, 0x55, 0xea, 0xa2, 0x20, 0x3f, 0x0f, 0x0b, 0x94, 0x84, 0xe1,
	0x22, 0x7f, 0xee, 0x12, 0x88, 0xdb, 0xd5, 0x9d, 0xf2, 0xfd, 0x5a, 0x53, 0xd7, 0x94, 0x03, 0x6f,
	0x7a, 0x11, 0x80, 0xc8, 0xa8, 0xd7, 0x14, 0xad, 0x29, 0x0a, 0xf2, 0x6f, 0x0b, 0xb0, 0x4a, 0xe6,
	0x96, 0xf7, 0xcc, 0x76, 0x1b, 0xf5, 0x77, 0x50, 0x40, 0xe1, 0x29, 0xb8, 0xa1, 0xde, 0xaf, 0x55,
	0x35, 0x7d, 0xef, 0x60, 0xa7, 0xee, 0x79, 0x2e, 0x9e, 0xa7, 0x7f, 0x4e, 0x69, 0xee, 0xe9, 0x07,
	0xe5, 0x5d, 0xa5, 0x5e, 0x6e, 0x62, 0x8f, 0x9f, 0x90, 0xae, 0x42, 0x69, 0x08, 0x6e, 0xb9, 0x56,
	0x13, 0xb1, 0x43, 0xae, 0xe2, 0x71, 0x6e, 0x78, 0xbb, 0xda, 0x2c, 0x2b, 0x35, 0x31, 0x83, 0x6d,
	0x11, 0x0c, 0xd2, 0x20, 0xf2, 0x23, 0x24, 0x2b, 0x1b, 0x20, 0x55, 0x4f, 0x5b, 0xc7, 0x46, 0xbf,
	0x83, 0xb0, 0x80, 0x9a, 0x75, 0x62, 0xb7, 0x90, 0xb4, 0x08, 0xf3, 0x5a, 0xb5, 0x56, 0xab, 0xaa,
	0xfa, 0x41, 0xad, 0xdc, 0xdc, 0x69, 0xa8, 0xfb, 0xe2, 0x84, 0xb4, 0x06, 0x4b, 0x95, 0x2d, 0x22,
	0x2e, 0xaf, 0x36, 0x01, 0x2f, 0xd1, 0x50, 0xb7, 0xab, 0x24, 0xa7, 0x44, 0x43, 0x2b, 0x23, 0xff,
	0x14, 0xcc, 0x1f, 0xe0, 0xcc, 0xa5, 0x9d, 0xf5, 0x5b, 0x4d, 0xab, 0xd3, 0xe9, 0x22, 0xec, 0x01,
	0xd4, 0xf0, 0xda, 0xab, 0xf5, 0x8a, 0xde, 0x6c, 0xec, 0xee, 0xd6, 0xaa, 0xba, 0x5a, 0x2d, 0x6f,
	0xeb, 0x3b, 0x6a, 0x63, 0x5f, 0xd7, 0x6a, 0x9a, 0x88, 0xfd, 0xff, 0xea, 0x28, 0xa4, 0xed, 0x2d,
	0x31, 0x23, 0x7f, 0x1c, 0x0a, 0x3b, 0x88, 0x72, 0xee, 0x1a, 0xee, 0x89, 0x83, 0x0d, 0xb3, 0x53,
	0xa5, 0x4b, 0x13, 0x77, 0xd2, 0xaa, 0x4d, 0x71, 0x02, 0x3b, 0x86, 0x0f, 0xc5, 0x10, 0x41, 0x36,
	0x41, 0xa4, 0x36, 0x21, 0xac, 0x91, 0xb4, 0x29, 0x5d, 0x83, 0x52, 0x52, 0xa8, 0xe9, 0x24, 0x6e,
	0xc4, 0xf7, 0x16, 0xa4, 0xe7, 0xe0, 0x76, 0x22, 0x42, 0xbd, 0xa1, 0x97, 0x3f, 0x5b, 0x56, 0x6a,
	0x38, 0x8c, 0xbd, 0x28, 0x66, 0xb3, 0xde, 0x5f, 0x90, 0x8f, 0xb1, 0x13, 0x38, 0x2d, 0xb2, 0xd0,
	0x8e, 0xd1, 0x72, 0x2d, 0xdb, 0x77, 0x82, 0xcb, 0xb0, 0x56, 0xd9, 0xd2, 0x2a, 0x34, 0xd9, 0xd4,
	0xaa, 0x9f, 0xad, 0xd6, 0x74, 0x8f, 0x4f, 0x71, 0x42, 0x5a, 0x85, 0x45, 0x32, 0xea, 0xb3, 0xee,
	0x05, 0xd0, 0x0a, 0x48, 0x64, 0x20, 0xaa, 0xe9, 0xd7, 0xe1, 0x06, 0x8e, 0xc0, 0x68, 0x10, 0x1f,
	0x59, 0x5b, 0x67, 0x8a, 0x8b, 0x7a, 0x4a, 0xdb, 0x51, 0xd1, 0x6b, 0x27, 0xc8, 0x71, 0xa5, 0x7d,
	0xc8, 0xbd, 0x76, 0x82, 0x6c, 0x13, 0x39, 0x6b, 0xc2, 0x46, 0x76, 0x73, 0xf6, 0xee, 0xb3, 0xb7,
	0x46, 0x6d, 0x34, 0xb7, 0x78, 0x92, 0x3f, 0x79, 0x82, 0xec, 0x33, 0xa5, 0xad, 0x7a, 0x34, 0xe4,
	0xff, 0xcc, 0xc0, 0x72, 0x22, 0x8a, 0x74, 0x0d, 0x66, 0x7b, 0xc8, 0xc6, 0x0e, 0xe6, 0xea, 0x66,
	0x7b, 0x4d, 0xd8, 0x10, 0x36, 0x27, 0x55, 0xf0, 0x40, 0x4a, 0x5b, 0x92, 0xa1, 0xd0, 0x1b, 0x38,
	0x0f, 0x4e, 0x74, 0xe7, 0xd8, 0x1a, 0x60, 0x94, 0x0c, 0x41, 0x99, 0x25, 0x40, 0xed, 0xd8, 0x1a,
	0x84, 0x71, 0x4c, 0x17, 0xf5, 0x30, 0x4e, 0x36, 0x84, 0x43, 0x25, 0x93, 0x1e, 0x87, 0x22, 0xc5,
	0xe9, 0x59, 0x6d, 0xd4, 0xc5, 0x48, 0x93, 0x04, 0x69, 0x8e, 0x40, 0xf7, 0x31, 0x50, 0x69, 0x4b,
	0xd7, 0x81, 0xfe, 0xd6, 0x6d, 0x92, 0x10, 0xd6, 0xa6, 0x36, 0x84, 0xcd, 0x19, 0x46, 0x88, 0xe6,
	0x08, 0xe9, 0x0e, 0x2c, 0xf5, 0x5c, 0x8c, 0x62, 0xd9, 0x66, 0xc7, 0xec, 0x1b, 0x5d, 0xaa, 0x8e,
	0xb5, 0xe9, 0x0d, 0x61, 0x33, 0xab, 0x4a, 0x64, 0xac, 0xc1, 0x86, 0x88, 0x4d, 0xa5, 0x17, 0xa0,
	0xd4, 0x21, 0xc2, 0xeb, 0x6d, 0x26, 0xbd, 0x6e, 0xe2, 0xcc, 0xa9, 0xbb, 0x67, 0x03, 0xb4, 0x96,
	0xdb, 0x10, 0x36, 0x0b, 0xea, 0x6a, 0x67, 0x48, 0x66, 0x4d, 0x98, 0x8c, 0xb5, 0x7a, 0xa6, 0xb7,
	0x0d, 0xd7, 0x58, 0xcb, 0x93, 0x45, 0x23, 0x93, 0x89, 0x6e, 0xb7, 0x0d, 0xd7, 0x90, 0xbf, 0x29,
	0xc0, 0x93, 0x63, 0x2d, 0xee, 0x0c, 0xac, 0xbe, 0x83, 0xa4, 0x4b, 0x30, 0xd3, 0x46, 0x87, 0x27,
	0x1d, 0xbd, 0xe7, 0x74, 0x88, 0x1d, 0x66, 0xd4, 0x3c, 0x01, 0xec, 0x3b, 0x1d, 0xe9, 0x01, 0xac,
	0xc7, 0x45, 0x38, 0xb2, 0xf4, 0xae, 0xe9, 0xb8, 0x6b, 0x19, 0xe2, 0x21, 0x77, 0xce, 0xe3, 0x21,
	0x98, 0x05, 0x75, 0xa5, 0x13, 0x83, 0xd5, 0x4c, 0xc7, 0x95, 0x7f, 0x94, 0x05, 0x29, 0x8e, 0x2e,
	0xad, 0x43, 0x1e, 0xd9, 0xb6, 0xde, 0xb2, 0xda, 0x88, 0xf0, 0x57, 0x50, 0x73, 0xc8, 0xa6, 0xc5,
	0xcc, 0x2a, 0xe0, 0x3f, 0x09, 0xe7, 0x19, 0xc2, 0xf9, 0x34, 0xb2, 0x6d, 0xcc, 0x77, 0xc4, 0xbd,
	0xb2, 0xe3, 0xdd, 0x6b, 0x32, 0x85, 0x7b, 0x4d, 0xa5, 0x71, 0xaf, 0xe9, 0x14, 0xee, 0x95, 0x4b,
	0xef, 0x5e, 0xf9, 0x0b, 0xba, 0xd7, 0xcc, 0xa3, 0xb8, 0x17, 0x8c, 0x74, 0x2f, 0xe9, 0xd3, 0x70,
	0x39, 0x79, 0xb2, 0x8d, 0x9c, 0x93, 0xae, 0xbb, 0x36, 0x4b, 0xa6, 0xaf, 0x27, 0x4c, 0x57, 0x09,
	0x82, 0x5c, 0x86, 0x59, 0xac, 0x3f, 0x4f, 0x3d, 0xab, 0x90, 0xf3, 0x54, 0x4c, 0x13, 0xc1, 0xb4,
	0x49, 0xb5, 0xbb, 0x0e, 0x79, 0x5f, 0xaf, 0x34, 0xfe, 0x73, 0x3d, 0x3a, 0x47, 0xfe, 0x0f, 0xe6,
	0xe2, 0x5e, 0x31, 0xd0, 0x78, 0x88, 0x6c, 0x07, 0x19, 0xde, 0x6a, 0x44, 0x45, 0x5e, 0x56, 0x7b,
	0x05, 0x16, 0x8d, 0xa3, 0x23, 0x93, 0xda, 0xd1, 0x23, 0xe8, 0x65, 0xb8, 0x9b, 0xa3, 0xfd, 0x37,
	0xc4, 0xa7, 0x2a, 0x62, 0x2a, 0x21, 0x80, 0x23, 0x6d, 0xc0, 0x1c, 0xa1, 0x1c, 0x4e, 0x52, 0x59,
	0x15, 0x30, 0x8c, 0x39, 0xd1, 0x35, 0x98, 0x25, 0x18, 0xcc, 0xf2, 0x59, 0x62, 0x79, 0x82, 0xc0,
	0x0c, 0xff, 0x18, 0x14, 0x7c, 0x2d, 0xda, 0x86, 0x8b, 0x88, 0x27, 0x66, 0xd5, 0x39, 0x0f, 0x88,
	0x37, 0x31, 0xf9, 0x6d, 0x01, 0x36, 0xc7, 0x4b, 0xcb, 0x22, 0xba, 0x01, 0x39, 0x6a, 0x08, 0x4f,
	0xc4, 0x7b, 0xa3, 0x45, 0xa4, 0x44, 0x95, 0x83, 0xf2, 0xd1, 0x91, 0xe9, 0x51, 0x3a, 0xe9, 0xba,
	0xaa, 0x47, 0x85, 0x4f, 0x11, 0x19, 0x3e, 0x45, 0xc8, 0x0f, 0x61, 0x75, 0x08, 0x01, 0xe9, 0x0a,
	0x10, 0x41, 0x99, 0x27, 0x0b, 0x44, 0xae, 0x19, 0xc3, 0x43, 0xc2, 0x51, 0x81, 0xf0, 0x06, 0xab,
	0xb7, 0x91, 0x6b, 0x98, 0x5d, 0x46, 0x79, 0x96, 0xc0, 0xb6, 0x09, 0x08, 0x3b, 0x00, 0xe6, 0x54,
	0x47, 0xb6, 0x4d, 0x54, 0x57, 0x50, 0x73, 0x2d, 0x5a, 0x4b, 0xca, 0x5f, 0x11, 0xe0, 0xda, 0x2e,
	0x72, 0x23, 0x75, 0x54, 0xc5, 0xea, 0x1f, 0x99, 0x1d, 0xcf, 0xf0, 0x97, 0x60, 0x86, 0xa4, 0x2b,
	0x12, 0x11, 0x34, 0x77, 0xe4, 0x4d, 0x6f, 0x93, 0xbd, 0x02, 0x30, 0x30, 0x3a, 0x48, 0x37, 0xfb,
	0x6d, 0x74, 0x4a, 0x16, 0x2f, 0xa8, 0x33, 0x18, 0xa2, 0x60, 0x00, 0x9e, 0x4b, 0x86, 0x1d, 0xf3,
	0x0d, 0xc4, 0xd6, 0xce, 0x63, 0x80, 0x66, 0xbe, 0x81, 0x30, 0x5f, 0xf6, 0x49, 0x17, 0xe9, 0x0f,
	0xd0, 0x19, 0xb1, 0xd7, 0x8c, 0x9a, 0xc3, 0xbf, 0x3f, 0x83, 0xce, 0xe4, 0x7f, 0x16, 0x60, 0x63,
	0x38, 0x5f, 0x69, 0x92, 0xee, 0x12, 0x4c, 0xb9, 0x96, 0x6b, 0x74, 0x19, 0x4f, 0xf4, 0x87, 0xb4,
	0x03, 0x53, 0x78, 0x09, 0x67, 0x2d, 0x9b, 0x26, 0xed, 0x06, 0x2b, 0xab, 0x27, 0x5d, 0x52, 0x5d,
	0xaa, 0x74, 0xba, 0xf4, 0x71, 0x58, 0x23, 0xac, 0x53, 0x87, 0xd4, 0x1d, 0xe4, 0xba, 0x66, 0xbf,
	0xe3, 0xe8, 0x8e, 0x6b, 0x33, 0x51, 0x96, 0xf1, 0x38, 0xf5, 0x4e, 0x8d, 0x8d, 0x6a, 0xae, 0x2d,
	0x7f, 0x55, 0x00, 0x29, 0x4e, 0x96, 0x53, 0x85, 0xc0, 0xa9, 0x82, 0x4a, 0xe9, 0xb4, 0xc8, 0x96,
	0x11, 0xf8, 0x8d, 0xd3, 0x22, 0xf3, 0x14, 0xc8, 0x51, 0xbb, 0x7b, 0x12, 0xdd, 0x3e, 0x8f, 0x44,
	0xaa, 0xf5, 0xba, 0xea, 0xcd, 0x97, 0xdf, 0xca, 0xc0, 0x42, 0x6c, 0x18, 0xbb, 0xd7, 0xeb, 0xc8,
	0xec, 0x1c, 0xe3, 0xb0, 0xea, 0x77, 0x3c, 0xff, 0x9b, 0xa5, 0x30, 0x15, 0x83, 0x70, 0x70, 0x3a,
	0xae, 0x61, 0xbb, 0xcc, 0x43, 0x59, 0xf4, 0x12, 0x90, 0xef, 0xa2, 0x14, 0x81, 0xce, 0x22, 0x7e,
	0x90, 0x55, 0xe9, 0xa4, 0xcf, 0x11, 0x10, 0x76, 0x23, 0xdb, 0x3a, 0xe9, 0xb7, 0xa9, 0xa3, 0xd0,
	0xe0, 0x9d, 0x21, 0x10, 0xe2, 0x29, 0x4b, 0x30, 0x45, 0x89, 0x4f, 0x91, 0x11, 0xfa, 0x03, 0x2f,
	0xcc, 0x78, 0x73, 0x5c, 0x34, 0x60, 0x35, 0x04, 0x50, 0x90, 0xe6, 0xa2, 0x81, 0x74, 0x15, 0xc0,
	0x68, 0xff, 0xdc, 0x89, 0xe3, 0xf6, 0x50, 0xdf, 0x25, 0xfb, 0x05, 0x4e, 0x2b, 0x3e, 0x84, 0x57,
	0x6d, 0x9e, 0x57, 0xad, 0xbc, 0x0f, 0xeb, 0x9e, 0x07, 0xe2, 0xec, 0xc1, 0xc7, 0xc4, 0x1d, 0x58,
	0x6e, 0x1d, 0xea, 0x8e, 0x39, 0x20, 0xd9, 0x46, 0x8f, 0xc6, 0xc7, 0x42, 0x2b, 0x7a, 0xa8, 0xc1,
	0x86, 0x2f, 0x25, 0xd1, 0x4b, 0xe3, 0xcb, 0xb7, 0x61, 0xa9, 0x8d, 0x8e, 0x8c, 0x93, 0xae, 0x1b,
	0x2c, 0x89, 0x3d, 0x8d, 0x7a, 0xc3, 0x02, 0x1b, 0x63, 0x84, 0x35, 0xd7, 0x96, 0x9e, 0x06, 0xc9,
	0x47, 0xec, 0x9a, 0x3d, 0xd3, 0x25, 0xe8, 0x34, 0x6d, 0xce, 0x3b, 0x14, 0xaf, 0x86, 0xe1, 0xd8,
	0x25, 0x5f, 0x84, 0xab, 0x1e, 0x63, 0x38, 0xdd, 0x92, 0x73, 0x1c, 0x2f, 0x6d, 0x09, 0x66, 0x06,
	0x7e, 0x76, 0xa6, 0x9b, 0x4b, 0x6e, 0x40, 0x53, 0xb3, 0xfc, 0x5b, 0xa1, 0x0c, 0x12, 0x9b, 0x9e,
	0x46, 0xb8, 0x9f, 0x01, 0xc9, 0xa0, 0xc4, 0x5b, 0x64, 0x56, 0xb8, 0x2c, 0x1a, 0xe3, 0xcd, 0x34,
	0x3d, 0x78, 0xdb, 0x04, 0x0e, 0xcf, 0x79, 0x03, 0xff, 0x49, 0x97, 0x27, 0xe5, 0xd0, 0xcb, 0xec,
	0x80, 0x19, 0xc6, 0xc2, 0xf2, 0x18, 0x51, 0x79, 0x0c, 0xb6, 0xd5, 0xac, 0x43, 0xde, 0x53, 0x1d,
	0xd1, 0xaf, 0xa0, 0xe6, 0x98, 0xc2, 0xe4, 0x5f, 0x0b, 0x25, 0xa5, 0xd0, 0x99, 0x97, 0xd7, 0x95,
	0x0a, 0x22, 0x4b, 0x0a, 0x03, 0xc3, 0xb4, 0xa9, 0x30, 0x74, 0x03, 0xd9, 0x1c, 0x2d, 0x0c, 0xa5,
	0x78, 0x60, 0x98, 0xb6, 0x5a, 0xb4, 0xfd, 0xbf, 0xb1, 0x10, 0x7c, 0x06, 0xce, 0xf0, 0x19, 0x58,
	0xfe, 0xc3, 0x0c, 0x5c, 0x1f, 0xc1, 0x55, 0x1a, 0x13, 0xd8, 0xb0, 0x84, 0xd8, 0x39, 0x95, 0xfa,
	0x0c, 0xb5, 0x04, 0x59, 0x6a, 0xf6, 0xee, 0x4f, 0xa4, 0x30, 0x42, 0x68, 0xe1, 0xf0, 0x89, 0x97,
	0x31, 0x21, 0xa1, 0x18, 0x4c, 0x3a, 0x81, 0x65, 0xb2, 0xeb, 0xda, 0x67, 0x7a, 0xcf, 0xb0, 0x3b,
	0x66, 0xdf, 0x5b, 0x34, 0x4b, 0x16, 0x2d, 0x9f, 0x6f, 0xd1, 0x0a, 0x25, 0xb5, 0x4f, 0x28, 0xb1,
	0x55, 0x17, 0x5b, 0x71, 0xa0, 0xfc, 0x05, 0x01, 0xe4, 0xf1, 0x1c, 0x63, 0xa7, 0xe4, 0x35, 0x12,
	0x72, 0xca, 0x5b, 0xa3, 0x59, 0x0b, 0x53, 0xc3, 0x85, 0x9e, 0x2a, 0x86, 0xa5, 0x27, 0x4e, 0xf9,
	0x26, 0x88, 0x51, 0x2c, 0x92, 0x24, 0xed, 0x96, 0xde, 0x3a, 0xb1, 0x6d, 0xd4, 0x6f, 0x79, 0xbb,
	0xc0, 0xac, 0x63, 0xb7, 0x2a, 0x0c, 0x84, 0x51, 0xda, 0x8e, 0x1b, 0xa0, 0xb0, 0xad, 0xbe, 0xed,
	0xb8, 0x3e, 0xca, 0x63, 0x50, 0xe0, 0xf8, 0x66, 0x31, 0x3f, 0x17, 0x66, 0x41, 0xfe, 0xa2, 0x00,
	0x8f, 0xa5, 0x50, 0xa0, 0xa4, 0xc3, 0x62, 0xc4, 0x44, 0x44, 0x0b, 0xa9, 0x36, 0x1a, 0x8e, 0x1e,
	0x51, 0xc3, 0x02, 0x67, 0x0e, 0xa2, 0x87, 0x53, 0x58, 0x88, 0xe1, 0xe1, 0xad, 0x00, 0x2b, 0x82,
	0x95, 0x7a, 0x54, 0x0d, 0x33, 0x8e, 0xdd, 0x62, 0x95, 0xde, 0x15, 0x00, 0xac, 0x04, 0x36, 0x4c,
	0x55, 0x30, 0xd3, 0x76, 0x5c, 0x36, 0xfc, 0x04, 0x14, 0x79, 0x9e, 0x89, 0x06, 0x04, 0xb5, 0xc0,
	0xad, 0x2e, 0xff, 0x8a, 0x00, 0x57, 0x76, 0x91, 0xeb, 0x55, 0x82, 0xa1, 0xf6, 0xc1, 0xff, 0x59,
	0x1c, 0xbf, 0x0c, 0x10, 0x4c, 0x7d, 0x34, 0x2d, 0xc8, 0x5f, 0x16, 0x48, 0x4e, 0x4f, 0x14, 0x2f,
	0x4d, 0x42, 0x08, 0x15, 0xbf, 0x99, 0xf4, 0xc5, 0x2f, 0xb7, 0x10, 0x49, 0xc7, 0x1e, 0x15, 0xf9,
	0xbd, 0x8c, 0x57, 0xe0, 0xc6, 0x90, 0xa4, 0x57, 0x01, 0x0e, 0x0d, 0xc7, 0x64, 0xdb, 0xb0, 0x40,
	0xc2, 0xff, 0x93, 0xe7, 0x5e, 0x6f, 0x0b, 0x93, 0x20, 0x8b, 0xce, 0x1c, 0x7a, 0x7f, 0x4a, 0x47,
	0x30, 0x7f, 0x4c, 0x2a, 0x1a, 0xfd, 0x08, 0xa1, 0xa0, 0x82, 0x9a, 0xbd, 0xfb, 0xd2, 0xb9, 0xe9,
	0x73, 0x4d, 0x46, 0xb5, 0x70, 0x1c, 0xfe, 0x29, 0x75, 0x61, 0xc1, 0x39, 0x36, 0x07, 0x03, 0xb3,
	0xdf, 0x09, 0x56, 0xca, 0xa6, 0xc9, 0x9e, 0x09, 0x2b, 0x69, 0x8c, 0x92, 0xb7, 0xd6, 0xbc, 0xc3,
	0x03, 0xe4, 0xdf, 0x9c, 0x84, 0xcb, 0xa3, 0x34, 0x90, 0x10, 0x04, 0x42, 0x42, 0x10, 0x48, 0xcf,
	0x80, 0xd4, 0x23, 0x79, 0x97, 0x43, 0xa5, 0x9b, 0x9e, 0xd8, 0xc3, 0x69, 0x20, 0x8a, 0x6d, 0x9c,
	0xea, 0x89, 0xd1, 0x25, 0xf6, 0x8c, 0x53, 0x1e, 0x3b, 0x96, 0x88, 0x26, 0x09, 0x22, 0x97, 0x88,
	0xa4, 0xa7, 0x60, 0x01, 0x33, 0xc0, 0x23, 0x4e, 0x11, 0xc4, 0xf9, 0x9e, 0xd9, 0xaf, 0x46, 0x71,
	0x8d, 0xd3, 0x08, 0xee, 0x34, 0xc3, 0x35, 0x4e, 0x39, 0xdc, 0xe7, 0x61, 0xdd, 0xec, 0x9b, 0xae,
	0x69, 0x74, 0xf5, 0x90, 0xf9, 0x5d, 0xd2, 0x1e, 0x25, 0x65, 0xe0, 0x94, 0xba, 0xc2, 0x10, 0x7c,
	0xb3, 0xb2, 0xe6, 0xe9, 0x2d, 0x58, 0xe4, 0x2c, 0xc9, 0x26, 0xe5, 0xc9, 0xa4, 0x85, 0x90, 0x25,
	0x18, 0xfe, 0x53, 0xb0, 0x80, 0x29, 0x79, 0xeb, 0xd0, 0x2a, 0x75, 0x86, 0xb2, 0x85, 0x07, 0x42,
	0x7d, 0x50, 0xe9, 0xa3, 0xb0, 0x8c, 0xc5, 0x8d, 0xe3, 0x03, 0xc1, 0xc7, 0xc6, 0x50, 0x12, 0xa6,
	0x18, 0xa7, 0x09, 0x53, 0x66, 0xd9, 0x14, 0xe3, 0x34, 0x32, 0x45, 0xfe, 0x55, 0x01, 0xe4, 0xf1,
	0x5e, 0x25, 0x3d, 0x80, 0xb5, 0x2e, 0xc6, 0xd2, 0x39, 0x71, 0xe9, 0xe1, 0x88, 0xe6, 0xb9, 0xbb,
	0x69, 0x3c, 0x37, 0xa0, 0x4a, 0x4e, 0x0c, 0xcb, 0xdd, 0x04, 0xa8, 0x23, 0xff, 0xb2, 0x00, 0x1b,
	0xe3, 0x62, 0x4a, 0xea, 0xc0, 0x0a, 0xe5, 0x28, 0x64, 0xb3, 0x47, 0xe5, 0x67, 0x91, 0x50, 0xe4,
	0x4e, 0x35, 0x8e, 0xfc, 0x0d, 0x01, 0x96, 0x92, 0xb0, 0x71, 0x56, 0xed, 0x05, 0x59, 0x95, 0x25,
	0xdd, 0x9e, 0xbf, 0xb7, 0x44, 0xba, 0x10, 0x99, 0x58, 0x17, 0x62, 0x05, 0xa6, 0xb9, 0x23, 0x0e,
	0xfb, 0x25, 0x89, 0x90, 0x3d, 0x42, 0xde, 0xb1, 0x06, 0xff, 0x29, 0x15, 0x21, 0xc3, 0x5a, 0x61,
	0x59, 0x35, 0x63, 0xb6, 0xf1, 0x01, 0xa7, 0xe5, 0x9a, 0x3d, 0xaf, 0x11, 0x4a, 0x7f, 0xc8, 0xdf,
	0x15, 0xd8, 0x19, 0x84, 0x6b, 0x70, 0xa7, 0x3a, 0x97, 0x47, 0x7a, 0x77, 0x99, 0x58, 0xef, 0xee,
	0x06, 0xcc, 0xf7, 0x0c, 0xb3, 0xaf, 0x1b, 0x2d, 0xd6, 0xf5, 0xf2, 0x1a, 0x7c, 0x05, 0x0c, 0x2e,
	0x53, 0xa8, 0xd2, 0x96, 0x36, 0x60, 0x8e, 0x55, 0xca, 0x74, 0x0f, 0x9c, 0xdc, 0xc8, 0x62, 0x4a,
	0x0e, 0xa9, 0x96, 0xc9, 0xae, 0x86, 0xcf, 0x7f, 0x18, 0x83, 0xeb, 0xfa, 0x12, 0x04, 0xb6, 0x1b,
	0x7d, 0xc1, 0x3b, 0xfa, 0x44, 0xc4, 0x48, 0xb3, 0x13, 0xed, 0x86, 0x77, 0x22, 0x9c, 0x4f, 0x3f,
	0x32, 0xae, 0x30, 0xe4, 0x17, 0xf1, 0x77, 0xa0, 0x6f, 0x64, 0x60, 0x3e, 0x32, 0x28, 0xe9, 0x20,
	0x11, 0xce, 0x89, 0xa7, 0xf9, 0x55, 0x5e, 0x2a, 0x6f, 0xc3, 0xa4, 0xfc, 0xe3, 0x0e, 0xbb, 0x25,
	0xc1, 0x99, 0xda, 0x1a, 0xb0, 0x1f, 0x44, 0x35, 0x4d, 0x28, 0x86, 0x68, 0xf7, 0x4c, 0x97, 0x09,
	0x71, 0x6b, 0x3c, 0x71, 0x9f, 0x4c, 0xcf, 0x74, 0xd5, 0xb9, 0xa3, 0xd0, 0xaf, 0x21, 0xc5, 0x69,
	0x36, 0x4d, 0x71, 0x8a, 0x29, 0x87, 0x53, 0x65, 0x42, 0x71, 0xfa, 0x5f, 0x19, 0x58, 0x4a, 0x92,
	0x4e, 0x5a, 0x85, 0x5c, 0xf8, 0xcc, 0x94, 0x55, 0xa7, 0xa9, 0x13, 0x48, 0x77, 0x60, 0xc9, 0xb5,
	0x8d, 0xbe, 0x63, 0xb4, 0xf0, 0x1a, 0xbe, 0x36, 0x59, 0x27, 0x40, 0x0a, 0x8d, 0x79, 0xa4, 0xae,
	0xc1, 0xec, 0xc0, 0xb6, 0x8e, 0x4c, 0x37, 0x28, 0x52, 0xb3, 0x2a, 0x50, 0x10, 0x41, 0x78, 0x06,
	0xa4, 0x10, 0x82, 0xee, 0x90, 0xfb, 0x27, 0x12, 0x40, 0x53, 0xaa, 0x18, 0xe0, 0xb1, 0x7b, 0xa9,
	0x4d, 0x10, 0x1d, 0x64, 0x3f, 0x34, 0x5b, 0x28, 0x58, 0x9c, 0xc6, 0x56, 0x91, 0xc1, 0xbd, 0x85,
	0xef, 0xc1, 0x6a, 0x14, 0xd3, 0x23, 0x3e, 0x4d, 0x88, 0x2f, 0xf1, 0x13, 0xd8, 0x02, 0x4f, 0xc2,
	0x7c, 0xcb, 0xea, 0xf5, 0x4c, 0xc7, 0xc1, 0x02, 0x12, 0xfa, 0xb4, 0x9b, 0x50, 0x0c, 0xc0, 0x84,
	0xfe, 0x0b, 0x50, 0xb2, 0xd1, 0x11, 0xc2, 0xc5, 0x38, 0xd2, 0x63, 0x3c, 0xb1, 0x0b, 0x07, 0x1f,
	0x43, 0xe3, 0xd6, 0x92, 0xff, 0x49, 0x00, 0x31, 0x6a, 0x7a, 0xc9, 0x80, 0x85, 0x30, 0x1d, 0xea,
	0x45, 0xb4, 0x48, 0xba, 0x97, 0xc2, 0x45, 0xb9, 0x15, 0xa8, 0x33, 0xcd, 0x07, 0x22, 0xd2, 0x25,
	0x7e, 0x16, 0x16, 0xc2, 0xca, 0xf6, 0x1c, 0x15, 0xbb, 0xd3, 0x47, 0xd3, 0x44, 0x9b, 0x67, 0x0d,
	0x46, 0x7e, 0xc0, 0x03, 0xe4, 0x37, 0x61, 0x31, 0x01, 0x8f, 0x24, 0x20, 0x13, 0x6f, 0x67, 0x81,
	0x1f, 0x50, 0xb7, 0x2a, 0xf4, 0xcc, 0x7e, 0x80, 0x4c, 0x13, 0xd5, 0x29, 0x87, 0x97, 0x61, 0x78,
	0xc6, 0x69, 0x08, 0x6f, 0x05, 0xa6, 0xb9, 0xf6, 0x30, 0xfb, 0x25, 0xff, 0x3c, 0xbd, 0x21, 0x4c,
	0xd0, 0x84, 0x74, 0x1b, 0x96, 0x30, 0x0b, 0x31, 0x3b, 0x51, 0x3e, 0x70, 0x6d, 0xc2, 0xcf, 0x22,
	0x13, 0x8c, 0xd3, 0xf8, 0x84, 0x0c, 0x9b, 0x60, 0x9c, 0x46, 0x4c, 0xda, 0xa0, 0x16, 0xe5, 0xaa,
	0x93, 0x58, 0x69, 0x24, 0x24, 0x94, 0x46, 0x81, 0x34, 0x19, 0x4e, 0x9a, 0x3f, 0x12, 0x60, 0x5d,
	0x1b, 0xba, 0x25, 0x8c, 0xbd, 0x10, 0xb4, 0x60, 0x95, 0xb6, 0x5a, 0x0e, 0x1d, 0xef, 0x59, 0xcc,
	0x11, 0xa1, 0xe0, 0x15, 0xfa, 0x9f, 0x18, 0x6d, 0x70, 0xd2, 0x5d, 0xe1, 0xd7, 0x66, 0xdd, 0x4d,
	0x75, 0xc9, 0x89, 0x8f, 0x39, 0xf2, 0xf3, 0x50, 0xd2, 0x2e, 0x96, 0xfa, 0xe5, 0xb7, 0x05, 0x28,
	0x0d, 0x5f, 0x6f, 0x78, 0x3a, 0x1a, 0xa2, 0xba, 0xa4, 0xa4, 0x33, 0xc9, 0x25, 0x9d, 0xa4, 0x34,
	0x42, 0x6f, 0xb4, 0x22, 0x69, 0x44, 0xfe, 0x6f, 0x01, 0x56, 0x2a, 0x56, 0xff, 0x21, 0xb2, 0xfd,
	0xa3, 0xb7, 0x67, 0x82, 0xc7, 0xa1, 0x88, 0x0f, 0x6e, 0x54, 0xb7, 0xfe, 0x7e, 0x92, 0x55, 0xf1,
	0xe9, 0x9e, 0x48, 0x41, 0x36, 0x86, 0x3b, 0xd1, 0x8e, 0x8b, 0x43, 0xde, 0x06, 0xb0, 0x43, 0x21,
	0xd7, 0x2f, 0x61, 0xaf, 0x06, 0xa2, 0xfd, 0x81, 0xec, 0xf8, 0xfe, 0xc0, 0x64, 0xbc, 0x3f, 0x10,
	0x71, 0x90, 0xa9, 0x98, 0x83, 0x44, 0x2f, 0xd9, 0xa6, 0x63, 0x97, 0x6c, 0xf2, 0x1b, 0xb0, 0x1a,
	0x93, 0x3d, 0xcd, 0x56, 0xce, 0xce, 0xac, 0x44, 0x33, 0xd4, 0xdd, 0xb2, 0xe4, 0xcc, 0x4a, 0xb4,
	0xe2, 0x24, 0xb7, 0x2e, 0x22, 0x61, 0x21, 0xff, 0x0f, 0xbb, 0xc2, 0xc1, 0xfe, 0x88, 0xca, 0x64,
	0xe6, 0xd6, 0xd9, 0x81, 0xe2, 0xa2, 0xde, 0x8e, 0x65, 0x7b, 0x37, 0x28, 0x29, 0xda, 0x96, 0xd2,
	0x3a, 0xe4, 0x07, 0x7c, 0x21, 0x97, 0x63, 0xe5, 0x0a, 0x9d, 0xc6, 0x5f, 0x86, 0xe7, 0x06, 0xec,
	0xa6, 0x32, 0x74, 0xb5, 0x3f, 0x99, 0xe6, 0x6a, 0xdf, 0x2b, 0x7a, 0x29, 0xab, 0xd1, 0xab, 0x7d,
	0xec, 0x06, 0x1e, 0x36, 0xd2, 0x8f, 0x2c, 0x5b, 0x6f, 0xd9, 0xc8, 0xdb, 0xbc, 0xf2, 0xaa, 0xe4,
	0x8f, 0xed, 0x58, 0x76, 0x85, 0x8c, 0xc8, 0xdf, 0xce, 0xc0, 0x72, 0x22, 0xd1, 0x71, 0x4d, 0x4d,
	0x23, 0x22, 0xad, 0x11, 0x48, 0x6b, 0x44, 0xa5, 0x35, 0x98, 0xb4, 0x97, 0x01, 0x8c, 0xe8, 0x95,
	0x7f, 0xde, 0xf0, 0x2e, 0x1c, 0x1f, 0x87, 0xe2, 0x40, 0xef, 0x5b, 0x76, 0xcf, 0xbf, 0x66, 0xa5,
	0x7b, 0xee, 0xdc, 0xa0, 0x4e, 0x80, 0xf4, 0x04, 0x83, 0x77, 0x72, 0x9c, 0xbc, 0x7b, 0x16, 0x29,
	0x0e, 0x98, 0xf5, 0xa7, 0x89, 0xf5, 0xc5, 0xc1, 0x81, 0x37, 0xc0, 0x9c, 0xe0, 0x1e, 0xac, 0xa2,
	0xbe, 0x71, 0xd8, 0x45, 0x6d, 0x1d, 0x5b, 0xbd, 0x4f, 0x56, 0xa6, 0x61, 0x94, 0x23, 0x53, 0x96,
	0xd8, 0x70, 0x85, 0x8e, 0xb2, 0x12, 0x74, 0x13, 0xc4, 0x2e, 0x32, 0x8e, 0xf4, 0x96, 0xe1, 0xa2,
	0x8e, 0x65, 0x9f, 0x61, 0x76, 0xf3, 0x34, 0x72, 0x31, 0xbc, 0xc2, 0xc0, 0x4a, 0x5b, 0xfe, 0xa5,
	0x0c, 0xdc, 0x4c, 0xe1, 0x40, 0x69, 0xfc, 0xf9, 0xe5, 0x68, 0x93, 0xe4, 0xce, 0x79, 0x7c, 0x81,
	0xeb, 0x8f, 0x48, 0xaf, 0xc1, 0x25, 0xcf, 0x78, 0xd8, 0x14, 0xad, 0x13, 0xc7, 0xb5, 0x7a, 0xe6,
	0x1b, 0xa8, 0xad, 0x5b, 0x03, 0xff, 0x6e, 0xe7, 0xd9, 0xf1, 0xb9, 0x19, 0x0b, 0x52, 0xf1, 0x27,
	0x37, 0x0e, 0x6a, 0xea, 0xaa, 0x91, 0x00, 0x1f, 0x74, 0x1d, 0xf9, 0xeb, 0x02, 0x2c, 0x27, 0x4e,
	0x89, 0x66, 0xd6, 0x49, 0x3f, 0xb3, 0x86, 0xae, 0x98, 0x33, 0xdc, 0x15, 0xb3, 0x0a, 0x45, 0x9e,
	0x65, 0xd6, 0xfc, 0x78, 0x7a, 0x4c, 0xf9, 0xc0, 0x71, 0x5a, 0x68, 0x85, 0x19, 0x94, 0xff, 0x31,
	0x03, 0x52, 0x5c, 0x65, 0x17, 0x7a, 0xc8, 0x70, 0x1d, 0xe6, 0x38, 0x3f, 0x65, 0x17, 0x50, 0xfd,
	0x90, 0x9b, 0xde, 0x04, 0x31, 0xe6, 0xa4, 0x93, 0xc4, 0xe3, 0xe6, 0x07, 0x11, 0x1f, 0xe5, 0x02,
	0x6d, 0x6a, 0x78, 0xa0, 0x4d, 0x8f, 0x08, 0xb4, 0xdc, 0xa8, 0x40, 0xcb, 0x47, 0x02, 0x4d, 0x81,
	0x49, 0xa7, 0x6f, 0x0c, 0x48, 0x5b, 0xe1, 0x22, 0xad, 0x38, 0xad, 0x6f, 0x0c, 0x54, 0x42, 0x42,
	0x7e, 0x2b, 0xb9, 0x0f, 0x87, 0x31, 0x42, 0xa7, 0x57, 0x5a, 0x90, 0x78, 0xa7, 0x57, 0xef, 0x7c,
	0xc7, 0xf5, 0x87, 0xc8, 0xf9, 0x8e, 0xf5, 0x7a, 0xae, 0xc1, 0x2c, 0x7d, 0x14, 0x10, 0x6e, 0x09,
	0x01, 0x06, 0x31, 0x84, 0x0d, 0x4c, 0xc1, 0x3f, 0x6a, 0xb3, 0x56, 0x50, 0x18, 0x94, 0xd0, 0xb1,
	0x9a, 0x4a, 0xea, 0x58, 0xc5, 0xf6, 0x88, 0xe9, 0xe4, 0xae, 0x52, 0xbc, 0x5f, 0x92, 0x4b, 0x6c,
	0xc9, 0xc8, 0x7f, 0x9c, 0x81, 0xc7, 0xfd, 0x74, 0xa0, 0x99, 0x24, 0x18, 0xa8, 0x5e, 0x2c, 0x9b,
	0xb5, 0xc8, 0xe9, 0x5e, 0x32, 0x34, 0x26, 0x86, 0x55, 0x1b, 0xa1, 0x58, 0xc9, 0x72, 0xb1, 0x72,
	0x03, 0xe6, 0xa3, 0xa9, 0x8d, 0x9e, 0xa9, 0x0b, 0xad, 0xb1, 0x39, 0x6d, 0x2a, 0x29, 0xa7, 0x85,
	0x0c, 0x47, 0x9f, 0xcd, 0x78, 0x86, 0xd3, 0x82, 0xcd, 0x2a, 0x47, 0x12, 0xc8, 0xf3, 0x63, 0x12,
	0x48, 0x82, 0xfc, 0xb1, 0xd7, 0x68, 0x75, 0xb8, 0x34, 0x02, 0x8f, 0x7b, 0x6c, 0x22, 0x70, 0x8f,
	0x4d, 0x82, 0x4b, 0xdc, 0x4c, 0xe8, 0x12, 0x57, 0xfe, 0xa6, 0x00, 0x4f, 0x8c, 0xb1, 0x40, 0x9a,
	0x64, 0xdc, 0x83, 0x4b, 0xec, 0x42, 0x96, 0x68, 0x9d, 0x96, 0x5f, 0xe7, 0x7c, 0x65, 0x45, 0x96,
	0xf3, 0xd7, 0xa7, 0xaf, 0xac, 0x5a, 0x31, 0x18, 0x39, 0x24, 0xff, 0x81, 0x00, 0x52, 0x1c, 0xfd,
	0x42, 0xc9, 0x29, 0xac, 0xb1, 0x2c, 0xaf, 0xb1, 0x9b, 0xb0, 0x10, 0x13, 0x8a, 0x75, 0x91, 0x8a,
	0x3c, 0x63, 0x52, 0x09, 0xf2, 0x7e, 0xdd, 0x47, 0x3b, 0x30, 0xfe, 0x6f, 0xf9, 0xd7, 0xb3, 0x21,
	0x15, 0x47, 0xf7, 0xbc, 0xca, 0x56, 0xa8, 0x62, 0x1a, 0x7b, 0x7e, 0x78, 0x12, 0xe6, 0x7d, 0x04,
	0xce, 0xed, 0x8b, 0x1e, 0x38, 0x5c, 0x44, 0x79, 0x11, 0x93, 0x1d, 0x5e, 0x7b, 0x4d, 0x8e, 0xa8,
	0xbd, 0xa6, 0xf8, 0xda, 0x8b, 0xcb, 0xbb, 0xd3, 0xc3, 0xf3, 0x6e, 0x6e, 0x44, 0xde, 0xcd, 0xf3,
	0x79, 0x57, 0x09, 0x22, 0x64, 0x26, 0xd5, 0xf3, 0x09, 0xb2, 0x59, 0x62, 0x8d, 0xa5, 0x2e, 0xe5,
	0x60, 0x68, 0x29, 0xf7, 0x7b, 0x02, 0x2c, 0xc4, 0x08, 0x46, 0xb6, 0x02, 0x21, 0xb2, 0x15, 0x6c,
	0xc0, 0x1c, 0xe7, 0x0c, 0xec, 0xb1, 0x45, 0xc8, 0x11, 0xe2, 0x55, 0x59, 0x36, 0xa1, 0x2a, 0x7b,
	0x0a, 0x16, 0x62, 0x55, 0x19, 0xf3, 0xac, 0xf9, 0x48, 0x51, 0x26, 0xff, 0x48, 0xa0, 0x2f, 0x5f,
	0x47, 0xb9, 0x4f, 0x9a, 0x10, 0xad, 0x45, 0xeb, 0xa5, 0xbb, 0x29, 0x94, 0x1d, 0x7a, 0x09, 0xc5,
	0x57, 0x4c, 0x3f, 0x8e, 0x92, 0xe3, 0x2f, 0x04, 0x28, 0xf0, 0xa5, 0xd0, 0x15, 0xa0, 0x0f, 0x59,
	0x74, 0xd2, 0x9c, 0xa5, 0x21, 0x3d, 0x43, 0x20, 0x4d, 0xb3, 0x47, 0x5e, 0x30, 0xa1, 0x7e, 0x9b,
	0x0e, 0x66, 0x58, 0xbc, 0xf7, 0xdb, 0x64, 0xe8, 0x09, 0x28, 0x0e, 0x4e, 0x70, 0x48, 0x38, 0x5e,
	0x47, 0x85, 0x3e, 0x7f, 0x2a, 0x78, 0x50, 0xda, 0x82, 0x78, 0x02, 0x8a, 0x36, 0x1a, 0x60, 0x7f,
	0xa0, 0x64, 0x68, 0x93, 0xab, 0xa0, 0x16, 0x3c, 0x28, 0x26, 0xe6, 0xe0, 0x0a, 0x26, 0xb0, 0x56,
	0xf0, 0x88, 0xd2, 0x87, 0x29, 0x6d, 0xf9, 0x7b, 0x19, 0x58, 0x4a, 0x52, 0xd9, 0x8f, 0xb1, 0x62,
	0x72, 0x90, 0xeb, 0x76, 0x51, 0x0f, 0xf5, 0x5d, 0xde, 0x83, 0x02, 0x38, 0x45, 0xfd, 0x24, 0xac,
	0x47, 0x51, 0xf5, 0x48, 0xb6, 0x5a, 0x8d, 0xcc, 0xf1, 0x4f, 0xac, 0x4f, 0xc2, 0x7c, 0xd4, 0x4f,
	0x69, 0x8f, 0xbc, 0xc8, 0xd7, 0x65, 0xd2, 0x0e, 0xab, 0x92, 0x72, 0xc4, 0x0d, 0xee, 0xa6, 0x48,
	0xf5, 0xc9, 0x25, 0xd2, 0x57, 0xb3, 0xb0, 0x94, 0x34, 0x3c, 0xb4, 0x3e, 0x8a, 0xd7, 0x2e, 0x99,
	0xa4, 0xda, 0x25, 0x52, 0x46, 0x65, 0xc7, 0x95, 0x51, 0x93, 0xb1, 0x32, 0x2a, 0x56, 0xfd, 0x4c,
	0x25, 0x54, 0x3f, 0xa4, 0xcb, 0x81, 0x15, 0x6c, 0x63, 0x49, 0x59, 0x81, 0x04, 0x04, 0xa4, 0x62,
	0x08, 0x0e, 0x7d, 0x72, 0x8b, 0x91, 0x54, 0x1e, 0xe1, 0x81, 0xf0, 0xf5, 0x53, 0xb4, 0xe9, 0x90,
	0x8f, 0x37, 0x1d, 0xb0, 0x58, 0x41, 0xd3, 0x84, 0x5d, 0x7d, 0x41, 0xd0, 0x2f, 0xa1, 0xea, 0xf1,
	0x7b, 0xa7, 0x18, 0x07, 0x3c, 0xf5, 0x78, 0x50, 0x8c, 0x76, 0x1d, 0xe6, 0x8e, 0x8d, 0x7e, 0xbb,
	0xcb, 0x6e, 0xa2, 0xd8, 0x05, 0xd7, 0xac, 0x07, 0xdb, 0x41, 0x08, 0x87, 0xe7, 0x65, 0x3f, 0x11,
	0x05, 0x35, 0x82, 0xd3, 0x4a, 0xbd, 0x7d, 0xdd, 0x84, 0x05, 0xd3, 0xd1, 0xe9, 0x13, 0x61, 0xd7,
	0xd2, 0x49, 0x57, 0x83, 0x58, 0x2b, 0xaf, 0x16, 0x4d, 0x67, 0x1f, 0xc3, 0x9b, 0xd6, 0x3e, 0x86,
	0x4a, 0xf5, 0x60, 0x6b, 0xa0, 0xa7, 0xaf, 0xe7, 0x46, 0x7b, 0x14, 0x99, 0x4c, 0xa6, 0x26, 0x1e,
	0xf5, 0xe5, 0xaf, 0x65, 0x60, 0x25, 0x19, 0x07, 0x67, 0x4d, 0xbf, 0x65, 0xc4, 0x7a, 0x59, 0x79,
	0xaf, 0x5b, 0x94, 0xea, 0x09, 0x7f, 0xb4, 0x69, 0x93, 0x8d, 0xbf, 0x8c, 0x8e, 0x3d, 0xc3, 0x9e,
	0x8c, 0x3f, 0xc3, 0x0e, 0x1c, 0x7c, 0x8a, 0xab, 0x23, 0x93, 0x2a, 0xd1, 0xe9, 0xc4, 0x4a, 0x74,
	0xcc, 0xf1, 0xbd, 0x90, 0x7c, 0x7c, 0x97, 0xbf, 0x2c, 0xc0, 0x95, 0x21, 0x86, 0x4d, 0xb3, 0xb1,
	0x1c, 0x44, 0x37, 0x96, 0x8f, 0x5d, 0xc0, 0x54, 0xdc, 0x73, 0x85, 0x3f, 0x15, 0x60, 0x6d, 0x18,
	0xd6, 0x85, 0xf2, 0x29, 0xe6, 0xdf, 0xeb, 0x7d, 0xb1, 0x64, 0x9a, 0xf7, 0x5a, 0x5f, 0x78, 0x93,
	0x39, 0x36, 0xdb, 0x88, 0xcb, 0xa1, 0x33, 0x18, 0x42, 0x87, 0x37, 0x41, 0x0c, 0x86, 0x75, 0xf2,
	0xb0, 0x97, 0x18, 0x68, 0x4a, 0x2d, 0xfa, 0x48, 0xe4, 0x1b, 0x1b, 0xf9, 0x7d, 0x01, 0x2e, 0xdf,
	0x1f, 0xb4, 0x89, 0x12, 0xf9, 0xa6, 0x3c, 0x0b, 0x90, 0x84, 0xf2, 0x4d, 0x48, 0x2c, 0xdf, 0x86,
	0x9d, 0x6a, 0x6e, 0xc0, 0x7c, 0xf8, 0xaa, 0xa0, 0x17, 0xbc, 0xaf, 0x09, 0xfa, 0xa8, 0xfb, 0x66,
	0x1c, 0xcf, 0x38, 0x65, 0xf9, 0x2c, 0x8c, 0x67, 0x9c, 0xe2, 0xb2, 0xd5, 0x1a, 0x20, 0xdb, 0x70,
	0x99, 0x4c, 0x33, 0xaa, 0xff, 0x5b, 0x7e, 0x11, 0xae, 0x0c, 0x11, 0x26, 0x4d, 0xf7, 0x78, 0x8f,
	0x3c, 0xf0, 0x89, 0x4c, 0xc5, 0xde, 0x76, 0x5e, 0x5d, 0xc8, 0x9f, 0xa7, 0x8f, 0x69, 0x12, 0x49,
	0xa5, 0x71, 0xcf, 0x32, 0x4c, 0x92, 0xef, 0x01, 0xa8, 0x6f, 0x8e, 0xb9, 0xbf, 0x8c, 0xca, 0x4a,
	0xa6, 0xca, 0xef, 0x08, 0x30, 0x1f, 0xbd, 0x3f, 0xa1, 0x57, 0xc8, 0x34, 0xc7, 0x65, 0xcc, 0xf6,
	0xff, 0x07, 0x93, 0xe1, 0x04, 0x7c, 0x42, 0x4c, 0xa6, 0xfb, 0x97, 0xd9, 0x05, 0x15, 0x28, 0x08,
	0x17, 0x32, 0xf2, 0x5d, 0x58, 0xde, 0x45, 0x6e, 0x59, 0xf3, 0x77, 0x3d, 0xcf, 0x1a, 0xeb, 0x90,
	0x67, 0x09, 0x8e, 0x5e, 0xf7, 0x4f, 0xaa, 0x39, 0x7a, 0xc0, 0x76, 0xe4, 0x5f, 0x14, 0x60, 0x25,
	0x3a, 0x29, 0x8d, 0xde, 0xeb, 0x50, 0x64, 0xe7, 0x05, 0xba, 0xa3, 0x7a, 0xd9, 0x61, 0x73, 0x7c,
	0x1b, 0x8d, 0x2d, 0x33, 0x67, 0x04, 0x3f, 0x1c, 0xf9, 0x53, 0x00, 0xc1, 0xcf, 0x91, 0x0d, 0x81,
	0x50, 0x19, 0x90, 0x55, 0xd9, 0x2f, 0xf9, 0x63, 0xe4, 0x2e, 0x9f, 0x48, 0x71, 0xe0, 0xef, 0xc6,
	0x29, 0xc4, 0xff, 0x0d, 0x7a, 0x7b, 0x1e, 0x9b, 0x98, 0x46, 0x05, 0x3f, 0x0d, 0x8b, 0x4c, 0x05,
	0xa1, 0x9a, 0xc0, 0xd3, 0xc3, 0x33, 0xe3, 0xf5, 0x10, 0x5a, 0x4f, 0x34, 0x78, 0x80, 0x23, 0xbf,
	0x0c, 0x45, 0x1e, 0x34, 0x5c, 0x27, 0x91, 0xa2, 0xc4, 0x3b, 0xb5, 0xf8, 0x33, 0xe5, 0x37, 0xa9,
	0x5f, 0x28, 0x7e, 0xb1, 0xe3, 0x29, 0xa6, 0x0d, 0x6b, 0xde, 0xf3, 0x03, 0xd7, 0xf2, 0x36, 0x2f,
	0x27, 0x7c, 0x51, 0xff, 0x91, 0x14, 0x5d, 0xd1, 0xed, 0xa6, 0x45, 0xf6, 0xb8, 0x6d, 0x47, 0x5d,
	0xa4, 0x2c, 0x31, 0x40, 0xdb, 0x21, 0x1b, 0x50, 0x15, 0xe6, 0x23, 0x78, 0xc3, 0x65, 0x59, 0x87,
	0xbc, 0xc7, 0x06, 0x51, 0xe4, 0xa4, 0x9a, 0xa3, 0x9d, 0x9d, 0xc0, 0x53, 0xc3, 0x62, 0xa4, 0xf6,
	0xd4, 0x50, 0xed, 0x97, 0xd2, 0x53, 0x43, 0xcb, 0xcc, 0x19, 0xc1, 0x0f, 0x47, 0xde, 0x01, 0x08,
	0x7e, 0x0e, 0xff, 0x30, 0x28, 0x52, 0x70, 0x32, 0xab, 0x04, 0x05, 0x27, 0x7b, 0x02, 0x4f, 0xc4,
	0x51, 0x91, 0xd1, 0xa5, 0x6f, 0xf5, 0xc7, 0x76, 0xc4, 0x86, 0x75, 0x89, 0xe5, 0x23, 0xea, 0xc8,
	0x51, 0x72, 0x69, 0x34, 0xf4, 0x34, 0x48, 0x4c, 0x43, 0x36, 0x32, 0xba, 0xde, 0x87, 0x04, 0x94,
	0xe3, 0x79, 0x83, 0xa7, 0x28, 0xef, 0xc1, 0xb2, 0x96, 0x98, 0x64, 0xce, 0x1d, 0xb3, 0xf7, 0x60,
	0x45, 0x3b, 0x7f, 0xe6, 0x91, 0x4d, 0xda, 0x59, 0x0f, 0x22, 0x63, 0xc8, 0x9d, 0xe5, 0x64, 0xba,
	0x3b, 0xcb, 0x20, 0x70, 0xb2, 0xb1, 0xc0, 0x79, 0x09, 0xae, 0x69, 0xb1, 0xe4, 0xb0, 0x65, 0xb8,
	0xad, 0xe3, 0x74, 0xac, 0x3a, 0x54, 0x57, 0xf1, 0xc0, 0x1b, 0x75, 0x9d, 0xc4, 0xb5, 0x54, 0x32,
	0x7c, 0x4b, 0x45, 0x86, 0x02, 0xe7, 0xcb, 0xde, 0xd1, 0x31, 0xe4, 0xa0, 0x9e, 0x5a, 0xcf, 0x19,
	0x26, 0x78, 0x23, 0x5e, 0xd7, 0x86, 0xfa, 0xe3, 0x45, 0x19, 0x4e, 0x76, 0xad, 0x6c, 0xb2, 0x6b,
	0xd1, 0xeb, 0xec, 0x8b, 0xb8, 0xb0, 0xbc, 0x07, 0x9b, 0xb8, 0x8a, 0xc0, 0x1c, 0x35, 0x06, 0x4e,
	0xcc, 0x37, 0x98, 0xcd, 0xa8, 0x2c, 0x97, 0x01, 0xfc, 0xee, 0x99, 0xb7, 0x21, 0xe4, 0x59, 0xfb,
	0xcc, 0x91, 0xbf, 0x28, 0xc0, 0xfa, 0x50, 0x3a, 0xd2, 0x6d, 0x58, 0x32, 0x1d, 0xbd, 0x65, 0xf5,
	0x5d, 0xdb, 0xea, 0xe2, 0x4a, 0xfc, 0xf0, 0x4c, 0xb7, 0x06, 0x0e, 0xe1, 0x27, 0xaf, 0x2e, 0x98,
	0x4e, 0xc5, 0x1f, 0xda, 0x3a, 0x6b, 0x0c, 0x9c, 0x48, 0x8f, 0x83, 0x06, 0xc0, 0x90, 0x1e, 0x07,
	0xd5, 0x8a, 0xd7, 0xe3, 0x90, 0xbf, 0x25, 0xc0, 0xcd, 0x14, 0x32, 0xa5, 0x09, 0xf0, 0x3e, 0xac,
	0x5a, 0x03, 0x27, 0xbc, 0x4d, 0x79, 0x1f, 0x55, 0xb1, 0x5c, 0xf8, 0xf1, 0x31, 0x75, 0xd3, 0x30,
	0x1e, 0xd4, 0x25, 0x2b, 0x01, 0x2a, 0x7f, 0x3f, 0x03, 0x4b, 0x1a, 0x72, 0xe3, 0x3b, 0xf1, 0xa8,
	0x4b, 0xe3, 0xe0, 0x96, 0x2e, 0x81, 0x4f, 0x2f, 0x69, 0x3f, 0x7b, 0x9e, 0x6d, 0xd5, 0x63, 0x72,
	0xd5, 0x48, 0x84, 0x93, 0xaf, 0x06, 0xb1, 0x35, 0x69, 0x2f, 0x31, 0x4b, 0x4c, 0x98, 0x37, 0x1d,
	0xda, 0x41, 0x94, 0x96, 0x61, 0xda, 0x74, 0x88, 0x71, 0x27, 0xc9, 0xc8, 0x94, 0xe9, 0x60, 0x83,
	0xde, 0x83, 0x55, 0xe7, 0x81, 0x39, 0xf0, 0x7c, 0x40, 0x3f, 0xea, 0x1a, 0x1d, 0xbd, 0x75, 0x8c,
	0x5a, 0x0f, 0xd8, 0xc5, 0xf2, 0x12, 0x1e, 0x66, 0x6e, 0xb0, 0xd3, 0x35, 0x3a, 0x15, 0x3c, 0x86,
	0xa7, 0xf5, 0x11, 0x6a, 0xd3, 0xff, 0x32, 0x05, 0x9d, 0x9a, 0x0e, 0xe6, 0x80, 0x7e, 0xca, 0x3a,
	0x4d, 0xa7, 0xe1, 0x61, 0xed, 0xac, 0xdf, 0xaa, 0xb2, 0x41, 0xf2, 0x99, 0xf4, 0x73, 0x24, 0x83,
	0x9c, 0xb3, 0x32, 0x91, 0x15, 0x78, 0x7a, 0x17, 0xb9, 0xa4, 0x7b, 0x48, 0x92, 0x97, 0x86, 0xba,
	0x5d, 0x64, 0x07, 0x9f, 0x62, 0xb2, 0xd6, 0x4e, 0x8a, 0xe0, 0x96, 0xfb, 0xf0, 0x4c, 0x3a, 0x52,
	0x69, 0xfc, 0x30, 0xda, 0x68, 0xcb, 0xc4, 0x1b, 0x6d, 0x35, 0xb8, 0x45, 0xf5, 0xff, 0xa1, 0x70,
	0x5f, 0x87, 0xdb, 0xa9, 0xa9, 0xa5, 0x10, 0xe0, 0xee, 0xbb, 0x1b, 0x30, 0x1b, 0xf2, 0x37, 0xe9,
	0xcf, 0x05, 0x78, 0x82, 0x7c, 0xfd, 0x99, 0xf8, 0x09, 0xfa, 0xe1, 0x99, 0x5f, 0x53, 0x49, 0xdb,
	0x63, 0x5a, 0x66, 0xa9, 0xfe, 0xf3, 0x83, 0x52, 0xf5, 0x11, 0xa9, 0x50, 0x19, 0xe5, 0x09, 0xe9,
	0x5b, 0x1e, 0xe3, 0xec, 0x99, 0xb2, 0x39, 0xd0, 0x2d, 0xfa, 0xc1, 0x6e, 0x20, 0x03, 0xfd, 0x0e,
	0x30, 0xc5, 0x92, 0x29, 0x3e, 0x70, 0x2e, 0xed, 0x3c, 0x2a, 0x19, 0x9f, 0xf5, 0xaf, 0x08, 0xb0,
	0x16, 0x5c, 0x06, 0xb0, 0x67, 0x56, 0x96, 0x4d, 0x5e, 0x5d, 0x49, 0x9f, 0x1c, 0xbf, 0xcc, 0xb0,
	0x06, 0x57, 0xe9, 0x85, 0x0b, 0xcd, 0xf5, 0xf9, 0xfa, 0x33, 0x01, 0x6e, 0x04, 0x7c, 0x19, 0x8c,
	0xb3, 0xc3, 0x33, 0x9d, 0xdd, 0x29, 0x50, 0x1e, 0xb1, 0xaa, 0xa5, 0x4a, 0xca, 0x95, 0x46, 0x5d,
	0x27, 0x95, 0xb6, 0x1f, 0x8d, 0x88, 0xcf, 0xf7, 0x9f, 0x08, 0xf0, 0x58, 0xc0, 0x77, 0xe4, 0x92,
	0x2f, 0xc4, 0xf4, 0x56, 0xca, 0xf5, 0x46, 0x5c, 0xf4, 0x96, 0x2a, 0x8f, 0x44, 0xc3, 0x67, 0xf9,
	0x3b, 0x02, 0xdc, 0x1c, 0xa7, 0x6a, 0xdf, 0xb1, 0xa5, 0x9d, 0x0b, 0x2a, 0x2a, 0xf2, 0xe2, 0xa9,
	0xb4, 0xfb, 0xc8, 0x74, 0x7c, 0x01, 0x7e, 0x41, 0x00, 0xb1, 0x45, 0x9f, 0x79, 0xf9, 0xfd, 0x5f,
	0xe9, 0xb9, 0x71, 0x1f, 0x7d, 0x25, 0x3d, 0x89, 0x2b, 0xdd, 0x3b, 0xe7, 0x2c, 0x9f, 0x87, 0x2f,
	0x09, 0xb0, 0xdc, 0x41, 0x6e, 0xfc, 0xb5, 0xa2, 0x34, 0xa6, 0x1a, 0x18, 0xfa, 0x68, 0xbe, 0xf4,
	0x89, 0xf3, 0x4f, 0xe4, 0xd8, 0x71, 0x2e, 0xc2, 0x8e, 0x76, 0x51, 0x76, 0xb4, 0x51, 0xec, 0x7c,
	0x4d, 0x80, 0x12, 0xd6, 0x4e, 0x90, 0x1f, 0x39, 0x9e, 0x5e, 0x18, 0x2b, 0xe9, 0xf0, 0xaf, 0xdf,
	0x4a, 0x2f, 0x5e, 0x6c, 0xb2, 0xcf, 0xdb, 0xef, 0x0a, 0x70, 0x95, 0x5a, 0x8e, 0x7e, 0xb1, 0x4c,
	0xbf, 0xa4, 0xeb, 0xa2, 0x87, 0xa8, 0xcb, 0xbe, 0xf3, 0x94, 0x5e, 0x4a, 0x61, 0x89, 0x11, 0x1f,
	0xda, 0x96, 0x3e, 0x7d, 0xe1, 0xf9, 0x3e, 0x97, 0x5f, 0x17, 0xe0, 0x72, 0x88, 0x4b, 0xb2, 0x43,
	0x73, 0x3c, 0xbe, 0x98, 0x6e, 0x8d, 0xe4, 0xcf, 0xa6, 0x4b, 0x9f, 0xba, 0xe0, 0x6c, 0x9f, 0xbf,
	0xb7, 0x04, 0x58, 0x09, 0x6b, 0x31, 0xf8, 0x34, 0x37, 0x55, 0x00, 0x24, 0x7d, 0xb9, 0x9e, 0x2a,
	0x00, 0x12, 0x3f, 0x51, 0x97, 0x27, 0xa4, 0xdf, 0xe1, 0xad, 0x6a, 0x84, 0xbf, 0xd4, 0x61, 0x7c,
	0xa5, 0x94, 0x79, 0xc8, 0xff, 0x35, 0x51, 0x7a, 0xe9, 0xa2, 0xd3, 0x63, 0x51, 0x11, 0x7b, 0xd1,
	0x4e, 0x7a, 0x46, 0x29, 0xa2, 0x62, 0x78, 0xcb, 0x38, 0x45, 0x54, 0x8c, 0x68, 0x12, 0xb3, 0xba,
	0x80, 0xf5, 0x47, 0x63, 0xec, 0x8d, 0xab, 0x0b, 0x46, 0xf5, 0xf5, 0xc7, 0xd5, 0x05, 0x23, 0xdb,
	0xe8, 0xf2, 0x84, 0xf4, 0x79, 0x01, 0x16, 0xb0, 0xce, 0xb8, 0x76, 0xa9, 0xf4, 0xec, 0x58, 0x69,
	0xe3, 0x2d, 0x96, 0xd2, 0x73, 0xe7, 0x9b, 0x14, 0x73, 0xf5, 0xf8, 0xf9, 0x2a, 0x85, 0xab, 0x27,
	0x37, 0x55, 0x53, 0xb8, 0xfa, 0x90, 0xa6, 0x2a, 0xa7, 0x92, 0x50, 0x2f, 0x23, 0x8d, 0x4a, 0x62,
	0x9d, 0x94, 0x34, 0x2a, 0x89, 0x77, 0x42, 0x38, 0x95, 0x44, 0xbb, 0x13, 0x69, 0x54, 0x92, 0xd8,
	0x24, 0x49, 0xa3, 0x92, 0xe4, 0xde, 0x86, 0x3c, 0x21, 0x7d, 0x5b, 0x80, 0x4d, 0x12, 0x59, 0xd4,
	0x44, 0x43, 0x8e, 0xeb, 0xfa, 0x21, 0x3e, 0xf4, 0x8f, 0xab, 0x68, 0xd2, 0x76, 0x42, 0xc6, 0x55,
	0x34, 0xa9, 0xbb, 0x0f, 0xcc, 0xa4, 0xce, 0x79, 0xbd, 0x5c, 0xbb, 0x88, 0x97, 0x6b, 0xc3, 0xbc,
	0x3c, 0x60, 0xe1, 0x1c, 0x5e, 0xa5, 0x5d, 0xc4, 0xab, 0xb4, 0x51, 0x5e, 0xe5, 0x5c, 0xc8, 0xab,
	0xb4, 0x8b, 0x7a, 0x95, 0x36, 0xca, 0xab, 0xfe, 0x5e, 0x80, 0x5b, 0xb4, 0xbd, 0x11, 0x6c, 0x2b,
	0xc4, 0x3e, 0x0e, 0x39, 0x05, 0x87, 0xcf, 0x7a, 0xec, 0x1c, 0x2c, 0xd5, 0xc6, 0xd4, 0x93, 0xe7,
	0x3a, 0x9c, 0x97, 0xf6, 0x3f, 0x24, 0x6a, 0xbe, 0x44, 0xef, 0x08, 0xf0, 0x34, 0xb7, 0x4b, 0x8e,
	0x11, 0x47, 0x19, 0xbf, 0xe7, 0xa5, 0x95, 0xe5, 0xe5, 0x0f, 0x83, 0x94, 0x27, 0xc8, 0x96, 0xf8,
	0xee, 0x07, 0x57, 0x85, 0x7f, 0xf8, 0xe0, 0xaa, 0xf0, 0x83, 0x0f, 0xae, 0x0a, 0x6f, 0xff, 0xf0,
	0xea, 0xc4, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xf1, 0xc1, 0xdf, 0xdd, 0x55, 0x57, 0x00, 0x00,
}
