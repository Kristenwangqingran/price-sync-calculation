// Code generated by protoc-gen-spex-rpc. DO NOT EDIT.

package price_sync_price_calculation

import (
	context "context"

	sps "git.garena.com/shopee/platform/golang_splib/sps"
	common "git.garena.com/shopee/sp_protocol/golang/common.pb"
)

type CalculationService interface {
	CalcGlobalDiscountInfoByItemIds(context.Context, *CalcGlobalDiscountInfoByItemIdsRequest, *CalcGlobalDiscountInfoByItemIdsResponse) uint32
	CalcLocalSipOverseaDiscountPrice(context.Context, *CalcLocalSipOverseaDiscountPriceRequest, *CalcLocalSipOverseaDiscountPriceResponse) uint32
	CalculatePriceForCbsc(context.Context, *CalculatePriceForCbscRequest, *CalculatePriceForCbscResponse) uint32
	CalculateAPriceByPItemForCbSip(context.Context, *CalculateAPriceByPItemForCBSIPRequest, *CalculateAPriceByPItemForCBSIPResponse) uint32
	CalculateSipItemPriceForCbSip(context.Context, *CalculateSipItemPriceForCbSipRequest, *CalculateSipItemPriceForCbSipResponse) uint32
	CalculateAPriceByPItemForLocalSip(context.Context, *CalculateAPriceByPItemForLocalSIPRequest, *CalculateAPriceByPItemForLocalSIPResponse) uint32
	ConvertCurrency(context.Context, *ConvertCurrencyRequest, *ConvertCurrencyResponse) uint32
	GetCbscPriceFactor(context.Context, *GetCbscPriceFactorRequest, *GetCbscPriceFactorResponse) uint32
	SetCbscPriceFactor(context.Context, *SetCbscPriceFactorRequest, *SetCbscPriceFactorResponse) uint32
	GetLocalSipPriceFactor(context.Context, *GetLocalSipPriceFactorRequest, *GetLocalSipPriceFactorResponse) uint32
	GetCbSipRegionLevelConfig(context.Context, *GetCbSipRegionLevelConfigRequest, *GetCbSipRegionLevelConfigResponse) uint32
	GetCbSipShopLevelConfig(context.Context, *GetCbSipShopLevelConfigRequest, *GetCbSipShopLevelConfigResponse) uint32
	GetCbSipRateConfig(context.Context, *GetCbSipRateConfigRequest, *GetCbSipRateConfigResponse) uint32
	GetCbSipAHiddenFeeConfig(context.Context, *GetCbSipAHiddenFeeConfigRequest, *GetCbSipAHiddenFeeConfigResponse) uint32
	GetProfitRateLimitList(context.Context, *GetProfitRateLimitListRequest, *GetProfitRateLimitListResponse) uint32
	UpdateProfitRateLimit(context.Context, *UpdateProfitRateLimitRequest, *UpdateProfitRateLimitResponse) uint32
	GetAShopMargin(context.Context, *GetAShopMarginRequest, *GetAShopMarginResponse) uint32
	GetAShopPriceRatio(context.Context, *GetAShopPriceRatioRequest, *GetAShopPriceRatioResponse) uint32
	GetAItemMargin(context.Context, *GetAItemMarginRequest, *GetAItemMarginResponse) uint32
	GetAItemRealWeight(context.Context, *GetAItemRealWeightRequest, *GetAItemRealWeightResponse) uint32
	GetPShopOpsPriceRatioSettingBatch(context.Context, *GetPShopOpsPriceRatioSettingBatchRequest, *GetPShopOpsPriceRatioSettingBatchResponse) uint32
	SetAShopMargin(context.Context, *SetAShopMarginRequest, *SetAShopMarginResponse) uint32
	SetAItemMargin(context.Context, *SetAItemMarginRequest, *SetAItemMarginResponse) uint32
	SetAItemRealWeight(context.Context, *SetAItemRealWeightRequest, *SetAItemRealWeightResponse) uint32
	CreateCbSipAShopSellerDiscountPromotion(context.Context, *CreateCBSIPAShopSellerDiscountPromotionRequest, *CreateCBSIPAShopSellerDiscountPromotionResponse) uint32
	GetCbSipAShopSellerDiscountPromotion(context.Context, *GetCBSIPAShopSellerDiscountPromotionRequest, *GetCBSIPAShopSellerDiscountPromotionResponse) uint32
}

type CalculationServer struct {
	service CalculationService
}

func (s *CalculationServer) _Calculation_CalcGlobalDiscountInfoByItemIdsHandler(ctx context.Context, request interface{}, response interface{}) uint32 {
	req, ok := request.(*CalcGlobalDiscountInfoByItemIdsRequest)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	resp, ok := response.(*CalcGlobalDiscountInfoByItemIdsResponse)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	return s.service.CalcGlobalDiscountInfoByItemIds(ctx, req, resp)
}

func (s *CalculationServer) _Calculation_CalcLocalSipOverseaDiscountPriceHandler(ctx context.Context, request interface{}, response interface{}) uint32 {
	req, ok := request.(*CalcLocalSipOverseaDiscountPriceRequest)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	resp, ok := response.(*CalcLocalSipOverseaDiscountPriceResponse)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	return s.service.CalcLocalSipOverseaDiscountPrice(ctx, req, resp)
}

func (s *CalculationServer) _Calculation_CalculatePriceForCbscHandler(ctx context.Context, request interface{}, response interface{}) uint32 {
	req, ok := request.(*CalculatePriceForCbscRequest)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	resp, ok := response.(*CalculatePriceForCbscResponse)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	return s.service.CalculatePriceForCbsc(ctx, req, resp)
}

func (s *CalculationServer) _Calculation_CalculateAPriceByPItemForCbSipHandler(ctx context.Context, request interface{}, response interface{}) uint32 {
	req, ok := request.(*CalculateAPriceByPItemForCBSIPRequest)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	resp, ok := response.(*CalculateAPriceByPItemForCBSIPResponse)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	return s.service.CalculateAPriceByPItemForCbSip(ctx, req, resp)
}

func (s *CalculationServer) _Calculation_CalculateSipItemPriceForCbSipHandler(ctx context.Context, request interface{}, response interface{}) uint32 {
	req, ok := request.(*CalculateSipItemPriceForCbSipRequest)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	resp, ok := response.(*CalculateSipItemPriceForCbSipResponse)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	return s.service.CalculateSipItemPriceForCbSip(ctx, req, resp)
}

func (s *CalculationServer) _Calculation_CalculateAPriceByPItemForLocalSipHandler(ctx context.Context, request interface{}, response interface{}) uint32 {
	req, ok := request.(*CalculateAPriceByPItemForLocalSIPRequest)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	resp, ok := response.(*CalculateAPriceByPItemForLocalSIPResponse)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	return s.service.CalculateAPriceByPItemForLocalSip(ctx, req, resp)
}

func (s *CalculationServer) _Calculation_ConvertCurrencyHandler(ctx context.Context, request interface{}, response interface{}) uint32 {
	req, ok := request.(*ConvertCurrencyRequest)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	resp, ok := response.(*ConvertCurrencyResponse)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	return s.service.ConvertCurrency(ctx, req, resp)
}

func (s *CalculationServer) _Calculation_GetCbscPriceFactorHandler(ctx context.Context, request interface{}, response interface{}) uint32 {
	req, ok := request.(*GetCbscPriceFactorRequest)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	resp, ok := response.(*GetCbscPriceFactorResponse)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	return s.service.GetCbscPriceFactor(ctx, req, resp)
}

func (s *CalculationServer) _Calculation_SetCbscPriceFactorHandler(ctx context.Context, request interface{}, response interface{}) uint32 {
	req, ok := request.(*SetCbscPriceFactorRequest)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	resp, ok := response.(*SetCbscPriceFactorResponse)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	return s.service.SetCbscPriceFactor(ctx, req, resp)
}

func (s *CalculationServer) _Calculation_GetLocalSipPriceFactorHandler(ctx context.Context, request interface{}, response interface{}) uint32 {
	req, ok := request.(*GetLocalSipPriceFactorRequest)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	resp, ok := response.(*GetLocalSipPriceFactorResponse)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	return s.service.GetLocalSipPriceFactor(ctx, req, resp)
}

func (s *CalculationServer) _Calculation_GetCbSipRegionLevelConfigHandler(ctx context.Context, request interface{}, response interface{}) uint32 {
	req, ok := request.(*GetCbSipRegionLevelConfigRequest)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	resp, ok := response.(*GetCbSipRegionLevelConfigResponse)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	return s.service.GetCbSipRegionLevelConfig(ctx, req, resp)
}

func (s *CalculationServer) _Calculation_GetCbSipShopLevelConfigHandler(ctx context.Context, request interface{}, response interface{}) uint32 {
	req, ok := request.(*GetCbSipShopLevelConfigRequest)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	resp, ok := response.(*GetCbSipShopLevelConfigResponse)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	return s.service.GetCbSipShopLevelConfig(ctx, req, resp)
}

func (s *CalculationServer) _Calculation_GetCbSipRateConfigHandler(ctx context.Context, request interface{}, response interface{}) uint32 {
	req, ok := request.(*GetCbSipRateConfigRequest)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	resp, ok := response.(*GetCbSipRateConfigResponse)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	return s.service.GetCbSipRateConfig(ctx, req, resp)
}

func (s *CalculationServer) _Calculation_GetCbSipAHiddenFeeConfigHandler(ctx context.Context, request interface{}, response interface{}) uint32 {
	req, ok := request.(*GetCbSipAHiddenFeeConfigRequest)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	resp, ok := response.(*GetCbSipAHiddenFeeConfigResponse)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	return s.service.GetCbSipAHiddenFeeConfig(ctx, req, resp)
}

func (s *CalculationServer) _Calculation_GetProfitRateLimitListHandler(ctx context.Context, request interface{}, response interface{}) uint32 {
	req, ok := request.(*GetProfitRateLimitListRequest)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	resp, ok := response.(*GetProfitRateLimitListResponse)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	return s.service.GetProfitRateLimitList(ctx, req, resp)
}

func (s *CalculationServer) _Calculation_UpdateProfitRateLimitHandler(ctx context.Context, request interface{}, response interface{}) uint32 {
	req, ok := request.(*UpdateProfitRateLimitRequest)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	resp, ok := response.(*UpdateProfitRateLimitResponse)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	return s.service.UpdateProfitRateLimit(ctx, req, resp)
}

func (s *CalculationServer) _Calculation_GetAShopMarginHandler(ctx context.Context, request interface{}, response interface{}) uint32 {
	req, ok := request.(*GetAShopMarginRequest)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	resp, ok := response.(*GetAShopMarginResponse)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	return s.service.GetAShopMargin(ctx, req, resp)
}

func (s *CalculationServer) _Calculation_GetAShopPriceRatioHandler(ctx context.Context, request interface{}, response interface{}) uint32 {
	req, ok := request.(*GetAShopPriceRatioRequest)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	resp, ok := response.(*GetAShopPriceRatioResponse)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	return s.service.GetAShopPriceRatio(ctx, req, resp)
}

func (s *CalculationServer) _Calculation_GetAItemMarginHandler(ctx context.Context, request interface{}, response interface{}) uint32 {
	req, ok := request.(*GetAItemMarginRequest)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	resp, ok := response.(*GetAItemMarginResponse)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	return s.service.GetAItemMargin(ctx, req, resp)
}

func (s *CalculationServer) _Calculation_GetAItemRealWeightHandler(ctx context.Context, request interface{}, response interface{}) uint32 {
	req, ok := request.(*GetAItemRealWeightRequest)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	resp, ok := response.(*GetAItemRealWeightResponse)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	return s.service.GetAItemRealWeight(ctx, req, resp)
}

func (s *CalculationServer) _Calculation_GetPShopOpsPriceRatioSettingBatchHandler(ctx context.Context, request interface{}, response interface{}) uint32 {
	req, ok := request.(*GetPShopOpsPriceRatioSettingBatchRequest)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	resp, ok := response.(*GetPShopOpsPriceRatioSettingBatchResponse)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	return s.service.GetPShopOpsPriceRatioSettingBatch(ctx, req, resp)
}

func (s *CalculationServer) _Calculation_SetAShopMarginHandler(ctx context.Context, request interface{}, response interface{}) uint32 {
	req, ok := request.(*SetAShopMarginRequest)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	resp, ok := response.(*SetAShopMarginResponse)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	return s.service.SetAShopMargin(ctx, req, resp)
}

func (s *CalculationServer) _Calculation_SetAItemMarginHandler(ctx context.Context, request interface{}, response interface{}) uint32 {
	req, ok := request.(*SetAItemMarginRequest)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	resp, ok := response.(*SetAItemMarginResponse)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	return s.service.SetAItemMargin(ctx, req, resp)
}

func (s *CalculationServer) _Calculation_SetAItemRealWeightHandler(ctx context.Context, request interface{}, response interface{}) uint32 {
	req, ok := request.(*SetAItemRealWeightRequest)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	resp, ok := response.(*SetAItemRealWeightResponse)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	return s.service.SetAItemRealWeight(ctx, req, resp)
}

func (s *CalculationServer) _Calculation_CreateCbSipAShopSellerDiscountPromotionHandler(ctx context.Context, request interface{}, response interface{}) uint32 {
	req, ok := request.(*CreateCBSIPAShopSellerDiscountPromotionRequest)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	resp, ok := response.(*CreateCBSIPAShopSellerDiscountPromotionResponse)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	return s.service.CreateCbSipAShopSellerDiscountPromotion(ctx, req, resp)
}

func (s *CalculationServer) _Calculation_GetCbSipAShopSellerDiscountPromotionHandler(ctx context.Context, request interface{}, response interface{}) uint32 {
	req, ok := request.(*GetCBSIPAShopSellerDiscountPromotionRequest)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	resp, ok := response.(*GetCBSIPAShopSellerDiscountPromotionResponse)
	if !ok {
		return uint32(common.Constant_ERROR_SP_BODY)
	}
	return s.service.GetCbSipAShopSellerDiscountPromotion(ctx, req, resp)
}

func NewCalculationServer(service CalculationService) *CalculationServer {
	return &CalculationServer{service: service}
}

func (s *CalculationServer) ProcessorConfigs() []*sps.ProcessorConfig {
	processors := []*sps.ProcessorConfig{
		{
			Command:   CmdCalcGlobalDiscountInfoByItemIds,
			Processor: s._Calculation_CalcGlobalDiscountInfoByItemIdsHandler,
			Req:       &CalcGlobalDiscountInfoByItemIdsRequest{},
			Resp:      &CalcGlobalDiscountInfoByItemIdsResponse{},
		},
		{
			Command:   CmdCalcLocalSipOverseaDiscountPrice,
			Processor: s._Calculation_CalcLocalSipOverseaDiscountPriceHandler,
			Req:       &CalcLocalSipOverseaDiscountPriceRequest{},
			Resp:      &CalcLocalSipOverseaDiscountPriceResponse{},
		},
		{
			Command:   CmdCalculatePriceForCbsc,
			Processor: s._Calculation_CalculatePriceForCbscHandler,
			Req:       &CalculatePriceForCbscRequest{},
			Resp:      &CalculatePriceForCbscResponse{},
		},
		{
			Command:   CmdCalculateAPriceByPItemForCbSip,
			Processor: s._Calculation_CalculateAPriceByPItemForCbSipHandler,
			Req:       &CalculateAPriceByPItemForCBSIPRequest{},
			Resp:      &CalculateAPriceByPItemForCBSIPResponse{},
		},
		{
			Command:   CmdCalculateSipItemPriceForCbSip,
			Processor: s._Calculation_CalculateSipItemPriceForCbSipHandler,
			Req:       &CalculateSipItemPriceForCbSipRequest{},
			Resp:      &CalculateSipItemPriceForCbSipResponse{},
		},
		{
			Command:   CmdCalculateAPriceByPItemForLocalSip,
			Processor: s._Calculation_CalculateAPriceByPItemForLocalSipHandler,
			Req:       &CalculateAPriceByPItemForLocalSIPRequest{},
			Resp:      &CalculateAPriceByPItemForLocalSIPResponse{},
		},
		{
			Command:   CmdConvertCurrency,
			Processor: s._Calculation_ConvertCurrencyHandler,
			Req:       &ConvertCurrencyRequest{},
			Resp:      &ConvertCurrencyResponse{},
		},
		{
			Command:   CmdGetCbscPriceFactor,
			Processor: s._Calculation_GetCbscPriceFactorHandler,
			Req:       &GetCbscPriceFactorRequest{},
			Resp:      &GetCbscPriceFactorResponse{},
		},
		{
			Command:   CmdSetCbscPriceFactor,
			Processor: s._Calculation_SetCbscPriceFactorHandler,
			Req:       &SetCbscPriceFactorRequest{},
			Resp:      &SetCbscPriceFactorResponse{},
		},
		{
			Command:   CmdGetLocalSipPriceFactor,
			Processor: s._Calculation_GetLocalSipPriceFactorHandler,
			Req:       &GetLocalSipPriceFactorRequest{},
			Resp:      &GetLocalSipPriceFactorResponse{},
		},
		{
			Command:   CmdGetCbSipRegionLevelConfig,
			Processor: s._Calculation_GetCbSipRegionLevelConfigHandler,
			Req:       &GetCbSipRegionLevelConfigRequest{},
			Resp:      &GetCbSipRegionLevelConfigResponse{},
		},
		{
			Command:   CmdGetCbSipShopLevelConfig,
			Processor: s._Calculation_GetCbSipShopLevelConfigHandler,
			Req:       &GetCbSipShopLevelConfigRequest{},
			Resp:      &GetCbSipShopLevelConfigResponse{},
		},
		{
			Command:   CmdGetCbSipRateConfig,
			Processor: s._Calculation_GetCbSipRateConfigHandler,
			Req:       &GetCbSipRateConfigRequest{},
			Resp:      &GetCbSipRateConfigResponse{},
		},
		{
			Command:   CmdGetCbSipAHiddenFeeConfig,
			Processor: s._Calculation_GetCbSipAHiddenFeeConfigHandler,
			Req:       &GetCbSipAHiddenFeeConfigRequest{},
			Resp:      &GetCbSipAHiddenFeeConfigResponse{},
		},
		{
			Command:   CmdGetProfitRateLimitList,
			Processor: s._Calculation_GetProfitRateLimitListHandler,
			Req:       &GetProfitRateLimitListRequest{},
			Resp:      &GetProfitRateLimitListResponse{},
		},
		{
			Command:   CmdUpdateProfitRateLimit,
			Processor: s._Calculation_UpdateProfitRateLimitHandler,
			Req:       &UpdateProfitRateLimitRequest{},
			Resp:      &UpdateProfitRateLimitResponse{},
		},
		{
			Command:   CmdGetAShopMargin,
			Processor: s._Calculation_GetAShopMarginHandler,
			Req:       &GetAShopMarginRequest{},
			Resp:      &GetAShopMarginResponse{},
		},
		{
			Command:   CmdGetAShopPriceRatio,
			Processor: s._Calculation_GetAShopPriceRatioHandler,
			Req:       &GetAShopPriceRatioRequest{},
			Resp:      &GetAShopPriceRatioResponse{},
		},
		{
			Command:   CmdGetAItemMargin,
			Processor: s._Calculation_GetAItemMarginHandler,
			Req:       &GetAItemMarginRequest{},
			Resp:      &GetAItemMarginResponse{},
		},
		{
			Command:   CmdGetAItemRealWeight,
			Processor: s._Calculation_GetAItemRealWeightHandler,
			Req:       &GetAItemRealWeightRequest{},
			Resp:      &GetAItemRealWeightResponse{},
		},
		{
			Command:   CmdGetPShopOpsPriceRatioSettingBatch,
			Processor: s._Calculation_GetPShopOpsPriceRatioSettingBatchHandler,
			Req:       &GetPShopOpsPriceRatioSettingBatchRequest{},
			Resp:      &GetPShopOpsPriceRatioSettingBatchResponse{},
		},
		{
			Command:   CmdSetAShopMargin,
			Processor: s._Calculation_SetAShopMarginHandler,
			Req:       &SetAShopMarginRequest{},
			Resp:      &SetAShopMarginResponse{},
		},
		{
			Command:   CmdSetAItemMargin,
			Processor: s._Calculation_SetAItemMarginHandler,
			Req:       &SetAItemMarginRequest{},
			Resp:      &SetAItemMarginResponse{},
		},
		{
			Command:   CmdSetAItemRealWeight,
			Processor: s._Calculation_SetAItemRealWeightHandler,
			Req:       &SetAItemRealWeightRequest{},
			Resp:      &SetAItemRealWeightResponse{},
		},
		{
			Command:   CmdCreateCbSipAShopSellerDiscountPromotion,
			Processor: s._Calculation_CreateCbSipAShopSellerDiscountPromotionHandler,
			Req:       &CreateCBSIPAShopSellerDiscountPromotionRequest{},
			Resp:      &CreateCBSIPAShopSellerDiscountPromotionResponse{},
		},
		{
			Command:   CmdGetCbSipAShopSellerDiscountPromotion,
			Processor: s._Calculation_GetCbSipAShopSellerDiscountPromotionHandler,
			Req:       &GetCBSIPAShopSellerDiscountPromotionRequest{},
			Resp:      &GetCBSIPAShopSellerDiscountPromotionResponse{},
		},
	}
	return processors
}

const (
	CmdCalcGlobalDiscountInfoByItemIds         = "price.sync_price.calculation.calc_global_discount_info_by_item_ids"
	CmdCalcLocalSipOverseaDiscountPrice        = "price.sync_price.calculation.calc_local_sip_oversea_discount_price"
	CmdCalculatePriceForCbsc                   = "price.sync_price.calculation.calculate_price_for_cbsc"
	CmdCalculateAPriceByPItemForCbSip          = "price.sync_price.calculation.calculate_a_price_by_p_item_for_cb_sip"
	CmdCalculateSipItemPriceForCbSip           = "price.sync_price.calculation.calculate_sip_item_price_for_cb_sip"
	CmdCalculateAPriceByPItemForLocalSip       = "price.sync_price.calculation.calculate_a_price_by_p_item_for_local_sip"
	CmdConvertCurrency                         = "price.sync_price.calculation.convert_currency"
	CmdGetCbscPriceFactor                      = "price.sync_price.calculation.get_cbsc_price_factor"
	CmdSetCbscPriceFactor                      = "price.sync_price.calculation.set_cbsc_price_factor"
	CmdGetLocalSipPriceFactor                  = "price.sync_price.calculation.get_local_sip_price_factor"
	CmdGetCbSipRegionLevelConfig               = "price.sync_price.calculation.get_cb_sip_region_level_config"
	CmdGetCbSipShopLevelConfig                 = "price.sync_price.calculation.get_cb_sip_shop_level_config"
	CmdGetCbSipRateConfig                      = "price.sync_price.calculation.get_cb_sip_rate_config"
	CmdGetCbSipAHiddenFeeConfig                = "price.sync_price.calculation.get_cb_sip_a_hidden_fee_config"
	CmdGetProfitRateLimitList                  = "price.sync_price.calculation.get_profit_rate_limit_list"
	CmdUpdateProfitRateLimit                   = "price.sync_price.calculation.update_profit_rate_limit"
	CmdGetAShopMargin                          = "price.sync_price.calculation.get_a_shop_margin"
	CmdGetAShopPriceRatio                      = "price.sync_price.calculation.get_a_shop_price_ratio"
	CmdGetAItemMargin                          = "price.sync_price.calculation.get_a_item_margin"
	CmdGetAItemRealWeight                      = "price.sync_price.calculation.get_a_item_real_weight"
	CmdGetPShopOpsPriceRatioSettingBatch       = "price.sync_price.calculation.get_p_shop_ops_price_ratio_setting_batch"
	CmdSetAShopMargin                          = "price.sync_price.calculation.set_a_shop_margin"
	CmdSetAItemMargin                          = "price.sync_price.calculation.set_a_item_margin"
	CmdSetAItemRealWeight                      = "price.sync_price.calculation.set_a_item_real_weight"
	CmdCreateCbSipAShopSellerDiscountPromotion = "price.sync_price.calculation.create_cb_sip_a_shop_seller_discount_promotion"
	CmdGetCbSipAShopSellerDiscountPromotion    = "price.sync_price.calculation.get_cb_sip_a_shop_seller_discount_promotion"
)
